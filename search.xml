<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
    
    <entry>
      <title><![CDATA[三亚看海]]></title>
      <url>http://licao404.com/2017/01/14/%E4%B8%89%E4%BA%9A%E7%9C%8B%E6%B5%B7/</url>
      <content type="html"><![CDATA[<div class="group-picture"><div class="group-picture-container"><div class="group-picture-row"><div class="group-picture-column" style="width: 100%;"><img src="http://7xrvo9.com1.z0.glb.clouddn.com/2017sanyaYDXJ0964_puzzle_36715x2.jpg" alt=""></div></div><div class="group-picture-row"><div class="group-picture-column" style="width: 50%;"><img src="http://7xrvo9.com1.z0.glb.clouddn.com/2017sanyaYDXJ1170_puzzle_17948x0.jpg" alt=""></div><div class="group-picture-column" style="width: 50%;"><img src="http://7xrvo9.com1.z0.glb.clouddn.com/2017sanyaYDXJ0963_puzzle_16157x0.jpg" alt=""></div></div></div></div>
<a id="more"></a>
<blockquote class="blockquote-center">分界洲岛</blockquote>

<iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width="330" height="86" src="//music.163.com/outchain/player?type=2&id=28700964&auto=0&height=66"></iframe>

<p><img src="http://7xrvo9.com1.z0.glb.clouddn.com/2017sanyaYDXJ0947_puzzle_49788x3.jpg" alt=""></p>
<blockquote>
<p>漂亮的小海岛，想起后会无期</p>
</blockquote>
<p>公司Outing，冲绳、岘港、济州岛、三亚等可选，选择去的三亚（主要是没护照）。<br>行程第二天下午到分界洲岛，阳光大好，第一次看海。</p>
<p><img src="http://7xrvo9.com1.z0.glb.clouddn.com/2017sanyaYDXJ1010_puzzle_73374x3.jpg" alt=""></p>
<blockquote>
<p>一月份气温20℃左右，衬衫一件，舒适宜人</p>
</blockquote>
<p><img src="http://7xrvo9.com1.z0.glb.clouddn.com/2017sanyaIMG_20170214_230826.jpg" alt=""></p>
<blockquote>
<p>白色细沙滩，宝石蓝绿的海水，婚纱照圣地</p>
</blockquote>
<blockquote class="blockquote-center">大小洞天等</blockquote>

<p><img src="http://7xrvo9.com1.z0.glb.clouddn.com/2017sanyaYDXJ1180_pic_edit_20170212220335.jpg" alt=""></p>
<blockquote>
<p>葛优躺在礁石上晒咸鱼，年轻人会变懒</p>
</blockquote>
<p><img src="http://7xrvo9.com1.z0.glb.clouddn.com/2017sanyaYDXJ1170_puzzle_61619x1.jpg" alt=""></p>
<blockquote>
<p>这一带都是礁石滩，视野相当宽阔，海平面分明</p>
</blockquote>
<p><img src="http://7xrvo9.com1.z0.glb.clouddn.com/2017sanyaYDXJ1198_puzzle_75431x2.jpg" alt=""></p>
<blockquote>
<p>可以下海摸鱼，借用下灿灿的背影</p>
</blockquote>
<p><img src="http://7xrvo9.com1.z0.glb.clouddn.com/2017sanyaYDXJ1218_puzzle_21492x3.jpg" alt=""></p>
<hr>
]]></content>
      
        <categories>
            
            <category> 随想 </category>
            
            <category> 摄影 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 杂谈 </tag>
            
            <tag> 看看 </tag>
            
            <tag> 随手拍 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[能做喜欢做的-就很好]]></title>
      <url>http://licao404.com/2016/07/17/%E8%83%BD%E5%81%9A%E5%96%9C%E6%AC%A2%E5%81%9A%E7%9A%84-%E5%B0%B1%E5%BE%88%E5%A5%BD/</url>
      <content type="html"><![CDATA[<span itemprop="image" itemscope="" itemtype="http://schema.org/ImageObject"><img itemprop="url image" src="http://7xrvo9.com1.z0.glb.clouddn.com/20160716/%E8%8D%B7%E8%8A%B1.jpg" class="full-image"><meta itemprop="width" content="auto"><meta itemprop="height" content="auto"></span>
<blockquote class="blockquote-center">想来已然是好久没有更新过博客了。六月底匆忙结束了学校的事情，七月出头从南京赶赴杭州，开启一段全新的历程（蓄谋已久），其中的酸爽体验都让我差点忘了还有本站点，哭瞎-。- 不一样的感觉、不一样的环境、不一样的一群人，两个礼拜下来都有新的体验，技术也好，思考方式也罢，一切都还是入坑的开始…</blockquote>

<a id="more"></a>
<blockquote>
<p>首图为杭州西湖夏荷</p>
</blockquote>
<embed src="http://music.163.com/style/swf/widget.swf?sid=405677015&type=0&auto=0&width=310&height=90" width="330" height="110" allownetworking="all">

<hr>
<p>一直想把自己这一年多来的想法和经历写写，关于技术，关于诗和远方…然而一直搁浅到现在，觉得时候未到，即便现在也是不太成熟。过了暑假就是大四，所以归根结底还是一名学生，大部分见识和想法都不及业内前辈全面且深入，在大部分事情上都秉着求知若渴的谦卑态度。很庆幸现在做着自己喜欢的事情，在当初选择的领域上保持着满血的激情。</p>
<h3 id="我的故事"><a href="#我的故事" class="headerlink" title="# 我的故事"></a># 我的故事</h3><p>这是个普通而忧伤的故事（BGM）。</p>
<p>事情是这样的，本屌丝码农（以前是屌丝，现在是码农…依旧屌丝）去年暑假在软件大道实习（干的是产品+运营+测试，握草…小公司太压榨人了-。-）后，接触到前端开发这类猿，开始YY在咖啡厅，一台Mac、一行js代码能改变世界的惬意工作（事实很伤感X1），遂抱着誓死不干屌丝“电子”（偏硬）的决心，决定跳出电子专业的坑（当年图样图森破，泪…），开始苦逼的前端自学。</p>
<p>从菜鸟开始干，不求人生巅峰，但求干点合心意的事，事实很伤感X2，只是从一个坑跳入另外一个更大更深的坑，不同的是乐在其中。期间经历坑坑洼洼一年有余，和大部分过来人的经历无异，白天拼命看视频和刷书、翻阅文档、敲代码熬到半夜(用的是青轴，室友没打死我也是含泪感激)、凌晨打鸡血写博客、积累代码、参与团队项目,开发简单的上线产品、每天看点微信公众号、现在收藏夹里一大堆大牛的博客，线上也认识了不少前端战友、大牛工程师，给予我许多帮助，一起交流技术、经历，分享经验，相互鼓励。享受前端带来的开放和平等，享受成果孕育而出的成就感。</p>
<p><img src="http://7xrvo9.com1.z0.glb.clouddn.com/20160716/%E5%85%AC%E5%8F%B8.jpg" alt=""></p>
<blockquote>
<p>公司一角</p>
</blockquote>
<p>六月份的时候按照自己的计划拿到了不算差的实习offer，并决定来杭州，进了现在的公司（深感属于浙大系）。（广告插播,可忽略-&gt;）目前一切甚好，简单、专注、开放的价值观，有激情的小伙伴，大牛云集，技术氛围浓厚，CEO、CTO工位和普通员工一样，多样化的业务，逼格爆满的办公地点和环境，福利待遇行业靠上（有钱），正极速地持续拓展中（预计一年内会达到500人），目前一直招人（实习、应届都没问题），有意向的小伙伴可以发简历到我邮箱（邮箱见左边站点概览），不限前端，后端、算法、设计、交互等，详细想了解的细节可以在文章下面评论框提问（&lt;-广告插播完毕，HR姐姐会感谢我的）。</p>
<h3 id="说说前端"><a href="#说说前端" class="headerlink" title="# 说说前端"></a># 说说前端</h3><h4 id="1-系统且扎实"><a href="#1-系统且扎实" class="headerlink" title="1.系统且扎实"></a>1.系统且扎实</h4><p>前端正式成为一个岗位发展起来的时间还是很短的，初级前端的入门是不太高的，基本上看几天 <code>W3CSchool</code> 掌握了基本的HTML、CSS和切图知识就能写出静态页面了，满足大部分公司日常的运营页面、活动页面需求，这也是我来公司这两个礼拜刚开始做的工作，写了几个活动页面，基本上纯静态页面，最多有一个表单验证（很简单的接口），这种工作也是俗称的切图仔，谁不是这样过来呢。静态页面出效果简单，但合理的页面布局，合乎规范，语义化的标签使用、命名是区别新人和老司机的标杆，这一切很基础也很重要，关乎SEO和性能，所以在一些大公司会有一些专门做页面重构的部门，一般都是精通HTML、CSS、W3C规范的妹纸。</p>
<p>在前面的基础之上最后的效果是像素级还原设计稿（真TM是1像素都不放过，人道呢），让UI满意。这还不够，如果用户用的是IE8甚至版本更低的浏览器，也要保证你的页面是OK的，检验方式可以是将不同浏览器上的效果截图放入<code>Photoshop</code>与设计图做重合度对比验证，听起来对新人很变态，但这就是基本功。这需要你深入理解各个元素属性以及他们在不同浏览器上的兼容情况，并熟练浏览器兼容解决方法，尽可能减少因浏览器版本不同带来的体验差异，但也要考虑业务的实际情况。其实一个全面兼顾的静态页面也不太简单，当然随着浏览器的升级换代兼容性处理的能力也逐步弱化，大多数情况下不会遇到苛刻的兼容性要求。</p>
<p>深入理解每一个知识点、每一个元素、每一个属性，以及但他们组合在一起时候的化学反应，相互影响一般是初学者会忽视的地方，这基本上无可避免（做的不够多，实践一次积累一次）。随着入行工作时间的增长和经验加持一般都是会不断的再学习，逐渐加深理解，当达到手速快到不加思考就能秒出符合以上要求的静态页，这样静态页的功底算是炉火纯青了。网上优秀的代码规范很多，也许你刚开始按照规范写，以为自己会写规范化代码，简历上也牛逼的写着，然而这几年前端大牛还是那几个，前端初学者一大堆，入门门槛依然比较低。这是机会也是该看清的，踏实学习比每天追求新技术来的靠谱，当然使用新技术不是什么坏事，不过一切都得建立在你喜欢的基础上，为之付出精力是值得的，学习总是有好处的。</p>
<h4 id="2-深入再深入"><a href="#2-深入再深入" class="headerlink" title="2.深入再深入"></a>2.深入再深入</h4><p><img src="http://7xrvo9.com1.z0.glb.clouddn.com/20160716/post-bg-js-version.jpg" alt=""></p>
<p>我想前端基础有意思的部分可能是深入理解原生JavaScript、DOM、BOM，在此基础上熟练使用jQuery等js库，你会发现你是个造物者，利用DOM操作页面上的一切，利用ajax交互数据让你的页面活络起来。这里你会愈加深切的体悟到你就是个彻头彻尾的屌丝程序猿，每天花大量时间在调试程序上，因为会一直遇到问题。做一些可复用组件、通用jQuery插件来提高效率，实现一些炫酷的js动画，可以开始沉淀自己的代码仓库，这时候可以胜任一般的前端业务，这段时期需要大量代码来练手，不断写就是了，特别要注意采用一些设计模式来写代码，注重代码可复用性，封装性，模块化的思想，程序员面向对象编程是必须的（据说有面向工资的，是B厂员工么）。</p>
<p>学习并且实践完js的一些核心概念后才基本对前端有了一个大致清晰的认识,尝试做一些有意思的项目，有机会参与开源项目更好。参与团队协作的项目，了解互联网项目开发流程，如何做到和队友不互相伤害（然并卵…），过程并且会用到一些高效工具，例如<code>less</code>或<code>sass</code>等css预处理工具、<code>requireJS</code>模块化、<code>Gulp</code>自动化流程（当然会有更高级的<code>Webpack</code>）、<code>NPM</code>等,前端工具太多了，要用就去看文档吧；有兴趣的话可以阅读下<code>jQuery</code>以及<code>Bootstrap</code>的源码，相信这比自己作死敲代码来得更爽快，并且能更深入理解技术原理，来龙去脉熟稔于心。</p>
<h4 id="3-想学啥就学吧"><a href="#3-想学啥就学吧" class="headerlink" title="3.想学啥就学吧"></a>3.想学啥就学吧</h4><p>上面的基础如果打点妥当，可以关注并学习下前端新动向。例如<code>ECMA2015</code>的新特性新语法，据说之后<code>ECMAScript</code>会步入每年规范化的道路，这意味着这门语言会更加强大，更新周期也会缩短，关注下新标准有恃无恐，毕竟是吃饭的家伙。同时，如果你对服务器后端感兴趣，<code>NoodJs</code>会成为你轻易涉足的利器，利用<code>Express</code>搭建个博客也是入门的不错选择，<code>NoodJs</code>是个好东西，大前端不是梦。之后，便可以看新技术啦，轻量的<code>MVVM</code>框架<code>Vue</code>,近年来如火如荼的<code>Angular</code>和<code>React</code>，包括最新的<code>React Native</code>,不过不太建议一股脑学习，根据个人喜好和项目需要进行学习使用方是良策。</p>
<p><img src="http://7xrvo9.com1.z0.glb.clouddn.com/20160527/post-bg-re-vs-ng2.jpg" alt=""></p>
<p>至于移动端，现在叫无线前端，或者说是具有中国特色的<code>H5</code>工程师，看个人兴趣吧，掌握最新的HTML标准，目前而言能用CSS3做出炫酷的动画基本上也能胜任。数学好，会<code>canvas</code>,还可以利用一些插件或动画库做一些小游戏（出现了很火很专业很强大的H5游戏引擎），也是加分项，撩妹杀手锏呀，就冲这点值了（表白，生日，纪念啥的，开始YY）。</p>
<p>前端体系看似多而杂，好用的工具一箩筐，新技术层出不穷，开源库和框架挑花眼，今天又出了个没听过的词汇，好项目遍地走…. 个人而言握住基本功是关键，这是上手新东西的有力保障，千变万变离不开一些本质的东西。</p>
<h3 id="诗和远方"><a href="#诗和远方" class="headerlink" title="# 诗和远方"></a># 诗和远方</h3><p>前端就像个大坑，而且越挖越大，很多不明不白的往里面跳，挖了一会不见有水，便四处拓宽挖掘面积，以为别处有水。如此一来坑只会变成洼地，不会有井。前端大部分是没有科班出身，高校目前也没有设置前端专业，前端行业的从业人员大部分是所谓野路子出身，一切手法都是自己摸索出来的。我个人也不是纯计算机专业出身，学的电子，应该还算计算机相关专业，粗略学过一些C/C++,数据结构，操作系统，计算机网络等，然而随着你想深入挖掘这个行业，这些东西会逐渐显现出他们的支撑作用，解决问题的思维，技术背后的原理。我想如果想挖到水，想持续深耕这个领域，或者应对未知的变化，这些东西势必是要深入补一补，毕竟努力的人总不会得不到眷顾，这也是很多小伙伴们的顾虑。</p>
<p><img src="http://7xrvo9.com1.z0.glb.clouddn.com/20160716/wallhaven-216757.jpg" alt=""></p>
<p>对于前端，我还是个初入行业的新人，要向小伙伴们学习的太多太多，我渴望开放的交流，付出我的努力，推动行业发展，至今仍YY一行js代码改变世界，貌似最近看到了知乎上有相关话题了。</p>
<p>对于当时的决定，我还是暗暗感激自己的，起码换坑以来一直是在做喜欢做的事情，并且有底气去遐想诗和远方。昨晚和老爸打电话，聊到后面，问：“你一个人在杭州会不会感到孤独？”，我：“……（难得酸涩，沉默了）”。沉默并不是真的孤独，而是这么久了，似乎没想过他们是不是会孤独，诗和远方该有他们。</p>
<p>深夜码完这些想说很久的话，依旧鸡血加持，恍惚一切才开始…</p>
<hr>
]]></content>
      
        <categories>
            
            <category> 随想 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 杂谈 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[浅析几种设计模式]]></title>
      <url>http://licao404.com/2016/06/24/%E6%B5%85%E6%9E%90%E5%87%A0%E7%A7%8D%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/</url>
      <content type="html"><![CDATA[<p><img src="http://7xrvo9.com1.z0.glb.clouddn.com/20160624/code211360.jpg" alt=""></p>
<blockquote class="blockquote-center">设计模式是前辈总结下来的一套经验和心血，学习设计模式，让我们代码的更加具备可重用性、可靠性，是工程化编程必不可缺的基石。不过遗憾的是，限于本人目前水平，这篇博文谈的不是涵盖所有23种传统设计模式，而是想说明平时在编写JavaScript中经常会用到的几种设计模式，有 <strong>单例模式</strong>、<strong>工厂模式</strong>、<strong>构造函数模式</strong>、<strong>混合模式</strong>、<strong>模块模式</strong>、<strong>发布订阅模式</strong>，以及具体编写JavaScript代码的一些小实践，使用设计模式编程是一种好习惯，了解其形成的原理更是我们关注的重点，好了，让我们开始吧！</blockquote>

<a id="more"></a>
<h3 id="单例模式"><a href="#单例模式" class="headerlink" title="单例模式"></a>单例模式</h3><p>从需求出发，什么情况下我们会用到单例模式呢？遇到过这样的场景：点击登录按钮时，页面弹出登录浮窗、或者点击操作按钮后，弹出确认弹窗，这里的登录窗和确认窗都是唯一的，无论点击多少次，这些弹窗只会被创建一次，这时候比较适合用单例模式来创建。</p>
<p>传统的单例模式是用一个定义一个变量来标志是否已经创建过某个类的实例，判断之后，如果创建过则直接返回之前创建的实例。仔细看下面的demo，当监听到按钮点击事件后，创建 <code>createDialog</code> 的唯一实例，并让此实例的 <code>css</code> 属性发生改变：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> createDialog = (<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">     <span class="keyword">var</span> div;</div><div class="line">     <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">        <span class="keyword">if</span> (!div) &#123;</div><div class="line">             div = <span class="built_in">document</span>.createElement(<span class="string">'div'</span>);</div><div class="line">             div.innerHTML = <span class="string">"&lt;h1&gt;I'm GardonLee&lt;/h1&gt;"</span>;</div><div class="line">             div.style.display = <span class="string">'none'</span>;</div><div class="line">             <span class="built_in">document</span>.body.appendChild(div);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> div;</div><div class="line">     &#125;</div><div class="line">&#125;)();</div><div class="line"></div><div class="line"><span class="built_in">document</span>.getElementById(<span class="string">'loginBtn'</span>).onclick = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">     <span class="keyword">var</span> loginDialog = createDialog();  </div><div class="line">     loginDialog.style.display = <span class="string">'block'</span>;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<h3 id="工厂（方法）模式"><a href="#工厂（方法）模式" class="headerlink" title="工厂（方法）模式"></a>工厂（方法）模式</h3><p>工厂模式抽象了创建具体对象的过程，定义一个用于<strong>创建对象的接口</strong>，让子类决定实例化哪个类。由于在JavaScript中没有类的概念，我们使用一种函数（工厂方法）来封装以<strong>特定接口</strong>创建对象的细节，让这个方法来决定需要创建哪个类的实例，</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">createCompany</span>(<span class="params">position,obj</span>)</span>&#123;</div><div class="line">    <span class="keyword">var</span> F2E = <span class="function"><span class="keyword">function</span> (<span class="params">name,age,sex</span>) </span>&#123;</div><div class="line">        <span class="keyword">this</span>.name = name;</div><div class="line">        <span class="keyword">this</span>.age = age;</div><div class="line">        <span class="keyword">this</span>.sex = sex;</div><div class="line">        <span class="keyword">this</span>.saySkills = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">            <span class="built_in">console</span>.log(<span class="string">"HTML(5)、CSS(3)、JavaScript、Tools、Frameworks......"</span>);</div><div class="line">        &#125;;</div><div class="line">    &#125;;</div><div class="line">    <span class="keyword">var</span> UI = <span class="function"><span class="keyword">function</span> (<span class="params">name,age,sex</span>) </span>&#123;</div><div class="line">        <span class="keyword">this</span>.name = name;</div><div class="line">        <span class="keyword">this</span>.age = age;</div><div class="line">        <span class="keyword">this</span>.sex = sex;</div><div class="line">        <span class="keyword">this</span>.saySkills = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">            <span class="built_in">console</span>.log(<span class="string">"美术基础、平面设计、交互设计、动效设计、前端相关......"</span>);</div><div class="line">        &#125;;</div><div class="line">    &#125;;</div><div class="line"></div><div class="line">    <span class="keyword">if</span>(position === <span class="string">'F2E'</span>)&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">new</span> F2E(obj.name,obj.age,obj.sex);</div><div class="line">    &#125;<span class="keyword">else</span> <span class="keyword">if</span> (position === <span class="string">'UI'</span>) &#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">new</span> UI(obj.name,obj.age,obj.sex);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"><span class="keyword">var</span> staff01 = <span class="keyword">new</span> createCompany(<span class="string">'F2E'</span>,&#123;</div><div class="line">    <span class="attr">name</span>: <span class="string">'licao'</span>,</div><div class="line">    <span class="attr">age</span>: <span class="number">20</span>,</div><div class="line">    <span class="attr">sex</span>: <span class="string">'male'</span></div><div class="line">&#125;);</div><div class="line"></div><div class="line"><span class="keyword">var</span> staff02 = <span class="keyword">new</span> createCompany(<span class="string">'UI'</span>,&#123;</div><div class="line">    <span class="attr">name</span>: <span class="string">'lucy'</span>,</div><div class="line">    <span class="attr">age</span>: <span class="number">22</span>,</div><div class="line">    <span class="attr">sex</span>: <span class="string">'female'</span></div><div class="line">&#125;);</div><div class="line"></div><div class="line">staff01.saySkills();</div><div class="line">staff02.saySkills();</div><div class="line"></div><div class="line"><span class="built_in">console</span>.log(staff01);</div><div class="line"><span class="built_in">console</span>.log(staff02);</div></pre></td></tr></table></figure>
<h3 id="构造函数模式"><a href="#构造函数模式" class="headerlink" title="构造函数模式"></a>构造函数模式</h3><p>构造函数也是函数，只是相比较普通函数，函数名一般习惯以大写字母开头，他可以创建对象实例，因为 <code>JavaScript</code> 中函数说到底也是对象。按照《JavaScript高级程序设计》的说法，通过操作符 <code>new</code> 创建对象实例实际上经过四个步骤：</p>
<ol>
<li>创建一个新对象；</li>
<li>将构造函数的作用域赋给新创建的对象（this指向这个新的对象）；</li>
<li>执行构造函数中的代码（即为这个新的对象添加属性，当然也包括方法，然而我们一般不建议这么干，因为每每去创建一个新的实例，都要重新创建构造函数中的方法，所以构造函数并不单独使用，一般是和原型模式混合使用）；</li>
<li>返回新对象；</li>
</ol>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">CreateCoder</span>(<span class="params">name,age,sex,position</span>)</span>&#123;</div><div class="line">    <span class="keyword">this</span>.name = name;</div><div class="line">    <span class="keyword">this</span>.age = age;</div><div class="line">    <span class="keyword">this</span>.sex = sex;</div><div class="line">    <span class="keyword">this</span>.position = position;</div><div class="line">    <span class="keyword">this</span>.sayPosition = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">         <span class="built_in">console</span>.log(<span class="keyword">this</span>.position);</div><div class="line">    &#125;;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">var</span> FE = <span class="keyword">new</span> CreateCoder(<span class="string">"licao"</span>,<span class="number">20</span>,<span class="string">"male"</span>,<span class="string">"font-end engineer"</span>);</div><div class="line"><span class="keyword">var</span> UX = <span class="keyword">new</span> CreateCoder(<span class="string">"xiaomin"</span>,<span class="number">22</span>,<span class="string">"female"</span>,<span class="string">"UX"</span>);</div></pre></td></tr></table></figure>
<p>上面的代码中我将公共方法 <code>sayPosition</code> 写在构造函数中，导致每 <code>new</code> 一个实例都会创建一次函数，注意每个函数都不是同一个内建对象 <code>Function</code> 的实例,本质上每个 <code>CreateCoder</code> 的实例都包含一个不同的 <code>Function</code> 的实例:</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">console</span>.log(FE.sayPosition == UX.sayPosition);<span class="comment">//false</span></div></pre></td></tr></table></figure>
<p>下面我们将公用方法写在构造函数的原型对象上:</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">CreateCoder</span>(<span class="params">name,age,sex,position</span>)</span>&#123;</div><div class="line">    <span class="keyword">this</span>.name = name;</div><div class="line">    <span class="keyword">this</span>.age = age;</div><div class="line">    <span class="keyword">this</span>.sex = sex;</div><div class="line">    <span class="keyword">this</span>.position = position;</div><div class="line">&#125;</div><div class="line"></div><div class="line">CreateCoder.prototype.sayPosition = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.position);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">var</span> FE = <span class="keyword">new</span> CreateCoder(<span class="string">"licao"</span>,<span class="number">20</span>,<span class="string">"male"</span>,<span class="string">"font-end engineer"</span>);</div><div class="line"><span class="keyword">var</span> UX = <span class="keyword">new</span> CreateCoder(<span class="string">"xiaomin"</span>,<span class="number">22</span>,<span class="string">"female"</span>,<span class="string">"UX"</span>);</div><div class="line"><span class="built_in">console</span>.log(FE.sayPosition == UX.sayPosition);<span class="comment">//true</span></div></pre></td></tr></table></figure>
<h3 id="混合模式"><a href="#混合模式" class="headerlink" title="混合模式"></a>混合模式</h3><p>混合模式所要解决的问题主要是对象（构造函数）的继承。如何在原有对象的基础上，拓展出一个新对象，新对象继承需要原有对象的属性和方法。而前面的构造函数模式与原型模式结合的模式又表明，我们需要分别继承原有对象的自有属性及其原型对象上的方法，这样就出现了 <code>JavaScript</code> 所谓的混合模式,下面代码的每一步都对应这样的思想：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//混合模式 前提是理解：构造函数模式与原型模式结合、原型链、原型式继承、以及 call 函数、ES5中Object.create()函数的概念</span></div><div class="line"><span class="keyword">var</span> Person = <span class="function"><span class="keyword">function</span>(<span class="params">name,age,sex</span>)</span>&#123;</div><div class="line">    <span class="keyword">this</span>.name = name;</div><div class="line">    <span class="keyword">this</span>.age = age;</div><div class="line">    <span class="keyword">this</span>.sex = sex;</div><div class="line">&#125;;</div><div class="line"></div><div class="line">Person.prototype.sayName = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.name);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">var</span> Coder = <span class="function"><span class="keyword">function</span>(<span class="params">name,age,sex,position</span>)</span>&#123;</div><div class="line">    Person.call(<span class="keyword">this</span>,name,age,sex,position);</div><div class="line">    <span class="keyword">this</span>.position = position;</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="comment">//-------可用ES5的 Object.create() 替代下面的写法----------</span></div><div class="line"><span class="comment">// 兼容性：IE9+、Firefix4+、Safari5+、Opera12+ 和 Chrome</span></div><div class="line"><span class="comment">// Coder.prototype = Object.create(Person.prototype);</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">create</span>(<span class="params">o</span>)</span>&#123;</div><div class="line">    <span class="function"><span class="keyword">function</span> <span class="title">F</span>(<span class="params"></span>)</span>&#123;&#125;</div><div class="line">    F.prototype = o;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">new</span> F();</div><div class="line">&#125;;</div><div class="line"></div><div class="line">Coder.prototype = create(Person.prototype);</div><div class="line"><span class="comment">//-------------------------------------------------------</span></div><div class="line"></div><div class="line"><span class="comment">//重写从原对象继承过来方法，（根据实际需求）</span></div><div class="line">Coder.prototype.sayName = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">     <span class="built_in">console</span>.log(<span class="keyword">this</span>.age);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//在继承了原有对象的基础上 拓展方法，（根据实际需求）</span></div><div class="line">Coder.prototype.sayPosition = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">     <span class="built_in">console</span>.log(<span class="keyword">this</span>.position);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">var</span> FE = <span class="keyword">new</span> Coder(<span class="string">"licao"</span>,<span class="number">20</span>,<span class="string">"male"</span>,<span class="string">"font-end engineer"</span>);</div><div class="line"><span class="comment">//result</span></div><div class="line"><span class="built_in">console</span>.log(FE);</div><div class="line">FE.sayPosition();<span class="comment">//font-end engineer</span></div><div class="line">FE.sayName();<span class="comment">//licao</span></div></pre></td></tr></table></figure>
<p>深入理解混合模式的前提是理解：构造函数模式与原型模式结合、原型链、原型式继承、以及 <code>call/apply</code> 函数、<code>ES5</code> 中 <code>Object.create()</code> 函数的概念，这些前面的文章已有了初步介绍，目前够用了。</p>
<h3 id="模块模式"><a href="#模块模式" class="headerlink" title="模块模式"></a>模块模式</h3><p>封装模块的方式，JavaScript中没有私有变量的概念，很难有封装的概念，所以如果想封装一段代码，必须用到模块模式（匿名闭包）写代码，貌似似曾相识，对哦，在前面几篇写前端模块化之旅的文章写过这个概念;</p>
<p>关于闭包，我们不建议使用，而这种模块化的写法是我们进行代码封装的惯用写法：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> Person = (<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="keyword">var</span> _name,</div><div class="line">        _age,</div><div class="line">        _sex,</div><div class="line">        _position;</div><div class="line"></div><div class="line">    <span class="keyword">return</span> &#123;</div><div class="line">        <span class="attr">init</span>: <span class="function"><span class="keyword">function</span> (<span class="params">obj</span>) </span>&#123;</div><div class="line">             _name = obj.name;</div><div class="line">             _age = obj.age;</div><div class="line">             _sex = obj.sex;</div><div class="line">             _position = obj.position;</div><div class="line">        &#125;,</div><div class="line">        <span class="attr">changePosition</span>: <span class="function"><span class="keyword">function</span> (<span class="params">newPosition</span>) </span>&#123;</div><div class="line">             _position = newPosition;</div><div class="line">        &#125;,</div><div class="line">        <span class="attr">sayPosition</span>: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">             <span class="built_in">console</span>.log(_position);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;)();</div><div class="line"></div><div class="line">Person.sayPosition();<span class="comment">//undefined</span></div><div class="line">Person.init(&#123;<span class="attr">name</span>:<span class="string">"licao"</span>,<span class="attr">age</span>:<span class="number">20</span>,<span class="attr">sex</span>:<span class="string">"male"</span>,<span class="attr">position</span>:<span class="string">"PM"</span>&#125;);</div><div class="line">Person.sayPosition();<span class="comment">//PM</span></div><div class="line">Person.changePosition(<span class="string">"font-end engineer"</span>);</div><div class="line">Person.sayPosition();<span class="comment">//font-end engineer</span></div></pre></td></tr></table></figure>
<h3 id="发布订阅模式"><a href="#发布订阅模式" class="headerlink" title="发布订阅模式"></a>发布订阅模式</h3><p>定义了对象之间一种一对多的依赖关系，当一个对象的状态改变时，所有依赖于它的对象都将得到通知。可以用于异步编程，用于对象间的通知机制：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//创建事件中心</span></div><div class="line"><span class="keyword">var</span> EventManager = (<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">     <span class="keyword">var</span> events = &#123;&#125;;</div><div class="line">     <span class="comment">//监听事件</span></div><div class="line">     <span class="function"><span class="keyword">function</span> <span class="title">on</span>(<span class="params">evt,handler</span>) </span>&#123;</div><div class="line">         events[evt] = events[evt] || [];</div><div class="line">         events[evt].push(&#123;</div><div class="line">            <span class="attr">handler</span>: handler</div><div class="line">         &#125;)</div><div class="line">     &#125;</div><div class="line">     <span class="comment">//绑定事件</span></div><div class="line">     <span class="function"><span class="keyword">function</span> <span class="title">fire</span>(<span class="params">evt,args</span>) </span>&#123;</div><div class="line">        <span class="comment">//查询事件列表</span></div><div class="line">         <span class="keyword">if</span> (!events[evt]) &#123;</div><div class="line">            <span class="keyword">return</span>;</div><div class="line">         &#125;</div><div class="line"></div><div class="line">         <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; events[evt].length; i++)&#123;</div><div class="line">            events[evt][i].handler(args);</div><div class="line">         &#125;</div><div class="line">     &#125;</div><div class="line"></div><div class="line">     <span class="comment">//解绑事件（如果该事件存在）</span></div><div class="line">     <span class="function"><span class="keyword">function</span> <span class="title">off</span>(<span class="params">evt</span>)</span>&#123;</div><div class="line">         <span class="keyword">if</span> (!events[evt]) &#123;</div><div class="line">            <span class="keyword">return</span>;</div><div class="line">         &#125; <span class="keyword">else</span> &#123;</div><div class="line">            <span class="keyword">delete</span> events[evt];</div><div class="line">         &#125;</div><div class="line">     &#125;		</div><div class="line"></div><div class="line">     <span class="keyword">return</span> &#123;</div><div class="line">        <span class="attr">on</span>: on,</div><div class="line">        <span class="attr">off</span>: off,</div><div class="line">        <span class="attr">fire</span>: fire</div><div class="line">     &#125;</div><div class="line">&#125;)()</div><div class="line"><span class="comment">//监听事件</span></div><div class="line">EventManager.on(<span class="string">'text:change'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">val</span>)</span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">'text:change...  now val is '</span> + val);  </div><div class="line">&#125;);</div><div class="line"><span class="comment">// 绑定事件</span></div><div class="line">EventManager.fire(<span class="string">'text:change'</span>, <span class="string">'FE'</span>);</div><div class="line"><span class="comment">//解绑事件</span></div><div class="line">EventManager.off(<span class="string">'text:changer'</span>);</div></pre></td></tr></table></figure>
<hr>
]]></content>
      
        <categories>
            
            <category> 编程学习 </category>
            
            <category> 前端进阶 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> JavaScript </tag>
            
            <tag> 设计模式 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[JavaScript的几个选择题]]></title>
      <url>http://licao404.com/2016/05/28/JavaScript%E7%9A%84%E5%87%A0%E4%B8%AA%E9%80%89%E6%8B%A9%E9%A2%98/</url>
      <content type="html"><![CDATA[<blockquote class="blockquote-center">Not a lot really. Quiz mainly focuses on knowledge of scoping, function expressions (and how they differ from function declarations), references, process of variable and function declaration, order of evaluation, and a couple more things like <code>delete</code> operator and object instantiation. These are all relatively simple concepts, which I think every professional Javascript developer should know. Most of these are applied in practice quite often. Ideally, even if you can’t answer a question, you should be able to infer answer from specs (without executing the snippet). When creating these questions, I made sure I can answer each one of them off the top of my head, to keep things relatively simple.<br>Note, however, that not all questions are very practical, so don’t worry if you can’t answer some of them. We don’t often use <code>with</code> statement, for example, so failing to know/remember its exact behavior is understandable.<br></blockquote>

<a id="more"></a>
<h2 id="Few-notes-about-code"><a href="#Few-notes-about-code" class="headerlink" title="Few notes about code"></a>Few notes about code</h2><ul>
<li>Assuming ECMAScript 3rd edition (not 5th)</li>
<li>Implementation quirks do not count (assuming standard behavior only)</li>
<li>Every snippet is run as a global code (not as eval or function one)</li>
<li>There are no other variables declared (and host environment is not extended with anything beyond what’s defined in specs)</li>
<li>Answer should correspond to exact return value of entire expression/statement (or last line)</li>
<li>“Error” in answer indicates that overall snippet results in a runtime error</li>
</ul>
<h2 id="Now-Begin"><a href="#Now-Begin" class="headerlink" title="Now Begin"></a>Now Begin</h2><h3 id="1"><a href="#1" class="headerlink" title="1"></a>1</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">  <span class="keyword">return</span> <span class="keyword">typeof</span> <span class="built_in">arguments</span>;</div><div class="line">&#125;)();</div></pre></td></tr></table></figure>
<ul>
<li>“object”</li>
<li>“array”</li>
<li>“arguments”</li>
<li>“undefined”</li>
</ul>
<h3 id="2"><a href="#2" class="headerlink" title="2"></a>2</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> f = <span class="function"><span class="keyword">function</span> <span class="title">g</span>(<span class="params"></span>)</span>&#123; <span class="keyword">return</span> <span class="number">23</span>; &#125;;</div><div class="line"><span class="keyword">typeof</span> g();</div></pre></td></tr></table></figure>
<ul>
<li>“number”</li>
<li>“undefined”</li>
<li>“function”</li>
<li>Error</li>
</ul>
<h3 id="3"><a href="#3" class="headerlink" title="3"></a>3</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">(<span class="function"><span class="keyword">function</span>(<span class="params">x</span>)</span>&#123;</div><div class="line">  <span class="keyword">delete</span> x;</div><div class="line">  <span class="keyword">return</span> x;</div><div class="line">&#125;)(<span class="number">1</span>);</div></pre></td></tr></table></figure>
<ul>
<li>1</li>
<li>null</li>
<li>undefined</li>
<li>Error</li>
</ul>
<h3 id="4"><a href="#4" class="headerlink" title="4"></a>4</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> y = <span class="number">1</span>, x = y = <span class="keyword">typeof</span> x;</div><div class="line">x;</div></pre></td></tr></table></figure>
<ul>
<li>1</li>
<li>“number”</li>
<li>undefined</li>
<li>“undefined”</li>
</ul>
<h3 id="5"><a href="#5" class="headerlink" title="5"></a>5</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">(<span class="function"><span class="keyword">function</span> <span class="title">f</span>(<span class="params">f</span>)</span>&#123;</div><div class="line">  <span class="keyword">return</span> <span class="keyword">typeof</span> f();</div><div class="line">&#125;)(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123; <span class="keyword">return</span> <span class="number">1</span>; &#125;);</div></pre></td></tr></table></figure>
<ul>
<li>“number”</li>
<li>“undefined”</li>
<li>“function”</li>
<li>Error</li>
</ul>
<h3 id="6"><a href="#6" class="headerlink" title="6"></a>6</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> foo = &#123;</div><div class="line">  <span class="attr">bar</span>: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123; <span class="keyword">return</span> <span class="keyword">this</span>.baz; &#125;,</div><div class="line">  <span class="attr">baz</span>: <span class="number">1</span></div><div class="line">&#125;;</div><div class="line">(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">  <span class="keyword">return</span> <span class="keyword">typeof</span> <span class="built_in">arguments</span>[<span class="number">0</span>]();</div><div class="line">&#125;)(foo.bar);</div></pre></td></tr></table></figure>
<ul>
<li>“undefined”</li>
<li>“object”</li>
<li>“number”</li>
<li>“function”</li>
</ul>
<h3 id="7"><a href="#7" class="headerlink" title="7"></a>7</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> foo = &#123;</div><div class="line">  <span class="attr">bar</span>: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123; <span class="keyword">return</span> <span class="keyword">this</span>.baz; &#125;,</div><div class="line">  <span class="attr">baz</span>: <span class="number">1</span></div><div class="line">&#125;</div><div class="line"><span class="keyword">typeof</span> (f = foo.bar)();</div></pre></td></tr></table></figure>
<ul>
<li>“undefined”</li>
<li>“object”</li>
<li>“number”</li>
<li>“function”</li>
</ul>
<h3 id="8"><a href="#8" class="headerlink" title="8"></a>8</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> f = (<span class="function"><span class="keyword">function</span> <span class="title">f</span>(<span class="params"></span>)</span>&#123; <span class="keyword">return</span> <span class="string">"1"</span>; &#125;, <span class="function"><span class="keyword">function</span> <span class="title">g</span>(<span class="params"></span>)</span>&#123; <span class="keyword">return</span> <span class="number">2</span>; &#125;)();</div><div class="line"><span class="keyword">typeof</span> f;</div></pre></td></tr></table></figure>
<ul>
<li>“string”</li>
<li>“number”</li>
<li>“function”</li>
<li>“undefined”</li>
</ul>
<h3 id="9"><a href="#9" class="headerlink" title="9"></a>9</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> x = <span class="number">1</span>;</div><div class="line"><span class="keyword">if</span> (<span class="function"><span class="keyword">function</span> <span class="title">f</span>(<span class="params"></span>)</span>&#123;&#125;) &#123;</div><div class="line">  x += <span class="keyword">typeof</span> f;</div><div class="line">&#125;</div><div class="line">x;</div></pre></td></tr></table></figure>
<ul>
<li>1</li>
<li>“1function”</li>
<li>“1undefined”</li>
<li>NaN</li>
</ul>
<h3 id="10"><a href="#10" class="headerlink" title="10"></a>10</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> x = [<span class="keyword">typeof</span> x, <span class="keyword">typeof</span> y][<span class="number">1</span>];</div><div class="line"><span class="keyword">typeof</span> <span class="keyword">typeof</span> x;</div></pre></td></tr></table></figure>
<ul>
<li>“number”</li>
<li>“string”</li>
<li>“undefined”</li>
<li>“object”</li>
</ul>
<h3 id="11"><a href="#11" class="headerlink" title="11"></a>11</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">(<span class="function"><span class="keyword">function</span>(<span class="params">foo</span>)</span>&#123;</div><div class="line">  <span class="keyword">return</span> <span class="keyword">typeof</span> foo.bar;</div><div class="line">&#125;)(&#123; <span class="attr">foo</span>: &#123; <span class="attr">bar</span>: <span class="number">1</span> &#125; &#125;);</div></pre></td></tr></table></figure>
<ul>
<li>“undefined”</li>
<li>“object”</li>
<li>“number”</li>
<li>Error</li>
</ul>
<h3 id="12"><a href="#12" class="headerlink" title="12"></a>12</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">(<span class="function"><span class="keyword">function</span> <span class="title">f</span>(<span class="params"></span>)</span>&#123;</div><div class="line">  <span class="function"><span class="keyword">function</span> <span class="title">f</span>(<span class="params"></span>)</span>&#123; <span class="keyword">return</span> <span class="number">1</span>; &#125;</div><div class="line">  <span class="keyword">return</span> f();</div><div class="line">  <span class="function"><span class="keyword">function</span> <span class="title">f</span>(<span class="params"></span>)</span>&#123; <span class="keyword">return</span> <span class="number">2</span>; &#125;</div><div class="line">&#125;)();</div></pre></td></tr></table></figure>
<ul>
<li>1</li>
<li>2</li>
<li>Error (e.g. “Too much recursion”)</li>
<li>undefined</li>
</ul>
<h3 id="13"><a href="#13" class="headerlink" title="13"></a>13</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">f</span>(<span class="params"></span>)</span>&#123; <span class="keyword">return</span> f; &#125;</div><div class="line"><span class="keyword">new</span> f() <span class="keyword">instanceof</span> f;</div></pre></td></tr></table></figure>
<ul>
<li>true</li>
<li>false</li>
</ul>
<h3 id="14"><a href="#14" class="headerlink" title="14"></a>14</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">with</span> (<span class="function"><span class="keyword">function</span>(<span class="params">x, undefined</span>)</span>&#123;&#125;) length;</div></pre></td></tr></table></figure>
<ul>
<li>1</li>
<li>2</li>
<li>undefined</li>
<li>Error</li>
</ul>
<hr>
]]></content>
      
        <categories>
            
            <category> 前端基础 </category>
            
            <category> 编程学习 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> JavaScript </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Why I Ditched Angular for React]]></title>
      <url>http://licao404.com/2016/05/27/Why-I-Ditched-Angular-for-React/</url>
      <content type="html"><![CDATA[<span itemprop="image" itemscope="" itemtype="http://schema.org/ImageObject"><img itemprop="url image" src="http://7xrvo9.com1.z0.glb.clouddn.com/20160527/post-bg-re-vs-ng2.jpg" class="full-image"><meta itemprop="width" content="auto"><meta itemprop="height" content="auto"></span>
<blockquote class="blockquote-center">A few years ago, when my code started to get cluttered with jQuery selectors and callbacks, AngularJS came to my rescue.<br><br>Angular helped me with the maintainability of my dev projects. It came with a lot of functionality out-of-the-box. It was tooled for building large-scale web apps, greatly facilitating rapid development in this genre of applications.</blockquote>

<a id="more"></a>
<p>I remember how its two-way binding and the philosophy of Model as the single source of truth blew me away. And, in practice, they reduced data-redundancy throughout my applications.</p>
<p>Over time though, I discovered some pain points in Angular. Eventually they caused me enough frustration that I began looking around for alternatives.</p>
<p>Here are the concerns I have with Angular.</p>
<p><strong>DOM for execution.</strong> Angular heavily relies on the DOM for its execution flow. In the default bootstrapping of Angular apps, it scans the DOM and compiles it with priorities of directives, which makes it difficult to debug and test the execution order.</p>
<p><strong>Two-way binding is a double-edged sword.</strong> As the complexity of your components grows, this approach can lead to performance issues.</p>
<p>How does two-way binding affect performance? JavaScript (ES5) doesn’t have any implementation to notify for any change to its variables or objects, so Angular uses something called “dirty checking” to track data changes and sync them with the user interface (UI).</p>
<p>Dirty-checking is carried out after any operation is performed within Angular’s scope ($digest cycle) which leads to slower performance as the amount of bindings increases.</p>
<p>Another problem with two-way binding is that many components on the page are capable of changing data, which means there are multiple sources of data inputs. If not managed well, this can lead to a confusing and overwhelming situation. To be fair, this is an implementation issue, not an Angular issue in and of itself.</p>
<p><strong>Angular has its own world.</strong> Every operation in Angular must go through its digest cycle, or else your components won’t sync with your data models. This leads to compatibility issues with other dependencies.</p>
<p>If you use any third-party JavaScript library that involves data changes, you need to wrap it with Angular’s $apply function. Or you will need to convert it to a service, if it’s a utility library. This is like having to reinvent every JavaScript library you use in order for it to interoperate with Angular.</p>
<p><strong>Dependency injection.</strong> JavaScript currently doesn’t have a package manager and dependency resolver of its own. AMD, UMD and CommonJS have been solving this gap well. But, <a href="https://github.com/angular/angular.js/issues/4919" target="_blank" rel="external">until recently</a>, Angular did not play well with any of these. Rather, it introduces a dependency injection (DI) of its own. Though, to be fair, there are unofficial Angular dependency-injection implementations using RequireJS.</p>
<p><strong>Steep learning curve.</strong> Using Angular requires learning a ton of concepts including, but not limited to:</p>
<ul>
<li>modules</li>
<li>controllers</li>
<li>directives</li>
<li>scopes</li>
<li>templating</li>
<li>linking functions</li>
<li>filters</li>
<li>dependency injection</li>
</ul>
<p>It can be very difficult to get started with Angular. It’s not for the faint of heart.</p>
<p>All of this led me to React.</p>
<p><strong>What’s So Great About React?</strong></p>
<p><a href="http://facebook.github.io/react/" target="_blank" rel="external">React</a>, the new open source framework for building user interfaces, is a different way of developing JavaScript apps. React is led by Facebook and Instagram.</p>
<p>To be clear: React <strong>isn’t</strong> an application development framework like AngularJS. It’s not fair to compare the two in an apples-to-apples manner.</p>
<p>When React was <a href="http://2013.jsconf.eu/speakers/pete-hunt-react-rethinking-best-practices.html" target="_blank" rel="external">introduced</a> at JSConf EU in May 2013, the audience was shocked by some of its concepts, like “one-way data flow” and “Virtual DOM”.</p>
<p>React is for building user interfaces. In other words, straight from the official landing page of the project: “people use React as the <strong>V in MVC.</strong>“ However, you can write self-contained components with it, which more or less compares to Angular directives.</p>
<p>React rethinks our current web development concepts and best practices.</p>
<p>For instance, it encourages <strong>one-way data flow</strong> and believes in a philosophy that components are state machines driven by data.</p>
<p>Whereas most of the other similar frameworks love working with the DOM and directly manipulating it, React hates the DOM and works to shield the developer from it.</p>
<p>React provides the bare-minimum API needed to define a UI component. Nothing more, nothing less. It follows UNIX philosophy: Small is beautiful. Do one thing, and do it best.</p>
<p>You can find a more detailed <a href="http://www.quora.com/Pete-Hunt/Posts/Facebooks-React-vs-AngularJS-A-Closer-Look" target="_blank" rel="external">comparison of Angular vs. React</a> by Pete Hunt (who works at Facebook/Instagram).</p>
<p><strong>Why Did I Switch to React?</strong></p>
<p>Here are some of the things I like about React.</p>
<p><strong>React is Fast</strong></p>
<p>React takes a different approach to the DOM compared to other frameworks.</p>
<p>It does not let you work with the DOM directly.</p>
<p>It introduces a layer, called <strong>Virtual DOM</strong>, between your JavaScript logic and the actual DOM.</p>
<p><img src="http://7xrvo9.com1.z0.glb.clouddn.com/20160527/0485-01-react-virtual-dom.png" alt=""></p>
<p>This concept improves web performance. On successive renders, React performs a differential (diff) on the Virtual DOM, and then updates only parts of the actual DOM that need to be updated.</p>
<p><strong>Cross-Browser Compatibility</strong></p>
<p>Virtual DOM also helps solve cross-browser issues because it provides us with a standardized API that even works as far back as IE 8.</p>
<p><strong>Modularity</strong></p>
<p>Writing self-contained UI components modularizes your app, which in turn isolates issues only to the problematic component/s.</p>
<p>Every component can be developed and tested in isolation, and they can use other components. This equates to maintainability improvements.</p>
<p><strong>One-way Data Flow Makes Things Saner</strong></p>
<p><a href="http://facebook.github.io/flux/docs/overview.html" target="_blank" rel="external">Flux</a> is an architecture for creating one-way data layers in JavaScript applications. It was conceptualized by Facebook along with the React view library. The Flux concept makes large-scale app development simpler.</p>
<p>Flux is a concept rather than a tool-specific implementation. It can be incorporated into other frameworks. For instance, Alex Rattray has a nice <a href="http://www.toptal.com/front-end/simple-data-flow-in-react-applications-using-flux-and-backbone" target="_blank" rel="external">implementation of Flux</a> using Backbone Collection and Model in React.</p>
<p><strong>Just JavaScript</strong></p>
<p>Modern web apps work in a different way compared to the traditional Web.</p>
<p>For example, the View layer needs to be updated with user interactions without hitting the server. And hence View and Controller need to rely on each other heavily.</p>
<p>Many other frameworks use templating engines like Handlebars or Mustache to deal with the View layer. But React believes that View and Controller are so interdependent that they must reside at a single place without the use of any third-party templating engine, and, on top of that, without leaving the scope of JavaScript.</p>
<p><strong>Isomorphic JavaScript</strong></p>
<p>The biggest drawback of single-page JS web apps is that it has limitations when crawled by search engines. React has a solution for this.</p>
<p>React can pre-render apps on the server before sending it to the user agent. It can restore the same state into the live application from the pre-rendered static content on the server.</p>
<p>Because search engine crawlers rely on the server response rather than JavaScript execution, pre-rendering your apps helps with SEO.</p>
<p><strong>It Plays Well with Others</strong></p>
<p>Loaders and bundlers like RequireJS, Browserify and Webpack are much needed when you’re building large applications. They make the arduous task surmountable.</p>
<p>Unfortunately, the current version of JavaScript doesn’t provide a module bundler or loader. (Though there’s a proposal to address this in the upcoming version, ES6, with System.import).</p>
<p>Fortunately we have some alternatives like RequireJS and Webpack, which are pretty neat. React is built with Browserify, but if you’re looking to inject image assets and compile <a href="http://sixrevisions.com/tutorials/set-up-less-js/" target="_blank" rel="external">Less</a> or <a href="http://sixrevisions.com/javascript/coffeescript-basics/" target="_blank" rel="external">CoffeeScript</a>, then probably Webpack stands as a better option. The point is: You are afforded that choice.</p>
<p><strong>Do I Need Another Development Framework with React?</strong></p>
<p>Using React, you can build user interfaces, but you still need to make AJAX calls, apply data filters, and other things that Angular already does.</p>
<p>So if we need an additional JavaScript app development framework, why ditch Angular?</p>
<p>Frameworks are a set of modules and rules. If I don’t need some of its modules, or want to swap out a module for another one that does the job better, how do I do it?</p>
<p>One of the ways to achieve modularity and better dependency-management is through package managers.</p>
<p>But then, how do we manage packages in Angular? That’s up to you, but know that Angular has its own world. You will most likely need to adapt third-party packages into Angular’s world.</p>
<p>React, on the other hand, is just JavaScript. Any package written in JavaScript won’t need any wrapping in React.</p>
<p>For me, using package managers like npm and Bower is better. We can pick and choose our components and craft custom toolsets. To be clear: This is more complicated compared to just using a comprehensive app development framework like Angular.</p>
<p>On this front, the saving grace is that React encourages the use of npm, which has a lot of ready-to-use packages. To get started building apps with React, you can, for example, use one of these <a href="https://github.com/facebook/react/wiki/Complementary-Tools#full-stack-starter-kits" target="_blank" rel="external">full-stack starter kits</a>.</p>
<p><strong>Switching to React is Not Painless!</strong></p>
<p>Since Angular is an app development framework, it comes with a lot of goodies. I’m giving up great features like an AJAX wrapper in the $http service, $q as a promise service, ng-show, ng-hide, ng-class, and ng-if as controlling statements for template — all that amazing stuff.</p>
<p>React isn’t an app development framework, so you need to think about how to deal with the other aspects of building applications. For example, I’m working on an open source project called <a href="https://github.com/sahusoftcom/react-utils" target="_blank" rel="external">react-utils</a> which can be used with React to ease development.</p>
<p>The community is also actively contributing similar reusable components to fill in the blanks, so to speak. <a href="http://react-components.com/" target="_blank" rel="external">React Components</a> is an unofficial directory website where you can find such open source components.</p>
<p>React’s philosophy does not encourage you to use two-way binding, which brings a lot of pain when you’re dealing with form elements and editable data grids.</p>
<p>However, as you start understanding the Flux data flow and Stores, things become clearer, simpler and easier.</p>
<p>React is new. It will take some time for the community around it to grow. Angular, on the other hand, has already gained huge popularity, and has a relatively large number of extensions available (e.g. AngularUI and Restangular).</p>
<p>However, although React’s community is new, <strong>it is growing fast</strong>. Extensions like React Bootstrap are a testament to this. It’s just a matter of time before we have more components available.</p>
<p><strong>Conclusion</strong></p>
<p>If you love the Angular approach, then you may hate React at first. Mainly because of it’s one-way data flow and lack of app development features. You end up needing to take care of many things by yourself.</p>
<p>But as soon as you get comfortable with the Flux design pattern and React’s philosophy, I guarantee that you will begin to see its beauty.</p>
<p>Facebook and Instagram both use React (because they are leading the project).</p>
<p>GitHub’s new source code editor, Atom, is built using React.</p>
<p>The upcoming Yahoo! Mail is being rebuilt in React.</p>
<p>React already has large-scale apps and big tech companies betting on it.</p>
<blockquote>
<p>Author: Kumar Sanket<br>From: <a href="http://sixrevisions.com/javascript/why-i-ditched-angular-for-react/" target="_blank" rel="external">sixrevisions.com</a></p>
</blockquote>
<hr>
]]></content>
      
        <categories>
            
            <category> 前端进阶 </category>
            
            <category> 外文阅读 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Angular </tag>
            
            <tag> React </tag>
            
            <tag> 框架 </tag>
            
            <tag> 杂谈 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[前端模块化之旅（三）：RequireJS模块化及r.js指南]]></title>
      <url>http://licao404.com/2016/05/19/%E5%89%8D%E7%AB%AF%E6%A8%A1%E5%9D%97%E5%8C%96%E4%B9%8B%E6%97%85%EF%BC%88%E4%B8%89%EF%BC%89%EF%BC%9ARequireJS%E6%A8%A1%E5%9D%97%E5%8C%96%E5%8F%8Ar-js%E6%8C%87%E5%8D%97/</url>
      <content type="html"><![CDATA[<span itemprop="image" itemscope="" itemtype="http://schema.org/ImageObject"><img itemprop="url image" src="http://7xrvo9.com1.z0.glb.clouddn.com/20160519/%E5%89%8D%E7%AB%AF%E6%A8%A1%E5%9D%97%E5%8C%96%E4%B9%8B%E6%97%85%E4%B8%89.jpg" class="full-image"><meta itemprop="width" content="auto"><meta itemprop="height" content="auto"></span>
<a id="more"></a>
<p>在<code>html</code>中指定了 <code>RrequireJS</code> 第一次需要加载的模块，也就是通过 <code>data-main</code> 所指定，因此一般作为主模块：如下例中 <code>src/js/app/</code> 目录下的 <code>index.js</code> 文件</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!-- index.html --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">data-main</span>=<span class="string">"src/js/app/index"</span> <span class="attr">src</span>=<span class="string">"src/js/lib/require.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div></pre></td></tr></table></figure>
<p>在主模块中我们使用 <code>require.config()</code> 方法对模块的加载行为进行一些配置：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">requirejs.config(&#123;</div><div class="line">	<span class="attr">baseUrl</span>: <span class="string">'src/js'</span>,</div><div class="line">	<span class="attr">paths</span>: &#123;</div><div class="line">		<span class="attr">jquery</span>: <span class="string">'lib/jquery'</span>,</div><div class="line">		<span class="attr">backTop</span>: <span class="string">'com/backTop'</span>,</div><div class="line">		<span class="attr">jumpTo</span>: <span class="string">'com/jumpTo'</span>,</div><div class="line">		<span class="attr">carousel</span>: <span class="string">'com/carousel'</span>,</div><div class="line">		<span class="attr">exposure</span>: <span class="string">'com/exposure'</span>,</div><div class="line">		<span class="attr">navfloor</span>: <span class="string">'com/navfloor'</span>,</div><div class="line">		<span class="attr">waterfall</span>: <span class="string">'com/waterfall'</span></div><div class="line">	&#125;</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<ul>
<li>其中 <code>baseUrl</code> 是改变基准路径，所有的模块相对于 <code>baseUrl</code> 来加载；<code>baseUrl</code> 路径以 <code>index.html</code> 所在的目录为基准；</li>
<li>其中 <code>requirejs.config()</code> 函数的 <code>paths</code> 属性指定各个模块的加载路径(相对于 <code>baseUrl</code>)，如果没有指定 <code>baseUrl</code> ，路径默认和主模块在同一目录;</li>
</ul>
<p>采用了 RequireJS 模块化写法解决了命名冲突和依赖管理的问题，同时也增加了文件数量，这也意味着请求的增多，无疑会带来性能问题；<br>这时候可以使用 RequireJS 提供的打包（优化）工具 <code>r.js</code>,它可以实现前端文件的压缩与合并,减少服务器请求，进行性能优化。<br>具体详尽的使用方法可以参考 require.js <a href="http://www.requirejs.cn/docs/optimization.html#requirements" target="_blank" rel="external">官方文档</a>,这里主要介绍下关键步骤，关于 <code>build.js</code> 配置文件的写法,如下是一个 <code>build.js</code> 文件的内容:</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">(&#123;</div><div class="line">    <span class="attr">baseUrl</span>: <span class="string">"./src/js"</span>,</div><div class="line">    <span class="attr">paths</span>: &#123;</div><div class="line">        <span class="string">'jquery'</span>: <span class="string">'lib/bower_components/jquery/dist/jquery.min'</span></div><div class="line">    &#125;,</div><div class="line">    <span class="attr">name</span>: <span class="string">"main"</span>,</div><div class="line">    <span class="attr">out</span>: <span class="string">"dist/js/merge.js"</span></div><div class="line">&#125;)</div></pre></td></tr></table></figure>
<ul>
<li>其中 <code>baseUrl</code> 路径设置应与主模块中 <code>require.config()</code> 方法里的 <code>baseUrl</code> 实际路径一致</li>
<li><code>nam</code> 指定的是解析入口，这里写了主模块，路径相对于前面指定的 <code>baseUrl</code>；</li>
</ul>
<blockquote>
<p>下面是 requireJS 模块化和加了 <code>r.js</code> 打包的小实践：</p>
</blockquote>
<ul>
<li><a href="http://febox.applinzi.com/requireJS/" target="_blank" rel="external">效果预览</a></li>
<li><a href="https://github.com/gardonlee/Some-Demo...-/tree/master/requireJS" target="_blank" rel="external">查看代码</a></li>
</ul>
<hr>
]]></content>
      
        <categories>
            
            <category> 编程学习 </category>
            
            <category> 前端进阶 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> JavaScript </tag>
            
            <tag> 模块化 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[前端模块化之旅（二）：CommonJS、AMD和CMD]]></title>
      <url>http://licao404.com/2016/05/18/%E5%89%8D%E7%AB%AF%E6%A8%A1%E5%9D%97%E5%8C%96%E4%B9%8B%E6%97%85-CommonJS%E3%80%81AMD%E5%92%8CCMD/</url>
      <content type="html"><![CDATA[<span itemprop="image" itemscope="" itemtype="http://schema.org/ImageObject"><img itemprop="url image" src="http://7xrvo9.com1.z0.glb.clouddn.com/20160518/%E5%89%8D%E7%AB%AF%E6%A8%A1%E5%9D%97%E5%8C%96%E4%B9%8B%E6%97%85%E4%BA%8C.jpg" class="full-image"><meta itemprop="width" content="auto"><meta itemprop="height" content="auto"></span>
<blockquote class="blockquote-center">继续前篇，各种模块化规范开始推出，其中比较突出的是服务器端的 CommonJS 规范,它是 Nood.JS 在实践中推出的，也是首先采用 JS 模块化概念的语言，跳出了浏览器；进而出现了浏览器环境的模块化方案 AMD和CMD。</blockquote>

<a id="more"></a>
<blockquote>
<h4 id="CommonJS-Modules-1-0"><a href="#CommonJS-Modules-1-0" class="headerlink" title="CommonJS Modules/1.0"></a>CommonJS Modules/1.0</h4></blockquote>
<p>CommonJS 规范是服务器端的模块化的规范，是 Nood.js 在实践中推出的，Nood.js 也是首先采用 js 模块化的；</p>
<p>它规定一个单独的文件就是一个模块，一个模块中存在一个自由变量 <strong>require</strong>，这是个函数，用于加载模块：</p>
<ul>
<li>这个 <code>require</code> 函数接受一个模块标识符，返回外部模块所输出的 <code>API</code>;</li>
<li>如果出现<a href="http://weizhifeng.net/commonjs-module-1.0-specification.html" target="_blank" rel="external">依赖闭环</a>(dependency cycle)，那么外部模块在被它的传递依赖（transitive dependencies）所 <code>require</code> 的时候可能并没有执行完成；在这种情况下，”require”返回的对象必须至少包含此外部模块在调用require函数（会进入当前模块执行环境）之前就已经准备完毕的输出。</li>
<li>如果请求的模块不能返回，那么”require”必须抛出一个错误。</li>
</ul>
<p>在一个模块中，会存在一个名为 <strong>exports</strong> 的自由变量，这是一个对象，模块可以在执行的时候把自身的API加入到其中，用于定义模块，导出给其他地方使用；</p>
<p><code>exports</code> 对象是输出模块变量的唯一方式。</p>
<p>参照下面的一个例子：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//math.js</span></div><div class="line">exports.add = <span class="function"><span class="keyword">function</span>(<span class="params">a,b</span>)</span>&#123;</div><div class="line">    <span class="keyword">var</span> c = a + b;</div><div class="line">    <span class="keyword">return</span> c;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//index.js</span></div><div class="line"><span class="keyword">var</span> add = <span class="built_in">require</span>(<span class="string">'math'</span>).add;<span class="comment">//</span></div><div class="line"><span class="built_in">console</span>.log(add(<span class="number">1</span>,<span class="number">1</span>));<span class="comment">//2</span></div></pre></td></tr></table></figure></p>
<p>在 <code>math.js</code>中将 add 函数绑定到模块中的 <code>exports</code> 对象中，之后在 <code>index.js</code> 模块中用 <code>require</code> 方法加载了 <code>math.js</code> 模块，并调用该模块中的 add 函数。</p>
<blockquote>
<h4 id="AMD"><a href="#AMD" class="headerlink" title="AMD"></a>AMD</h4></blockquote>
<p>Asynchronous Module Definition，即异步的模块定义，是浏览器端的模块化规范，是 RequireJS 在推广过程中对模块定义的规范化产出。</p>
<p>与服务器端的模块化规范 CommonJS 不同，AMD 的模块加载是异步的，因为是浏览器端，所以势必要是异步的（浏览器同步加载模块会导致性能、可用性、调试和跨域访问等问题）。因为模块异步加载时不会影响后面程序的执行，前面总结过 js 异步的情况，依赖某些模块的语句均放置在回调函数中，等待模块加载完成后再执行；</p>
<p>AMD 规范只定义了一个函数 <strong>define</strong> ，是一个全局变量，如下定义一个模块的语法：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">define(id?, dependencies?, factory);</div></pre></td></tr></table></figure></p>
<ul>
<li><p><code>id</code>：模块的名字，如果没有提供该参数，模块的名字应该默认为模块加载器请求的指定脚本的名字；</p>
</li>
<li><p><code>dependencies</code>：模块的依赖，已被模块定义的模块标识的数组字面量。依赖参数是可选的，如果忽略此参数，它应该默认为 <code>[&quot;require&quot;, &quot;exports&quot;, &quot;module&quot;]</code>。然而，如果工厂方法的长度属性小于3，加载器会选择以函数的长度属性指定的参数个数调用工厂方法。</p>
</li>
<li><p><code>factory</code>：模块的工厂函数，模块初始化要执行的函数或对象。如果为函数，它应该只被执行一次。如果是对象，此对象应该为模块的输出值。</p>
</li>
</ul>
<p>参照下面的一个例子：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">define(<span class="string">'myModule'</span>,[<span class="string">'jQuery'</span>,<span class="string">'types/Employee'</span>],<span class="function"><span class="keyword">function</span>(<span class="params">$,Employee</span>)</span>&#123;<span class="comment">//定义模块myModule，引入依赖jQuery，types/Employee</span></div><div class="line">	 <span class="function"><span class="keyword">function</span> <span class="title">Programmer</span>(<span class="params"></span>)</span>&#123;</div><div class="line">            <span class="comment">//do something</span></div><div class="line">        &#125;;</div><div class="line">        Programmer.prototype = <span class="keyword">new</span> Employee();</div><div class="line">        <span class="keyword">return</span> Programmer;  <span class="comment">//return Constructor</span></div><div class="line">&#125;)</div></pre></td></tr></table></figure></p>
<blockquote>
<h4 id="CMD"><a href="#CMD" class="headerlink" title="CMD"></a>CMD</h4></blockquote>
<p>Common Module Definition，即通用模块定义，是浏览器端的模块化规范，是 SeaJS 在推广过程中对模块定义的规范化产出。</p>
<p>如下定义一个模块的语法:<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">define(factory)</div></pre></td></tr></table></figure></p>
<ul>
<li><code>factory</code> 为函数时，表示是模块的构造方法。执行该构造方法，可以得到模块向外提供的接口。factory 方法在执行时，默认会传入三个参数：require、exports 和 module.</li>
</ul>
<blockquote>
<p>AMD 是<strong>依赖关系前置，提前执行</strong>；CMD 是类似于 CommonJS 那样 <strong>按需加载，延迟执行</strong>：</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//CMD recommanded</span></div><div class="line">define(<span class="function"><span class="keyword">function</span>(<span class="params">require, exports, module</span>)</span>&#123;</div><div class="line">	<span class="keyword">var</span> a = <span class="built_in">require</span>(<span class="string">'a'</span>);</div><div class="line">	a.doSomething();</div><div class="line">	<span class="keyword">var</span> b = <span class="built_in">require</span>(<span class="string">'b'</span>);</div><div class="line">	b.doSomething();	<span class="comment">// 依赖就近，延迟执行</span></div><div class="line">&#125;);</div><div class="line"></div><div class="line"><span class="comment">//AMD recommanded</span></div><div class="line">define([<span class="string">'a'</span>, <span class="string">'b'</span>], <span class="function"><span class="keyword">function</span>(<span class="params">a, b</span>)</span>&#123;</div><div class="line">    a.doSomething();    <span class="comment">// 依赖前置，提前执行</span></div><div class="line">    b.doSomething();</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>明显看出和 AMD 不同，模块定义时已不用立马引入依赖，而是运行到需要时候再加载，根据顺序执行，这样更像是 CommonJS 的风格，让人感觉也像是同步加载似的。但实际上 CMD 内部处理是对文件做了一个词法的解析，在还没执行的时候，解析出所需的依赖，并不是真正的同步。</p>
<hr>
<blockquote>
<p>参考：</p>
</blockquote>
<ul>
<li><a href="http://weizhifeng.net/commonjs-module-1.0-specification.html" target="_blank" rel="external">CommonJS Modules/1.0 规范</a></li>
<li><a href="https://github.com/amdjs/amdjs-api/wiki/AMD-(%E4%B8%AD%E6%96%87%E7%89%88" target="_blank" rel="external">AMD 模块定义规范</a></li>
<li><a href="https://github.com/seajs/seajs/issues/242" target="_blank" rel="external">CMD 模块定义规范</a></li>
</ul>
<hr>
]]></content>
      
        <categories>
            
            <category> 编程学习 </category>
            
            <category> 前端进阶 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> JavaScript </tag>
            
            <tag> 模块化 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[前端模块化之旅（一）：因何生它]]></title>
      <url>http://licao404.com/2016/05/17/%E5%89%8D%E7%AB%AF%E6%A8%A1%E5%9D%97%E5%8C%96%E4%B9%8B%E6%97%85-%E5%9B%A0%E4%BD%95%E7%94%9F%E5%AE%83/</url>
      <content type="html"><![CDATA[<span itemprop="image" itemscope="" itemtype="http://schema.org/ImageObject"><img itemprop="url image" src="http://7xrvo9.com1.z0.glb.clouddn.com/20160517/%E5%89%8D%E7%AB%AF%E6%A8%A1%E5%9D%97%E5%8C%96%E4%B9%8B%E6%97%85%E4%B8%80.jpg" class="full-image"><meta itemprop="width" content="auto"><meta itemprop="height" content="auto"></span>
<blockquote class="blockquote-center">随着互联网的快速发展，人们不单单只是需要一个网页了，功能更复杂、交互更丰富的 WebAPP 成为开发者需要面对的日常工作内容。随之而来的是更加庞大与更加复杂的 JavaScript 代码，如此而来，仅仅依靠着我们之前面向对象的 JavaScript 进行代码封装已很难满足生产需求，特别是在团队协作的复杂项目中，JavaScript 模块化已成为一个迫切的需求。</blockquote>


<a id="more"></a>
<h3 id="原始社会的生产"><a href="#原始社会的生产" class="headerlink" title="原始社会的生产"></a>原始社会的生产</h3><p>开始的开始 Music ..♫.♪.♫.♪…我们都是…咳咳，我们都会使用如下的方式写代码，将独立通用的的功能独立成一个个函数：</p>
<p><iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width="330" height="86" src="http://music.163.com/outchain/player?type=2&id=5240550&auto=1&height=66"></iframe><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">bar</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="comment">//do something</span></div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">log</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="comment">//do something</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>这都是最初得美好，那些习以为常的习惯，回忆ing…这是最原始的模块，需要使用调用就好。但是但是，使用过就会知道这样会污染全局变量，并且很容易造成 <strong>命名冲突</strong>，好吧，它属于最初的美好。</p>
<p>后来，为了解决上面青春期的问题，我们选择了面向对象写法，引入 Namespace (命名空间)，将代码进行简单封装：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> myModule = &#123;</div><div class="line">    <span class="attr">bar</span>: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">        <span class="comment">//do something</span></div><div class="line">    &#125;,</div><div class="line">    <span class="attr">log</span>: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">        <span class="comment">//do something</span></div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//调用</span></div><div class="line">myMoudle.bar();</div></pre></td></tr></table></figure></p>
<p>这种方式看似还可以，减少了全局变量，能缓解严峻的问题。但是这并不安全，因为实质上是对象，会暴露所有的模块成员，内部状态可以被外部读写。</p>
<p>没办法，出了问题继续解决，我们采用匿名闭包的写法（Immediately-Invoked Function Expression，IIFE）：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> myModule = (<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="keyword">var</span> _log = <span class="string">"hello world"</span>;</div><div class="line">    <span class="keyword">var</span> log = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">        <span class="built_in">console</span>.log(_log);</div><div class="line">    &#125;;</div><div class="line"></div><div class="line">    <span class="keyword">return</span> &#123;</div><div class="line">        <span class="attr">log</span>: log</div><div class="line">    &#125;</div><div class="line">&#125;)();</div><div class="line"></div><div class="line"><span class="comment">//引用</span></div><div class="line">myModule.log();<span class="comment">//hello world</span></div><div class="line">myModule._log;<span class="comment">//undefined</span></div></pre></td></tr></table></figure></p>
<p>如此，外部就无法读写到内部的成员（<code>_log</code>）。这时候需求又改变了，你的模块不再是简单的一个模块，而是一个功能很大的模块，需要分成几个部分，这些部分存在相互之间的 <strong>依赖关系</strong>。好吧，我们来引入依赖：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> myModule = (<span class="function"><span class="keyword">function</span>(<span class="params">$</span>)</span>&#123;</div><div class="line">    <span class="keyword">var</span> $log = $(<span class="string">'.log'</span>);</div><div class="line">    <span class="keyword">var</span> log = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">        <span class="built_in">console</span>.log($log);</div><div class="line">    &#125;;</div><div class="line"></div><div class="line">    <span class="keyword">return</span> &#123;</div><div class="line">        <span class="attr">log</span>: log</div><div class="line">    &#125;</div><div class="line">&#125;)(jQuery);</div><div class="line"></div><div class="line"><span class="comment">//引用</span></div><div class="line">myModule.log();</div></pre></td></tr></table></figure></p>
<p>这样我们在代码中引入了jQuery，方法间存在依赖关系；</p>
<p>至此，我们用简陋的工具，和无比勤劳的双手为子孙们搭建了发展的架子，为后续社会发展出更先进好用的模块化工具打下了基石，感谢祖辈们的探索！</p>
<h3 id="文明社会的探索"><a href="#文明社会的探索" class="headerlink" title="文明社会的探索"></a>文明社会的探索</h3><p>飞速变化的年代里，人们总是不满足于现状。有了前人的封装性还不够，我们引入 JS 文件时是靠不断追加 <code>&lt;script src=&quot;&quot;&gt;&lt;/script&gt;</code> 标签得以实现，每个标签引入顺序是有要求的。<br>当我们引入的文件增多，除了看起来比较累赘，还会出现比较多的依赖关系，而这种写法是无法突出这种关系的，我们需要 <strong>依赖管理</strong>，也让 <strong>后续维护</strong> 基本上变得无法进行。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">&lt;script src=<span class="string">"jquery.js"</span>&gt;&lt;script&gt;</div><div class="line">&lt;script src="dialog.js"&gt;&lt;script&gt;</div><div class="line">&lt;script src="tooltip.js"&gt;&lt;script&gt;</div><div class="line">&lt;script src="toast.js"&gt;&lt;script&gt;</div><div class="line">&lt;script src="handlebar.js"&gt;&lt;script&gt;</div><div class="line">......</div></pre></td></tr></table></figure>
<p>很多时候可能就是由于之前没有引入一个依赖的 js 文件而导致后面 js 的功能失效，浏览器报错。大型项目中，一些通用组件往往因此不能轻易地引入到业务代码中去，生产效率低下。还有一个问题就是 <strong>请求过多</strong>，不利于性能优化。</p>
<p>时代的进步是注定需要出现伟人的，积累下的诉求注定是需要人来响应的，一些规范横空出世，诸如 CommonJS规范、AMD规范、CMD规范 等一帮豪杰之辈，怀揣济世为民之心，度前端开发者于混沌之境。欲知其如何演绎，请看下篇 《前端模块化之旅（二）：CommonJS、AMD和CMD》。</p>
<hr>
]]></content>
      
        <categories>
            
            <category> 编程学习 </category>
            
            <category> 前端进阶 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> JavaScript </tag>
            
            <tag> 模块化 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[原型链后续之JavaScript的继承]]></title>
      <url>http://licao404.com/2016/05/14/%E5%8E%9F%E5%9E%8B%E9%93%BE%E5%90%8E%E7%BB%AD%E4%B9%8BJavaScript%E7%9A%84%E7%BB%A7%E6%89%BF/</url>
      <content type="html"><![CDATA[<p><img src="http://7xr868.com1.z0.glb.clouddn.com/task36/Person%E5%8E%9F%E5%9E%8B%E5%9B%BE.png" alt=""></p>
<blockquote class="blockquote-center">还记得这张原型图么（没见过 or 忘了的请戳<a href="./2016/05/10/OOP-For-JavaScript/">《OOP For JavaScript》</a>和<a href="./2016/05/12/原型链/">《说清楚JavaScript的原型链》</a>这两篇博文）？深入学习了JavaScript原型和原型链的的概念和原理后，我们内心会隐隐有种道不明的感觉，如果你学习过其他面向对象语言，你会不自觉发现这是种多么熟悉的感觉啊——这不就像是继承么？此文就将内心的感觉整理出来，作为JavaScript语言的一个核心概念来学习。</blockquote>

<a id="more"></a>
<blockquote>
<h3 id="【理论知识】"><a href="#【理论知识】" class="headerlink" title="【理论知识】"></a>【理论知识】</h3></blockquote>
<h4 id="继承有什么作用"><a href="#继承有什么作用" class="headerlink" title="继承有什么作用? "></a><strong>继承有什么作用? </strong></h4><ul>
<li>继承是面向对象语言中一个重要的概念，通过继承实现代码复用，拓展软件功能；</li>
<li>不像其他面向对象语言的继承有着诸如“父类”和“子类”的概念，父类的的属性和方法子类可以继承而不必重写，只需要写出新增或者改写的内容。JavaScript是基于对象的语言，没有类的概念，所以，要想实现继承，就需要用js的原型链或者用 <code>apply</code> 和 <code>call</code> 方法。</li>
</ul>
<h4 id="有几种常见创建对象的方式-举例说明"><a href="#有几种常见创建对象的方式-举例说明" class="headerlink" title="有几种常见创建对象的方式? 举例说明?"></a><strong>有几种常见创建对象的方式? 举例说明?</strong></h4><ul>
<li><p>工厂模式 ，由于JavaScript中无法创建类，所以通过一个函数来封装以特定接口创建对象的细节，例如：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">creatHuman</span>(<span class="params">name,age</span>)</span>&#123;</div><div class="line">    <span class="keyword">var</span> o = &#123;</div><div class="line">        <span class="attr">name</span>: name,</div><div class="line">        <span class="attr">age</span>: age,</div><div class="line">        <span class="attr">selfIntro</span>: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">            <span class="built_in">console</span>.log(<span class="string">"I'm "</span> + name);</div><div class="line">        &#125;   </div><div class="line">    &#125;;</div><div class="line">    <span class="keyword">return</span> o;</div><div class="line">&#125;</div><div class="line"><span class="keyword">var</span> people1 = creatHuman(<span class="string">"Gardon"</span>,<span class="number">20</span>);</div><div class="line"><span class="keyword">var</span> people2 = creatHuman(<span class="string">"John"</span>,<span class="number">18</span>);</div></pre></td></tr></table></figure>
</li>
<li><p>构造函数模式 ，自定义对象类型的属性和方法：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Human</span>(<span class="params">name,age</span>)</span>&#123;</div><div class="line">        <span class="keyword">this</span>.name = name,</div><div class="line">        <span class="keyword">this</span>.age = age,</div><div class="line">        <span class="keyword">this</span>.selfIntro = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">            <span class="built_in">console</span>.log(<span class="string">"I'm "</span> + name);</div><div class="line">    &#125;;</div><div class="line">&#125;</div><div class="line"><span class="keyword">var</span> people1 = <span class="keyword">new</span> Human(<span class="string">"Gardon"</span>,<span class="number">20</span>);</div><div class="line"><span class="keyword">var</span> people2 = <span class="keyword">new</span> Human(<span class="string">"John"</span>,<span class="number">18</span>);</div></pre></td></tr></table></figure>
</li>
<li><p>原型模式</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Human</span>(<span class="params"></span>)</span>&#123;&#125;;</div><div class="line">Human.prototype.name = <span class="string">"Gardon"</span>,</div><div class="line">Human.prototype.age = <span class="number">20</span>,</div><div class="line">Human.prototype.selfIntro = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">"I'm "</span> + <span class="keyword">this</span>.name);</div><div class="line">&#125;;</div><div class="line"><span class="keyword">var</span> people1 = <span class="keyword">new</span> Human();</div><div class="line"><span class="keyword">var</span> people2 = <span class="keyword">new</span> Human();</div></pre></td></tr></table></figure>
</li>
<li><p>构造函数模式与原型模式结合 ， 目前JavaScript中使用最广泛，认同度最高的一种创建自定义类型的方法：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Human</span>(<span class="params">name,age</span>)</span>&#123;</div><div class="line">        <span class="keyword">this</span>.name = name,</div><div class="line">        <span class="keyword">this</span>.age = age</div><div class="line">&#125;</div><div class="line">Human.prototype.selfIntro = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">"I'm "</span> + <span class="keyword">this</span>.name);</div><div class="line">&#125;;</div><div class="line"><span class="keyword">var</span> people1 = <span class="keyword">new</span> Human(<span class="string">"Gardon"</span>,<span class="number">20</span>);</div><div class="line"><span class="keyword">var</span> people2 = <span class="keyword">new</span> Human(<span class="string">"John"</span>,<span class="number">18</span>);</div></pre></td></tr></table></figure>
</li>
<li><p>……</p>
</li>
</ul>
<h4 id="下面两种写法有什么区别"><a href="#下面两种写法有什么区别" class="headerlink" title="下面两种写法有什么区别?"></a><strong>下面两种写法有什么区别?</strong></h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//方法1</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">People</span>(<span class="params">name, sex</span>)</span>&#123;</div><div class="line">    <span class="keyword">this</span>.name = name;</div><div class="line">    <span class="keyword">this</span>.sex = sex;</div><div class="line">    <span class="keyword">this</span>.printName = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">        <span class="built_in">console</span>.log(<span class="keyword">this</span>.name);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"><span class="keyword">var</span> p1 = <span class="keyword">new</span> People(<span class="string">'Gardon'</span>, <span class="number">20</span>)</div><div class="line"></div><div class="line"><span class="comment">//方法2</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params">name, sex</span>)</span>&#123;</div><div class="line">    <span class="keyword">this</span>.name = name;</div><div class="line">    <span class="keyword">this</span>.sex = sex;</div><div class="line">&#125;</div><div class="line"></div><div class="line">Person.prototype.printName = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.name);</div><div class="line">&#125;</div><div class="line"><span class="keyword">var</span> p1 = <span class="keyword">new</span> Person(<span class="string">'John'</span>, <span class="number">18</span>);</div></pre></td></tr></table></figure>
<p>经过前面的总结，可知：上面的代码采用两种不同的创建对象的模式。</p>
<ul>
<li><p>方法1 用的是构造函数模式，每次通过 <code>new</code> 创建 <code>People</code> 的新实例，会为每个新实例绑定属性和方法，也就是每个 <code>People</code> 的实例都被添加了 <code>printName</code> 方法；</p>
</li>
<li><p>方法2 构造函数模式与原型模式结合，实例的属性都是在构造函数中定义的，而由所有实例共享的属性和方法则是在原型中定义的，也就是所有 <code>Person</code> 的实例都继承了 <code>Person</code> 原型对象的 <code>printName</code> 方法，由原型链指向也可发现这种区别。</p>
</li>
</ul>
<h4 id="Object-create-有什么作用？兼容性如何？如何使用？"><a href="#Object-create-有什么作用？兼容性如何？如何使用？" class="headerlink" title="Object.create 有什么作用？兼容性如何？如何使用？"></a><strong>Object.create 有什么作用？兼容性如何？如何使用？</strong></h4><p>ECMAScript5 通过新增 <code>Object.create()</code> 方法创建一个拥有指定原型和若干个指定属性的对象，规范化了原型式继承；<br>这个方法接受两个参数，第一个是用作新对象原型的对象、第二个是一个为新对象定义额外属性的对象，是个可选值；</p>
<blockquote>
<p>好吧，这样解释确实有点晦涩，继续来个 <code>Human</code> 的栗子加个原型图说明下：</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//这里首先新建了个构造函数Human（对象）</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Human</span>(<span class="params">name,age</span>)</span>&#123;</div><div class="line">    <span class="keyword">this</span>.name = name;</div><div class="line">    <span class="keyword">this</span>.age = age;</div><div class="line">&#125;</div><div class="line">Human.prototype.selfIntro = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">"I'm "</span> + <span class="keyword">this</span>.name);</div><div class="line">&#125;;</div><div class="line"><span class="comment">//这里又新建了个构造函数GreatMan（对象）</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">GreatMan</span>(<span class="params">trait</span>)</span>&#123;</div><div class="line">    <span class="keyword">this</span>.trait = trait;</div><div class="line">    Human.call(<span class="keyword">this</span>);<span class="comment">//重新定义Human函数的运行上下文为当前GreatMan的上下文</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>现在需要 <code>GreatMan</code> 继承自 <code>Human</code> 。除了原型链继承，我们使用一种原型式的继承：将 <code>Human</code> 的原型拷贝一份，这用到了 <code>Object.create()</code> 方法，然后让新对象（也就是 <code>GreatMan</code>） 的 <code>prototype</code> 指向拷贝来的原型：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">GreatMan.prototype = <span class="built_in">Object</span>.create(Human.prototype);</div><div class="line"></div><div class="line"><span class="keyword">var</span> turing = <span class="keyword">new</span> GreatMan(<span class="string">"diligent"</span>);</div><div class="line"><span class="built_in">console</span>.log(turing.selfIntro());<span class="comment">//I'm undefined</span></div><div class="line"></div><div class="line">turing.name = <span class="string">"Turing"</span>;</div><div class="line"><span class="built_in">console</span>.log(turing.selfIntro());<span class="comment">//I'm Turing</span></div></pre></td></tr></table></figure></p>
<blockquote>
<p>原型图示：</p>
</blockquote>
<p><img src="http://7xr868.com1.z0.glb.clouddn.com/task37/%E5%8E%9F%E5%9E%8B%E5%9B%BEcreate.png" alt=""></p>
<blockquote>
<p>考虑兼容性：支持 Object.create() 方法的浏览器有 <code>IE9+</code>、<code>Firefix4+</code>、<code>Safari5+</code>、<code>Opera12+</code> 和 <code>Chrome</code>  </p>
</blockquote>
<h4 id="hasOwnProperty-有什么作用？-如何使用？"><a href="#hasOwnProperty-有什么作用？-如何使用？" class="headerlink" title="hasOwnProperty 有什么作用？ 如何使用？"></a><strong>hasOwnProperty 有什么作用？ 如何使用？</strong></h4><p><code>hasOwnProperty()</code> 方法用来判断某个对象是否含有指定的自身属性，参数是要检测的是属性名。<br>所有继承了 <code>Object.prototype</code> 的对象都会从原型链上继承到 <code>hasOwnProperty</code> 方法，这个方法可以用来检测一个对象是否含有特定的自身属性，如对上面的例子:<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Human</span>(<span class="params">name,age</span>)</span>&#123;</div><div class="line">    <span class="keyword">this</span>.name = name;</div><div class="line">    <span class="keyword">this</span>.age = age;</div><div class="line">    <span class="keyword">this</span>.selfAge = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">        <span class="built_in">console</span>.log(<span class="string">"I'm "</span> + <span class="keyword">this</span>.age);    </div><div class="line">    &#125;;</div><div class="line">&#125;</div><div class="line">Human.prototype.selfIntro = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;    </div><div class="line">    <span class="built_in">console</span>.log(<span class="string">"I'm "</span> + <span class="keyword">this</span>.name);</div><div class="line">&#125;;</div><div class="line"><span class="keyword">var</span> people1 = <span class="keyword">new</span> Human(<span class="string">"Gardon"</span>,<span class="number">20</span>);</div><div class="line"></div><div class="line">people1.hasOwnProperty(<span class="string">'name'</span>);<span class="comment">//true</span></div><div class="line">people1.hasOwnProperty(<span class="string">'age'</span>);<span class="comment">//true</span></div><div class="line">people1.hasOwnProperty(<span class="string">'selfAge'</span>);<span class="comment">//true</span></div><div class="line">people1.hasOwnProperty(<span class="string">'selfIntro'</span>)<span class="comment">//false</span></div></pre></td></tr></table></figure></p>
<p>我们创建 Human 的实例 <code>people1</code>，people1 的属性包含 name、ag、selfAge，所以 <code>hasOwnProperty</code> 返回的是 <code>true</code>,而 <code>selfIntro</code> 是其指向的原型的属性，所以 <code>hasOwnProperty</code> 返回 <code>false</code>。</p>
<h4 id="实现-Object-create-的-polyfill，如：（ps-写个-函数create，实现-Object-create-的功能）"><a href="#实现-Object-create-的-polyfill，如：（ps-写个-函数create，实现-Object-create-的功能）" class="headerlink" title="实现 Object.create 的 polyfill，如：（ps: 写个 函数create，实现 Object.create 的功能）"></a><strong>实现 Object.create 的 polyfill，如：（ps: 写个 函数create，实现 Object.create 的功能）</strong></h4><blockquote>
<p><a href="http://www.cnblogs.com/ziyunfei/archive/2012/09/17/2688829.html" target="_blank" rel="external">什么是 polyfill？</a></p>
</blockquote>
<p><code>Object.create</code> 的内部实现逻辑前面的解释和原型图已经很明了，现在通过自定义函数实现：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//create传入的参数是需要继承的对象</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">create</span>(<span class="params">obj</span>)</span>&#123;</div><div class="line">    <span class="function"><span class="keyword">function</span> <span class="title">F</span>(<span class="params"></span>)</span>&#123;&#125;<span class="comment">//基于传入对象创建一个临时的构造函数</span></div><div class="line">    F.prototype = obj;<span class="comment">//将传入的对象作为构造函数的原型</span></div><div class="line">    <span class="keyword">return</span> <span class="keyword">new</span> F();<span class="comment">//返回构造函数的一个新实例</span></div><div class="line">&#125;</div><div class="line"><span class="keyword">var</span> obj = &#123;<span class="attr">a</span>: <span class="number">1</span>, <span class="attr">b</span>:<span class="number">2</span>&#125;;</div><div class="line"><span class="keyword">var</span> obj2 = create(obj);</div><div class="line"><span class="built_in">console</span>.log(obj2.a); <span class="comment">//1</span></div></pre></td></tr></table></figure>
<p>区区3行,这是 ECMAScript 另外一种继承的思路：原型式继承。最初由 <a href="http://www.crockford.com/" target="_blank" rel="external">Douglas Crockford</a> 在其文章 <a href="http://javascript.crockford.com/prototypal.html" target="_blank" rel="external">《Prototypal Inheritance in JavaScript》</a> 中提出。</p>
<p>ECMAScript5 通过新增 <code>Object.create()</code> 方法创建一个拥有指定原型和若干个指定属性的对象，规范化了原型式继承，<code>Object.create()</code> 在传入一个参数的情况下，和 <code>create()</code> 方法的行为相同。</p>
<h4 id="如下代码中-call-的作用是什么"><a href="#如下代码中-call-的作用是什么" class="headerlink" title="如下代码中 call 的作用是什么?"></a><strong>如下代码中 call 的作用是什么?</strong></h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params">name, sex</span>)</span>&#123;</div><div class="line">    <span class="keyword">this</span>.name = name;</div><div class="line">    <span class="keyword">this</span>.sex = sex;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Male</span>(<span class="params">name, sex, age</span>)</span>&#123;</div><div class="line">    Person.call(<span class="keyword">this</span>, name, sex);    <span class="comment">//这里的 call 有什么作用</span></div><div class="line">    <span class="keyword">this</span>.age = age;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>前面谈论 <code>this</code> 时（参见<a href="./2016/05/04/关于-this-二三事/#more">《关于 “this” 二三事》</a>）已经简单提过 <code>call</code> 和 <code>apply</code> 函数的一般作用：用来动态改变某个函数运行时上下文（重新定义函数的执行环境），也就是函数内部 <code>this</code> 的指向。</p>
<p><code>call</code> 和 <code>apply</code> 也正是通过这种作用来实现继承，上面代码中，<code>call</code> 将 <code>Person</code> 这个构造函数的运行时上下文变为 <code>Male</code> 这个构造函数（<code>Person</code> 内部的 <code>this</code> 指向 <code>Male</code>）;</p>
<p>这时候通过 <code>new</code> 新建 <code>Male</code> 的实例对象：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> goodman = <span class="keyword">new</span> Male(<span class="string">"Gardon"</span>,<span class="string">"male"</span>,<span class="number">20</span>);</div><div class="line"></div><div class="line"><span class="built_in">console</span>.log(goodman.age);<span class="comment">//20</span></div><div class="line"><span class="built_in">console</span>.log(goodman.name);<span class="comment">//Gardon</span></div><div class="line"><span class="built_in">console</span>.log(goodman.sex);<span class="comment">//male</span></div></pre></td></tr></table></figure></p>
<p>发现 <code>goodman</code> 是不是就有了 <code>name</code> 和 <code>sex</code> 属性呢？然而 <code>Male</code> 中并没有这两个属性，而是通过 <code>call</code> 函数继承了 <code>Person</code> 的属性。</p>
<blockquote>
<p>apply 函数与 call 函数作用相同，参数传入方式略有区别，同样参见之前的博文<a href="./2016/05/04/关于-this-二三事/#more">《关于 “this” 二三事》</a><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Person.apply(<span class="keyword">this</span>,[name, sex]);</div></pre></td></tr></table></figure></p>
</blockquote>
<h4 id="补全代码，实现继承"><a href="#补全代码，实现继承" class="headerlink" title="补全代码，实现继承"></a><strong>补全代码，实现继承</strong></h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params">name, sex</span>)</span>&#123;</div><div class="line">    <span class="keyword">this</span>.name = name;</div><div class="line">    <span class="keyword">this</span>.sex = sex;</div><div class="line">&#125;</div><div class="line"></div><div class="line">Person.prototype.getName = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.name;</div><div class="line">&#125;;    </div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Male</span>(<span class="params">name, sex, age</span>)</span>&#123;</div><div class="line">   <span class="keyword">this</span>.age = age;  </div><div class="line">   Person.call(<span class="keyword">this</span>,name,sex)<span class="comment">//call方法继承属性</span></div><div class="line">&#125;</div><div class="line"></div><div class="line">Male.prototype = <span class="built_in">Object</span>.create(Person.prototype);<span class="comment">//Object.create继承原型方法</span></div><div class="line"></div><div class="line">Male.prototype.printName = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.getName())</div><div class="line">&#125;;</div><div class="line">Male.prototype.getAge = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.age;</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="keyword">var</span> john = <span class="keyword">new</span> Male(<span class="string">'Gardon'</span>, <span class="string">'male'</span>, <span class="number">20</span>);</div><div class="line">john.printName();<span class="comment">//Gardon</span></div></pre></td></tr></table></figure>
<hr>
<blockquote>
<h3 id="【小试牛刀】"><a href="#【小试牛刀】" class="headerlink" title="【小试牛刀】"></a>【小试牛刀】</h3></blockquote>
<h4 id="实现如下可拖拽-dialog-弹窗功能，如下是功能要求"><a href="#实现如下可拖拽-dialog-弹窗功能，如下是功能要求" class="headerlink" title="实现如下可拖拽 dialog 弹窗功能，如下是功能要求"></a><strong>实现如下可拖拽 dialog 弹窗功能，如下是功能要求</strong></h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//功能描述：</span></div><div class="line"><span class="comment">// 1. 可使用 dialog.open() 去打开弹窗</span></div><div class="line"><span class="comment">// 2. 当点击确定、取消时可使用用户自定义事件</span></div><div class="line"><span class="comment">// 3. dialog 可拖动</span></div><div class="line"><span class="comment">// 4. 允许页面展示多个 dialog</span></div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Dialog</span>(<span class="params"></span>)</span>&#123;</div><div class="line"><span class="comment">//todo ...</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"><span class="keyword">var</span> tpl = <span class="string">'&lt;ul&gt;&lt;li&gt;列表1&lt;/li&gt;&lt;li&gt;列表2&lt;/li&gt;&lt;li&gt;列表1&lt;/li&gt;&lt;li&gt;列表1&lt;/li&gt;&lt;/ul&gt;'</span>;</div><div class="line"></div><div class="line">$(<span class="string">'#open4'</span>).on(<span class="string">'click'</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">  <span class="keyword">var</span> dialog4 = <span class="keyword">new</span> Dialog();</div><div class="line">  dialog4.open(&#123;</div><div class="line">    <span class="attr">title</span>: <span class="string">'Message'</span>,</div><div class="line">    <span class="attr">message</span>: tpl,</div><div class="line">    <span class="attr">isShowCloseBtn</span>: <span class="literal">true</span>,</div><div class="line">    <span class="attr">isShowConfirmBtn</span>: <span class="literal">true</span>,</div><div class="line">    <span class="attr">onClose</span>: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">      alert(<span class="string">'取消'</span>)</div><div class="line">    &#125;,</div><div class="line">    <span class="attr">onConfirm</span>: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">      alert(<span class="string">'确定'</span>);</div><div class="line">    &#125;</div><div class="line">  &#125;);</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>首先实现一个普通的 <code>dialog</code>，前面用过原生 JavaScript 实现过，但是还比较简陋。现在我们用面向对象的写法将其封装成jQuery插件：</p>
<blockquote>
<ul>
<li><p><a href="http://febox.applinzi.com/goDialog/index.html" target="_blank" rel="external">DEMO预览</a></p>
</li>
<li><p><a href="https://github.com/licao404/landemo/tree/master/goDialog" target="_blank" rel="external">实现代码</a></p>
</li>
</ul>
</blockquote>
<p>然后我们在上面的基础上，加入拖拽事件，</p>
<blockquote>
<ul>
<li><p><a href="http://febox.applinzi.com/task37/index.html" target="_blank" rel="external">DEMO预览</a></p>
</li>
<li><p><a href="https://github.com/licao404/landemo/tree/master/goDialogdraggable" target="_blank" rel="external">实现代码</a></p>
</li>
</ul>
</blockquote>
<hr>
]]></content>
      
        <categories>
            
            <category> 编程学习 </category>
            
            <category> 前端基础 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> JavaScript </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[说清楚JavaScript的原型链]]></title>
      <url>http://licao404.com/2016/05/12/%E5%8E%9F%E5%9E%8B%E9%93%BE/</url>
      <content type="html"><![CDATA[<blockquote>
<p>首先通过一个小例子来为我们解释原型链做个准备工作，了解几个概念有助于我们由浅入深挖掘JavaScript原型链。</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params">name</span>)</span>&#123;</div><div class="line">    <span class="keyword">this</span>.name = name;</div><div class="line">&#125;</div><div class="line">Person.prototype.sayName = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">'My name is :'</span> + <span class="keyword">this</span>.name);</div><div class="line">&#125;</div><div class="line"><span class="keyword">var</span> p = <span class="keyword">new</span> Person(<span class="string">"Gardon"</span>)</div><div class="line">p.sayName();</div></pre></td></tr></table></figure>
<a id="more"></a>
<h4 id="试着解释Person、-prototype、proto、p、constructor之间的关联。"><a href="#试着解释Person、-prototype、proto、p、constructor之间的关联。" class="headerlink" title="试着解释Person、 prototype、proto、p、constructor之间的关联。"></a><strong>试着解释Person、 prototype、<strong>proto</strong>、p、constructor之间的关联。</strong></h4><ul>
<li>这里首先创建了一个构造函数 <code>Person</code>，每个函数都有一个 <strong>prototype</strong> 属性，指向它的原型对象；</li>
<li>同时原型对象会有一个 <strong>constructor</strong> 属性，指回 <code>prototype</code> 所在的函数（这里也就是 <code>Person</code>）；</li>
<li>每个对象都会有 <code>__proto__</code> 属性（包括函数，函数也是对象），指向它的构造函数（上一层）的原型对象，这里 <code>p</code> 是通过构造函数 <code>Person</code> 的实例对象，它的 <code>__proto__</code> 属性会指向 <code>Person</code> 的原型对象。</li>
</ul>
<h4 id="2-上例中，对对象-p-可以这样调用-p-toString-。toString是哪里来的-画出原型图-并解释什么是原型链。"><a href="#2-上例中，对对象-p-可以这样调用-p-toString-。toString是哪里来的-画出原型图-并解释什么是原型链。" class="headerlink" title="2. 上例中，对对象 p 可以这样调用 p.toString()。toString是哪里来的? 画出原型图? 并解释什么是原型链。"></a><strong>2. 上例中，对对象 p 可以这样调用 p.toString()。toString是哪里来的? 画出原型图? 并解释什么是原型链。</strong></h4><p>原型图示：</p>
<p><img src="http://7xr868.com1.z0.glb.clouddn.com/task36/Person%E5%8E%9F%E5%9E%8B%E5%9B%BE.png" alt=""></p>
<p>toString 是在最高级的 <strong>Object</strong> 方法的原型对象中；</p>
<p>为何 <code>p.toString()</code> 会找到 <code>Object</code> 中去呢，这就得解释原型链了，如上图中所示：</p>
<blockquote>
<p>JavaScript 每个对象都有 <code>__proto__</code> 属性指向上一层的原型对象，上一层的原型对象的结构依然类似，通过 <code>__proto__</code> 属性指向上一层的原型对象，这样就用 <code>__proto__</code> 顺藤摸瓜找到 Object 的原型对象上，这条寻找的链就是 JavaScript 的原型链，而 Object 的原型对象用 <code>Object.proto = null</code> 表示原型链的最顶端，如此变形成了javascript 的原型链继承 ，同时也解释了为什么所有的javascript对象都具有Object 的基本方法。</p>
</blockquote>
<p>相当于对象 <code>p</code> 找自己看有无 toString() 方法，没有，找上一层，以此类推，直到找到 Object 中有toString()方法。</p>
<h4 id="3-对-String-做扩展，实现如下方式获取字符串中频率最高的字符"><a href="#3-对-String-做扩展，实现如下方式获取字符串中频率最高的字符" class="headerlink" title="3. 对 String 做扩展，实现如下方式获取字符串中频率最高的字符"></a><strong>3. 对 String 做扩展，实现如下方式获取字符串中频率最高的字符</strong></h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">String</span>.prototype.getMostOften = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line"><span class="keyword">var</span> _this = <span class="keyword">this</span>,</div><div class="line">    mostoften = <span class="number">0</span>,</div><div class="line">    target;</div><div class="line"></div><div class="line"><span class="keyword">while</span>(_this)&#123;</div><div class="line">    <span class="keyword">var</span> letter = _this.charAt(<span class="number">0</span>),<span class="comment">//依次遍历当前字符串中的不重复出现的字母</span></div><div class="line">        afterstr = _this.split(letter),<span class="comment">//剔除当前字符串重复出现的字母</span></div><div class="line">        count = _this.length - (_this = afterstr.join(<span class="string">''</span>)).length;</div><div class="line">        <span class="comment">//出现了count次,并同时将已剔除重复字符串的字符串设置为当前字符串</span></div><div class="line">    <span class="keyword">if</span>(count &gt; mostoften)&#123;</div><div class="line">        mostoften = count;</div><div class="line">        target = letter;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"><span class="keyword">return</span> &#123;</div><div class="line">    <span class="string">"出现最多"</span>:target,</div><div class="line">    <span class="string">"出现次数"</span>:mostoften</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">var</span> str = <span class="string">'ahbbccdeddddfg'</span>;</div><div class="line"><span class="keyword">var</span> ch = str.getMostOften();</div><div class="line"><span class="built_in">console</span>.log(ch); <span class="comment">//d , 因为d 出现了5次</span></div></pre></td></tr></table></figure>
<h4 id="4-instanceOf-有什么作用？内部逻辑是如何实现的？"><a href="#4-instanceOf-有什么作用？内部逻辑是如何实现的？" class="headerlink" title="4. instanceOf 有什么作用？内部逻辑是如何实现的？"></a><strong>4. instanceOf 有什么作用？内部逻辑是如何实现的？</strong></h4><p><strong>instanceOf</strong> 是用来判断一个对象是否是某个构造函数的实例。</p>
<p>由上面 <strong>2</strong> 的原型图和总结的原型链的概念可以知道，想实现 <code>instanceOf</code> 的功能，就是判断这个对象的 <code>__proto__</code> 所指向的原型对象是不是就是某个函数的原型对象（也就是函数的 <code>prototype</code> 所指）。在上图中 <code>instanceOf</code> 实际上就是做如下判断：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">p.__proto__ === Person.prototype;<span class="comment">//true</span></div></pre></td></tr></table></figure>
<p>当然，由于原型链，顺藤摸瓜可知，任何对象都会是 <code>Object</code> 的实例；</p>
<p>了解了内部实现原理，我们尝试自定义函数来完成 <code>instanceOf</code> 的工作:</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">isObjInstanceOfFunc</span>(<span class="params">obj,Func</span>)</span>&#123;</div><div class="line">       <span class="keyword">var</span> __proto__ = obj.__proto__;</div><div class="line">       <span class="keyword">do</span>&#123;</div><div class="line">           <span class="keyword">if</span>(__proto__=== Func.prototype)&#123;<span class="keyword">return</span> <span class="literal">true</span>;&#125;</div><div class="line">           <span class="keyword">if</span>(!__proto__)&#123;<span class="keyword">return</span> <span class="literal">false</span>;&#125;<span class="comment">//到了 Object 的原型，undefined，return false停止循环</span></div><div class="line">       &#125;<span class="keyword">while</span> (__proto__=__proto__.__proto__);</div><div class="line">       <span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">   &#125;</div></pre></td></tr></table></figure>
<hr>
]]></content>
      
        <categories>
            
            <category> 编程学习 </category>
            
            <category> 前端基础 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> JavaScript </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[【转】前端开发中的字符编码]]></title>
      <url>http://licao404.com/2016/05/12/%E3%80%90%E8%BD%AC%E3%80%91%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91%E4%B8%AD%E7%9A%84%E5%AD%97%E7%AC%A6%E7%BC%96%E7%A0%81/</url>
      <content type="html"><![CDATA[<span itemprop="image" itemscope="" itemtype="http://schema.org/ImageObject"><img itemprop="url image" src="http://7xrvo9.com1.z0.glb.clouddn.com/2016.0512/meiziCoder2.jpg" class="full-image" alt="alt"><meta itemprop="width" content="auto"><meta itemprop="height" content="auto"></span>
<blockquote class="blockquote-center">前端开发过程中会接触各种各样的编码，比较常见的主要是UTF－8和HTML实体编码，但是web前端的世界却不止这两种编码，而且编码的选择也会造成一定的问题，如前后端开发过程中不同编码的兼容、多字节编码可能会造成的XSS漏洞等。因此，本文旨在更好的全面了解涉及前端开发领域的字符编码，避免可能出现的交互和开发中的忽视的漏洞。</blockquote>

<a id="more"></a>
<h3 id="URL编码"><a href="#URL编码" class="headerlink" title="URL编码"></a>URL编码</h3><p>我曾经在 <strong>URL编码解码和base64</strong> 一文中讲述了URL编码中的三组函数，并对比了这三组函数与base64编码的关系，在此简要说明一下。</p>
<p><code>escape/unescape</code> 函数针对宽字符做 <code>unicode</code> 编码，并针对码值做十六进制编码，所以使用 <code>escape</code> 针对汉字编码会得到形如 “\uxxxx”      的结果；<code>encodeURI/decodeURI</code>,<code>encodeURIComponent/decodeURIComponent</code> 函数针对宽字节编码却不同于 <code>escape</code> ，首先针对宽字节字符进行 <code>UTF－8</code> 编码，然后针对编码后的结果进行“％”替换，得到结果。以上所述都是针对宽字节字符而言，对于编码靠前的 <code>ASCII</code> 字符而言，上述三组函数的安全字符的范围也有所不同，具体可在上文中了解。</p>
<h3 id="base64编码"><a href="#base64编码" class="headerlink" title="base64编码"></a>base64编码</h3><p><code>base64</code> 编码在前端通常用于图片和 <code>icon</code> 的编码，它将每3个8位字节为一组，分成4组6位字节，并且每个字节的高位补零，形成4个8位的字节，由此可看出 <code>base64</code> 编码是可逆推的。在大多数浏览器中，提供了ASCII字符的 <code>base64</code> 编码函数，即 <code>window.btoa()</code> 。该函数无法针对宽字节进行 <code>base64</code> 编码，若针对中文编码，则需现转换位 <code>UTF－8</code> 编码，然后进行 <code>base64</code> 编码。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">unicodeToBase64</span>(<span class="params">s</span>)</span>&#123; <span class="keyword">return</span> <span class="built_in">window</span>.btoa(<span class="built_in">unescape</span>(<span class="built_in">encodeURIComponent</span> (s))) &#125;</div></pre></td></tr></table></figure>
<p>通过encodeURIComponent对宽字节字符编码，是“％xx”形式的编码，与UTF8编码的区别仅在于前缀（这是由规范RFC3986决定的，将非ASC字符进行某种形式编码，并转换为16进制，并在字节前加上“％”）。因此通过unescape(encodeURIComponent(s))可以转化为UTF8字节。当然，也可自己写一个转换函数，按照一定规则便行为UTF－8编码的字节，如下例：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">unescape</span>(<span class="built_in">encodeURIComponent</span> (<span class="string">"中国"</span>))<span class="comment">//结果："ä¸­å½"</span></div><div class="line"><span class="built_in">encodeURIComponent</span> (<span class="string">"中国"</span>)<span class="comment">//结果："%E4%B8%AD%E5%9B%BD"</span></div><div class="line"><span class="built_in">console</span>.log(<span class="string">"\u00E4\u00B8\u00AD\u00E5\u009B\u00BD"</span>)<span class="comment">//结果：ä¸­å½</span></div></pre></td></tr></table></figure>
<p>通过简单的replace函数，就可以完成URL编码到UTF8编码的转换，进而完成宽字节字符到base64编码的转换。有了这个函数，我们手动生成一些data URI形式的内容，只需制定MIME类型和编码方式，就可以实现文本的转换，如以下代码：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">&lt;a href="data:text/html;charset=utf-8;base64,PHNjcmlwdD5hbGVydCgxMik8L3NjcmlwD4="&gt;abc&lt;/a&gt;</div><div class="line">//未编码前：&lt;a href="javascript: alert(1)"&gt;test&lt;/a&gt;</div></pre></td></tr></table></figure>
<h3 id="前端UTF8编码与后端GBK编码的兼容"><a href="#前端UTF8编码与后端GBK编码的兼容" class="headerlink" title="前端UTF8编码与后端GBK编码的兼容"></a>前端UTF8编码与后端GBK编码的兼容</h3><p>目前前端大都采用UTF8进行编码，不管是html、js抑或是css，而后端则由于历史原因大都采用GBK或GB2312进行解码，因此前端通过parameter传递的URL编码的字符串就不可能直接在后台进行解码，为了更好的兼容性，前端可进行两次URL编码，即encodeURIComponent（encodeURIComponent（“中国”）），这样后端接收到参数后，先使用GBK或GB2312解码，得到了UTF8编码后再使用UTF8解码即可。两次编码主要是利用“ASC字符使用GBK或GB2312编码不变”的特点完成，富有技巧。</p>
<h3 id="HTML实体编码与进制编码"><a href="#HTML实体编码与进制编码" class="headerlink" title="HTML实体编码与进制编码"></a>HTML实体编码与进制编码</h3><p>实体编码针对HTML的预留字符而言，如“&lt;&gt;”等。实体编码有两种形式<code>&amp;</code>实体名;或 <code>&amp;entity_number</code>;，由于浏览器对 <code>&amp;</code> 实体名 <code>;</code> 的兼容性有差别，因此最好采用实体号的形式编码。</p>
<p>进制编码，顾名思义将 <code>ASC</code> 字符对应的码值按照十六进制或十进制编码，并转化为 <code>&amp;#x</code>;(16进制)或 <code>&amp;#D</code>;(10进制)形式。</p>
<p>单单针对实体编码而言并没有什么特殊强调的点，之所以把它单独列为一个章节，意在强调这两种编码与js代码的作用域的关系。</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">onclick</span>=<span class="string">"document.write(&lt;img src=1 onerror=alert(23)&gt;')"</span>&gt;</span>ccc<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">onclick</span>=<span class="string">"document.write('&amp;lt;img src=1 onerror=alert(23)&amp;gt;')"</span>&gt;</span>ccc<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">&amp;#x3c;&amp;#x69;&amp;#x6d;&amp;#x67;&amp;#x20;&amp;#x73;&amp;#x72;&amp;#x63;&amp;#x3d;&amp;#x31;&amp;#x20;&amp;#x6f;&amp;#x6e;&amp;#x65;&amp;#x72;&amp;#x72;&amp;#x6f;&amp;#x72;&amp;#x3d;&amp;#x61;&amp;#x6c;&amp;#x65;&amp;#x72;&amp;#x74;&amp;#x28;&amp;#x32;&amp;#x33;&amp;#x29;&amp;#x3e;</div><div class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">1</span> <span class="attr">onerror</span>=<span class="string">&amp;#x61;&amp;#x6c;&amp;#x65;&amp;#x72;&amp;#x74;&amp;#x28;&amp;#x32;&amp;#x33;&amp;#x29;</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></div><div class="line"><span class="built_in">document</span>.write(<span class="string">'&amp;lt;img src=1 onerror=alert(23)&amp;gt;'</span>);</div><div class="line"><span class="built_in">document</span>.write(<span class="string">'&lt;img src=1 onerror=&amp;#x61;&amp;#x6c;&amp;#x65;&amp;#x72;&amp;#x74;&amp;#x28;&amp;#x33;&amp;#x29;&gt;'</span>);</div><div class="line"><span class="built_in">document</span>.write(<span class="string">'&amp;#x3c;&amp;#x69;&amp;#x6d;&amp;#x67;&amp;#x20;&amp;#x73;&amp;#x72;&amp;#x63;&amp;#x3d;&amp;#x31;&amp;#x20;&amp;#x6f;&amp;#x6e;&amp;#x65;&amp;#x72;&amp;#x72;&amp;#x6f;&amp;#x72;&amp;#x3d;&amp;#x61;&amp;#x6c;&amp;#x65;&amp;#x72;&amp;#x74;&amp;#x28;&amp;#x32;&amp;#x33;&amp;#x29;&amp;#x3e;'</span>);</div><div class="line"><span class="built_in">document</span>.write(<span class="string">'\u003c\u0069\u006d\u0067\u0020\u0073\u0072\u0063\u003d\u0031\u0020\u006f\u006e\u0065\u0072\u0072\u006f\u0072\u003d\u0061\u006c\u0065\u0072\u0074\u0028\u0032\u0033\u0029\u003e'</span>)</div><div class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div></pre></td></tr></table></figure>
<p>代码中列举了8个例子，第一个在事件处理函数onclick中输出HTML片段；第二个则输出经实体编码后的HTML片段；第三个则是直接针对 <code>&lt;img src=1 onerror=alert(23)&gt;</code> 做16进制编码；第四个则是针对onerror事件处理函数做16进制编码；第五个则是在脚本中输出实体编码的字符；第六个针对事件处理函数做16进制编码；第七个则针对所有的字符做16进制编码；第八个则是在script中直接输出 <code>&lt;img src=1 onerror=alert(23)&gt;</code> 的unicode编码。</p>
<p>对比结果，前两个例子在点击后都会弹出alert；第三个例子则在页面中显示文本 <code>&lt;img src=1 onerror=alert(23)&gt;</code> ；第四个例子则会在页面加载初期弹出alert；第五、七会输出字符串；第六、八则会在第四个例子中的alert之后也弹出alert。现在分析这些结果，通过第一二个例子可知道，HTML标签中（除script标签）的内联js代码可以进行HTML实体编码，这是非常重要的一点，我们可以更为明确的进行验证：</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">onclick</span>=<span class="string">"alert('&amp;lt;img src=1 onerror=alert(23)&amp;gt;')"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure>
<p>输出的结果自然是 <code>&lt;img src=1onerror=alert(23)&gt;</code>，这的确论证了我们上文提到的这一点；第三个例子说明了HTML解析器在进行词法分析前，首先进行解码，十六进制和十进制皆可，因此，结果自然输出形如 <code>&lt;img src=1 onerror=alert(23)&gt;</code> 的字符串；第四个例子则紧接着论证了内联在HTML的并采用十六进制编码的js代码同样会被正确解析并执行，这说明了进制编码同样可被HTML解析器解析；第五、七个例子说明在js中同样可以使用实体编码和进制编码，解析的结果会渲染在页面上；第六个例子则论证了上一观点，只针对事件处理函数做进制编码，执行后页面弹出alert；第八个例子则是在js中执行unicode编码的字符串，正常alert。</p>
<p>由此可见，js代码内联在HTML的非script标签内，则会遵守HTML编码规范：进制编码和实体编码；而在js代码（script标签内以及js文件内）中，则遵从js编码：1,unicode形式编码(\uxxxx)2,普通的16进制编码(\xH)，这可通过第八个例子得到证明。之所以在本节提到这么多编码特点，主要提醒大家在预防XSS时需要注意的几点：</p>
<ul>
<li><p>检测用户输入时，不仅仅需要防范类似“&lt;&gt;”这样的字符，通过unicode编码或进制编码仍有可能注入代码</p>
</li>
<li><p>需要针对特定的关键字做过滤，如“eval、write、prototype”</p>
</li>
<li><p>尽可能禁止内联事件处理函数的使用</p>
</li>
<li><p>js过滤“src/href/action”属性，如“javascript:”,”data:”</p>
</li>
</ul>
<h3 id="JS编码"><a href="#JS编码" class="headerlink" title="JS编码"></a>JS编码</h3><p>其实在上节中已提到了js编码，即js可执行unicode编码和十六（八）进制编码后的字符串，但是不支持十进制编码的字串。具体操作可通过常用的几个函数来实现，如“eval，write，setTimeout，Function”执行编码后的字符串；同样，对于十进制编码的字串，通过结合String.fromCharCode和eval同样可以执行。</p>
<p>在此附上笔者实现的字符转换，更为灵活的实现各种自定义形式的字串编码:</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> Code = &#123;&#125;;</div><div class="line">    <span class="comment">/**</span></div><div class="line">     *</div><div class="line">     * @param str 待编码字串</div><div class="line">     * @param jinzhi 进制编码</div><div class="line">     * @param prefix 前缀</div><div class="line">     * @param postfix 后缀</div><div class="line">     * @param count 总共编码的位数，默认为4</div><div class="line">     * @returns &#123;string&#125;</div><div class="line">     */</div><div class="line">    Code.encode = <span class="function"><span class="keyword">function</span>(<span class="params">&#123;str = <span class="string">''</span>,jinzhi = <span class="string">'16'</span>,prefix = <span class="string">'\\u'</span>,postfix = <span class="string">';'</span>,count = <span class="string">'4'</span>&#125; = &#123;&#125;</span>)</span>&#123;</div><div class="line">        <span class="keyword">var</span> ret = <span class="string">''</span>;</div><div class="line">        <span class="keyword">var</span> addZero,tmp;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">let</span> i=<span class="number">0</span>;i&lt;str.length;i++)&#123;</div><div class="line">            tmp = str.charCodeAt(i).toString(jinzhi);</div><div class="line">            addZero = count - tmp.length + <span class="number">1</span>;</div><div class="line">            ret += prefix + <span class="keyword">new</span> <span class="built_in">Array</span>(addZero).join(<span class="string">'0'</span>) + tmp + postfix;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> ret;</div><div class="line">    &#125;;</div><div class="line">    Code.decode = <span class="function"><span class="keyword">function</span>(<span class="params">&#123;str = <span class="string">''</span>,jinzhi = <span class="string">'16'</span>,prefix = <span class="string">'\\u'</span>,postfix = <span class="string">';'</span>&#125; = &#123;&#125;</span>)</span>&#123;</div><div class="line">        <span class="keyword">var</span> ret = <span class="string">''</span>;</div><div class="line">        <span class="keyword">var</span> splits = str.split(<span class="string">';'</span>);</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">let</span> i=<span class="number">0</span>;i&lt;splits.length;i++)&#123;</div><div class="line">            <span class="keyword">let</span> tmp = splits[i].replace(prefix,<span class="string">''</span>);</div><div class="line">            ret += <span class="built_in">String</span>.fromCharCode(<span class="built_in">parseInt</span>(tmp,jinzhi));</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> ret;</div><div class="line">    &#125;;</div><div class="line"></div><div class="line">    <span class="built_in">console</span>.log(Code.encode(&#123;<span class="attr">str</span>: <span class="string">'&lt;img src=@ onerror=alert(123) /&gt;'</span>&#125;));</div><div class="line">    <span class="built_in">console</span>.log(Code.decode(&#123;<span class="attr">str</span>: Code.encode(&#123;<span class="attr">str</span>: <span class="string">'&lt;img src=@ onerror=alert(123) /&gt;'</span>&#125;)&#125;))</div></pre></td></tr></table></figure>
<p>另外，对于js输出点的过滤其实并不仅限于上文提到的如eval、setTimeout、Function等几个，由于JS语法比较灵活相对“漏洞”较多，可使用的“线索”也越丰富，如前段时间在Stackoverflow上发现的一个问题，即</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">(<span class="number">0</span>)[<span class="string">'constructor'</span>][<span class="string">'constructor'</span>](<span class="string">'return "abc;"'</span>)()</div></pre></td></tr></table></figure>
<p>同样可以执行JS代码，确实挺有特点的，具体为什么上述形式可以执行代码，请读者自己仔细品味。</p>
<blockquote>
<p>本文由杭州尚妆@欲休分享  |  <a href="http://www.cnblogs.com/accordion/p/5468704.html" target="_blank" rel="external">原文</a></p>
</blockquote>
<hr>
]]></content>
      
        <categories>
            
            <category> 编程学习 </category>
            
            <category> 前端高级 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 转载 </tag>
            
            <tag> 干货 </tag>
            
            <tag> 字符编码 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[OOP For JavaScript]]></title>
      <url>http://licao404.com/2016/05/10/OOP-For-JavaScript/</url>
      <content type="html"><![CDATA[<blockquote>
<h3 id="【知识点】"><a href="#【知识点】" class="headerlink" title="【知识点】"></a>【知识点】</h3></blockquote>
<h4 id="1-OOP-指什么？有哪些特性"><a href="#1-OOP-指什么？有哪些特性" class="headerlink" title="1. OOP 指什么？有哪些特性 "></a><strong>1. OOP 指什么？有哪些特性 </strong></h4><p>OOP （Object Oriented Programming）是面向对象编程，是一种计算机编程架构。面向对象语言（C++，Java等）有一个标志，都有类的概念，通过类可以创建多个具有相同属性和方法的对象（类的实例化）。OOP 达到了软件工程的三个主要目标：重用性、灵活性和扩展性。为了实现整体运算，每个对象都能够接收信息、处理数据和向其它对象发送信息。</p>
<a id="more"></a>
<p>OOP的特征：</p>
<ul>
<li><p><strong>封装</strong>：确保组件（数据和功能一起在运行着的计算机程序中形成的单元）不会以不可预期的方式改变其它组件的内部状态；只有在那些提供了内部状态改变方法的组件中，才可以访问其内部状态。每类组件都提供了一个与其它组件联系的接口，并规定了其它组件进行调用的方法。</p>
</li>
<li><p><strong>抽象</strong>：程序有能力忽略正在处理中信息的某些方面，即对信息主要方面关注的能力。</p>
</li>
<li><p><strong>多态</strong>：组件的引用和类集会涉及到其它许多不同类型的组件，而且引用组件所产生的结果依据实际调用的类型。</p>
</li>
<li><p><strong>继承</strong>：允许在现存的组件基础上创建子类组件，这统一并增强了多态性和封装性。典型地来说就是用类来对组件进行分组，而且还可以定义新类为现存的类的扩展，这样就可以将类组织成树形或网状结构，这体现了动作的通用性。</p>
</li>
</ul>
<h4 id="2-如何通过构造函数的方式创建一个拥有属性和方法的对象"><a href="#2-如何通过构造函数的方式创建一个拥有属性和方法的对象" class="headerlink" title="2. 如何通过构造函数的方式创建一个拥有属性和方法的对象?"></a><strong>2. 如何通过构造函数的方式创建一个拥有属性和方法的对象?</strong></h4><p>创建自定义的构造函数，从而定义自定义对象类型的属性和方法，例如下面的构造函数模式：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Student</span>(<span class="params">name,age,score</span>)</span>&#123;</div><div class="line">    <span class="keyword">this</span>.name = name;</div><div class="line">    <span class="keyword">this</span>.age = age;</div><div class="line">    <span class="keyword">this</span>.score = score;</div><div class="line">    <span class="keyword">this</span>.alertScore = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">        alert(<span class="keyword">this</span>.name + <span class="string">':'</span> + <span class="keyword">this</span>.score);</div><div class="line">    &#125;;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>创建一个 <code>Student</code> 的实例，需要使用 <strong>new</strong> 操作符：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> xiaomin = <span class="keyword">new</span> Student(<span class="string">"xiaomin"</span>,<span class="number">20</span>,<span class="number">80</span>);</div><div class="line"><span class="keyword">var</span> gardon = <span class="keyword">new</span> Student(<span class="string">"gardon"</span>,<span class="number">22</span>,<span class="number">75</span>);</div></pre></td></tr></table></figure></p>
<p>用 <code>new</code> 调用构造函数实际上经过了4中步骤：</p>
<ul>
<li>创建一个新对象；</li>
<li>将构造函数的作用域赋给新对象(this指向这个新对象)；</li>
<li>执行构造函数中的代码，将属性和方法添加到这个对象上；</li>
<li>返回新对象</li>
</ul>
<h4 id="3-prototype-是什么？有什么特性"><a href="#3-prototype-是什么？有什么特性" class="headerlink" title="3. prototype 是什么？有什么特性"></a><strong>3. prototype 是什么？有什么特性</strong></h4><p>JavaScript中创建的每一个函数都有一个 <strong>prototype（原型）</strong> 属性，这个属性是一个指针，指向一个原型对象，这个对象拥有一系列属性和方法且能被所有特定类型的实例共享。换而言之 <code>prototype</code> 就是上题中通过调用构造函数创建的那个对象实例(<code>xiaomin</code>)的原型对象。</p>
<p>特性：让特定对象的所有实例共享 <code>prototype</code> (原型对象)包含的属性和方法。不用在构造函数中定义对象实例的信息，而是可以将这些信息直接添加到 <code>prototype</code> 中,如上题中：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Student</span>(<span class="params"></span>)</span>&#123;&#125;;</div><div class="line">Student.prototype.name = <span class="string">"John"</span>;</div><div class="line">Student.prototype.age = <span class="number">18</span>;</div><div class="line">Student.prototype.score = <span class="number">90</span>;</div><div class="line">Student.prototype.alertScore = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    alert(<span class="keyword">this</span>.name + <span class="string">':'</span> + <span class="keyword">this</span>.score);</div><div class="line">&#125;</div><div class="line"><span class="keyword">var</span> xiaomin = <span class="keyword">new</span> Student();<span class="comment">//alert John:90</span></div><div class="line"><span class="built_in">console</span>.log(xiaomin.age);<span class="comment">//console.log 18</span></div><div class="line"><span class="keyword">var</span> gardon = <span class="keyword">new</span> Student();</div><div class="line">gardon.alertScore();</div><div class="line"><span class="built_in">console</span>.log(xiaomin.alertScore === gardon.alertScore);<span class="comment">//true</span></div></pre></td></tr></table></figure></p>
<h4 id="4-画出如下代码的原型图"><a href="#4-画出如下代码的原型图" class="headerlink" title="4. 画出如下代码的原型图"></a><strong>4. 画出如下代码的原型图</strong></h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">People</span> (<span class="params">name</span>)</span>&#123;</div><div class="line">  <span class="keyword">this</span>.name = name;</div><div class="line">  <span class="keyword">this</span>.sayName = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">'my name is:'</span> + <span class="keyword">this</span>.name);</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">People.prototype.walk = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">  <span class="built_in">console</span>.log(<span class="keyword">this</span>.name + <span class="string">' is walking'</span>);  </div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">var</span> p1 = <span class="keyword">new</span> People(<span class="string">'小明'</span>);</div><div class="line"><span class="keyword">var</span> p2 = <span class="keyword">new</span> People(<span class="string">'蓝岚'</span>);</div></pre></td></tr></table></figure>
<p><img src="http://7xrvo9.com1.z0.glb.clouddn.com/2016.0511/%E5%8E%9F%E5%9E%8B%E5%9B%BE2.png" alt=""></p>
<h4 id="5-以下代码中的变量-name-有什么区别"><a href="#5-以下代码中的变量-name-有什么区别" class="headerlink" title="5. 以下代码中的变量 name 有什么区别"></a><strong>5. 以下代码中的变量 name 有什么区别</strong></h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">People</span> (<span class="params"></span>)</span>&#123;</div><div class="line">  <span class="keyword">var</span> name = <span class="string">"小明"</span>            <span class="comment">//定义了一个局部变量name</span></div><div class="line">  <span class="keyword">this</span>.name = <span class="string">"我"</span>;             <span class="comment">//给this所指的对象（多种情况）绑定一个name属性</span></div><div class="line">&#125;</div><div class="line">People.name = <span class="string">"jscode"</span>;         <span class="comment">//给函数People（对象）绑定一个name属性</span></div><div class="line"></div><div class="line">People.prototype.name = <span class="string">"蓝岚"</span>;<span class="comment">//给People的原型对象绑定一个name属性，如果new一个People的实例，这个实例的name属性为“我”，而不是原型对象上的“学前端”</span></div></pre></td></tr></table></figure>
<hr>
<blockquote>
<h3 id="【练习】"><a href="#【练习】" class="headerlink" title="【练习】"></a>【练习】</h3></blockquote>
<h4 id="1-创建一个-Car-对象，拥有属性name、color、status；拥有方法run，stop，getStatus"><a href="#1-创建一个-Car-对象，拥有属性name、color、status；拥有方法run，stop，getStatus" class="headerlink" title="1. 创建一个 Car 对象，拥有属性name、color、status；拥有方法run，stop，getStatus"></a><strong>1. 创建一个 Car 对象，拥有属性name、color、status；拥有方法run，stop，getStatus</strong></h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Car</span>(<span class="params">name,color,status</span>)</span>&#123;</div><div class="line">    <span class="keyword">this</span>.name = name;</div><div class="line">    <span class="keyword">this</span>.color = color;</div><div class="line">    <span class="keyword">this</span>.status = status;</div><div class="line">    <span class="keyword">this</span>.run = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">        <span class="keyword">this</span>.status = <span class="string">"runing"</span>;</div><div class="line">    &#125;;</div><div class="line">    <span class="keyword">this</span>.stop = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">        <span class="keyword">this</span>.status = <span class="string">"stop"</span>;</div><div class="line">    &#125;;</div><div class="line">    <span class="keyword">this</span>.getStatus = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.status;</div><div class="line">    &#125;;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="2-创建一个-GoTop-对象，当-new-一个-GotTop-对象则会在页面上创建一个回到顶部的元素，点击页面滚动到顶部。拥有以下属性和方法"><a href="#2-创建一个-GoTop-对象，当-new-一个-GotTop-对象则会在页面上创建一个回到顶部的元素，点击页面滚动到顶部。拥有以下属性和方法" class="headerlink" title="2. 创建一个 GoTop 对象，当 new 一个 GotTop 对象则会在页面上创建一个回到顶部的元素，点击页面滚动到顶部。拥有以下属性和方法"></a><strong>2. 创建一个 GoTop 对象，当 new 一个 GotTop 对象则会在页面上创建一个回到顶部的元素，点击页面滚动到顶部。拥有以下属性和方法</strong></h4><ul>
<li>ct 属性，GoTop 对应的 DOM 元素的容器</li>
<li>target属性， GoTop 对应的 DOM 元素</li>
<li>bindEvent 方法， 用于绑定事件</li>
<li>createNode 方法， 用于在容器内创建节点</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">GoTop</span>(<span class="params">$ct</span>)</span>&#123;</div><div class="line">    <span class="keyword">this</span>.ct = $ct;</div><div class="line">    <span class="keyword">this</span>.target = $(<span class="string">'&lt;div id="back-top"&gt;Top&lt;/div&gt;'</span>);</div><div class="line">&#125;</div><div class="line">GoTop.prototype.createNode = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="keyword">this</span>.ct.append(<span class="keyword">this</span>.target);</div><div class="line">&#125;;</div><div class="line">GoTop.prototype.bindEvent = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="keyword">this</span>.target.on(<span class="string">'click'</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">        $(<span class="built_in">window</span>).scrollTop(<span class="number">0</span>);</div><div class="line">    &#125;);</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<h4 id="3-使用构造函数创建对象的方式完成轮播功能-demo-，使用如下调用方式"><a href="#3-使用构造函数创建对象的方式完成轮播功能-demo-，使用如下调用方式" class="headerlink" title="3. 使用构造函数创建对象的方式完成轮播功能( demo )，使用如下调用方式"></a><strong>3. 使用构造函数创建对象的方式完成轮播功能( demo )，使用如下调用方式</strong></h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Carousel</span>(<span class="params">$node</span>)</span>&#123;</div><div class="line"><span class="comment">//todo...</span></div><div class="line">&#125;</div><div class="line">Carousel.prototype = &#123;</div><div class="line"><span class="comment">//todo ..</span></div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="keyword">var</span> $node1 = $(<span class="string">'.ct'</span>).eq(<span class="number">0</span>);</div><div class="line"><span class="keyword">var</span> $node2 = $(<span class="string">'.ct'</span>).eq(<span class="number">1</span>);</div><div class="line"><span class="keyword">var</span> carousel1 = <span class="keyword">new</span> Carousel($node1);</div><div class="line"><span class="keyword">var</span> carousel2 = <span class="keyword">new</span> Carousel($node2);</div></pre></td></tr></table></figure>
<ul>
<li><p><a href="http://febox.applinzi.com/task35/task35-1.html" target="_blank" rel="external">效果预览</a></p>
</li>
<li><p><a href="https://github.com/licao404/landemo/blob/master/task35/task35-1.html" target="_blank" rel="external">实现代码</a></p>
</li>
</ul>
<h4 id="4-使用构造函数创建对象的方式实现-Tab-切换功能"><a href="#4-使用构造函数创建对象的方式实现-Tab-切换功能" class="headerlink" title="4. 使用构造函数创建对象的方式实现 Tab 切换功能"></a><strong>4. 使用构造函数创建对象的方式实现 Tab 切换功能</strong></h4><ul>
<li><p><a href="http://febox.applinzi.com/task35/task35-2.html" target="_blank" rel="external">效果预览</a></p>
</li>
<li><p><a href="https://github.com/licao404/landemo/blob/master/task35/task35-2.html" target="_blank" rel="external">实现代码</a></p>
</li>
</ul>
<hr>
]]></content>
      
        <categories>
            
            <category> 编程学习 </category>
            
            <category> 前端基础 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> JavaScript </tag>
            
            <tag> OOP </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[了解 HTTP]]></title>
      <url>http://licao404.com/2016/05/07/%E4%BA%86%E8%A7%A3-HTTP/</url>
      <content type="html"><![CDATA[<p><img src="http://7xrvo9.com1.z0.glb.clouddn.com/2016.0507/macbook-926558.jpg" alt=""></p>
<blockquote>
<h4 id="OSI-七层模型指什么？"><a href="#OSI-七层模型指什么？" class="headerlink" title="OSI 七层模型指什么？"></a><strong>OSI 七层模型指什么？</strong></h4></blockquote>
<p>OSI（Open System Interconnection）七层模型是国际标准化组织（ISO）制定的一个用于计算机或通信系统间互联的标准体系，它是一个七层的、抽象的模型，不仅包括一系列抽象的术语或概念，也包括具体的协议。</p>
<a id="more"></a>
<ul>
<li><p><strong>应用层</strong> (Application)：，OSI 参考模型中的最高层；网络服务与最终用户的一个接口。各种应用程序协议，HTTP,FTP,TFTP,SMTP,SNMP,DNS,POP3;</p>
</li>
<li><p><strong>表示层</strong>（Presentation Layer）：OSI 参考模型中的第六层；数据的表示、安全、压缩。在表示层，数据将按照网络能理解的方案进行格式化，这种格式化也因所使用网络的类型不同而不同；表示层管理数据的解密与加密，如系统口令的处理；除此之外，表示层协议还对图片和文件格式信息进行解码和编码。</p>
</li>
<li><p><strong>会话层</strong>（Session Layer）：OSI 参考模型中的第五层；负责在网络中的两节点之间建立、维持和终止通信。 会话层的功能包括：建立通信链接，保持会话过程通信链接的畅通，同步两个节点之间的对话，决定通信是否被中断以及通信中断时决定从何处重新发送。</p>
</li>
<li><p><strong>传输层</strong>（Transport）：OSI 参考模型的第四层；定义传输数据的协议端口号，以及流控和差错效验。协议有：<code>TCP</code> 、<code>UDP</code>，数据包一旦离开网卡即进入网络传输层；</p>
</li>
<li><p><strong>网络层</strong>（Network）：OSI 参考模型的第三层；进行逻辑地址寻址，实现不同网络之间的路径选择。协议有：<code>ICMP</code> 、<code>IGMP</code> 、<code>IP（IPV4 IPV6）</code> 、 <code>ARP</code> 、<code>RARP</code>；</p>
</li>
<li><p><strong>数据链路层</strong> (Link) ：OSI 参考模型的第二层；建立逻辑连接、进行硬件地址寻址、差错校验等功能。（由底层网络定义协议）<br>将比特组合成字节进而组合成帧，用MAC地址访问介质，错误发现但不能纠正；</p>
</li>
<li><p><strong>物理层</strong>（Physical Layer）：OSI 参考模型的最低层；该层包括物理连网媒介，如电缆连线连接器。物理层的协议产生并检测电压以便发送和接收携带数据的信号。用户要传递信息就要利用一些物理媒体，如双绞线、同轴电缆等，但具体的物理媒体并不在OSI的7层之内，有人把物理媒体当做第0层，物理层的任务就是为它的上一层提供一个物理连接，以及它们的机械、电气、功能和规程特性。</p>
</li>
</ul>
<blockquote>
<h4 id="HTTP-的工作原理是什么？"><a href="#HTTP-的工作原理是什么？" class="headerlink" title="HTTP 的工作原理是什么？"></a><strong>HTTP 的工作原理是什么？</strong></h4></blockquote>
<p>HTTP协议（超文本传输协议）定义了Web客户端如何从Web服务器请求Web页面，以及服务器如何将Web页面传送给客户端。HTTP协议采用了请求/响应模型。客户端向服务器端发送一个请求报文（包含请求方法、URL、协议版本、请求头部和请求数据）。服务器端以一个状态作为响应（包括协议的版本、成功或错误代码、服务器信息、响应头和响应数据）。断开连接。HTTP是一种无状态协议。</p>
<blockquote>
<h4 id="URI-的格式是什么？常见的协议有哪些？"><a href="#URI-的格式是什么？常见的协议有哪些？" class="headerlink" title="URI 的格式是什么？常见的协议有哪些？"></a><strong>URI 的格式是什么？常见的协议有哪些？</strong></h4></blockquote>
<p>URI（统一资源标识符）格式：<strong><code>&lt;scheme&gt;://&lt;user&gt;:&lt;password&gt;@&lt;host&gt;:&lt;port&gt;/&lt;path&gt;;&lt;params&gt;?&lt;query&gt;#&lt;hash&gt;</code></strong></p>
<ul>
<li><p><strong><code>&lt;scheme&gt;</code></strong> : 协议名，可能为 <code>HTTP</code>(默认端口80)、<code>HTTPS</code>(默认端口443)、<code>FTP</code>(默认端口21)、<code>SSH</code>(默认端口22)、<code>SMTP</code>(默认端口25)、<code>IMAP</code>(默认端口143)等；</p>
</li>
<li><p><strong><code>&lt;user&gt;</code></strong> : 用户名，HTTP 协议中不常见，SSH 协议一般是必须的；</p>
</li>
<li><p><strong><code>&lt;password&gt;</code></strong> : 密码，现在一般不会用明文的方式将密码写在 URI 上；</p>
</li>
<li><p><strong><code>&lt;host&gt;</code></strong> : 主机地址，域名或者 IP ，用于确定要连接的对象的地址；</p>
</li>
<li><p><strong><code>&lt;port&gt;</code></strong> : 端口号，用来区分主机上的进程，以便精确定位要连接的服务；</p>
</li>
<li><p><strong><code>&lt;path&gt;</code></strong> : 资源路径，用来确认资源存放的位置；</p>
</li>
<li><p><strong><code>&lt;params&gt;</code></strong> : 参数，以键值对的形式提供，以 <code>;</code> 分隔开。在例如 ftp 协议中可用于规定文件是以二进制形式还是文本形式传输。</p>
</li>
<li><p><strong><code>&lt;query&gt;</code></strong> : 查询字符串，<code>GET</code>请求传递参数；</p>
</li>
<li><p><strong><code>&lt;hash&gt;</code></strong> : 片段，定位文档位置；</p>
</li>
</ul>
<blockquote>
<h4 id="HTTP-协议有几种和服务器交互的方法"><a href="#HTTP-协议有几种和服务器交互的方法" class="headerlink" title="HTTP 协议有几种和服务器交互的方法"></a><strong>HTTP 协议有几种和服务器交互的方法</strong></h4></blockquote>
<ul>
<li><p><strong>GET</strong> : 请求服务器资源；</p>
</li>
<li><p><strong>POST</strong> : 向服务器发送数据，比如发送表单数据；</p>
</li>
<li><p><strong>HEAD</strong> : 请求服务器资源，但是服务器的响应中没有资源的body，只有资源的基本信息。可以用来获取资源元信息，通过状态吗查看资源是否存在，以及测试资源是否被修改；</p>
</li>
<li><p><strong>TRACE</strong> : 远程诊断服务器；</p>
</li>
<li><p><strong>PUT</strong> : 向服务器写入资源。让服务器用请求的主体部分创建一个请求 URL 命名的文档，如果存在就替换。出于安全原因，并不是所有的服务器都实现这个方法；</p>
</li>
<li><p><strong>DELETE</strong> : 删除服务器上的请求的资源。出于安全原因，服务器可能会不支持这个方法；</p>
</li>
<li><p><strong>OPTIONS</strong> : 询问服务器可以执行哪些方法；</p>
</li>
<li><p><strong>CONNECT</strong> : 用于代理进行传输，如使用SSL；</p>
</li>
<li><p>……</p>
</li>
</ul>
<blockquote>
<h4 id="状态码-200，301，-304，403-404-500，503-分别代表什么意思"><a href="#状态码-200，301，-304，403-404-500，503-分别代表什么意思" class="headerlink" title="状态码 200，301， 304，403, 404, 500，503 分别代表什么意思"></a><strong>状态码 200，301， 304，403, 404, 500，503 分别代表什么意思</strong></h4></blockquote>
<ul>
<li><p><strong>200 : OK</strong>  这是我们最想看到的状态码。服务器已经成功处理客户端发来的请求。由于和服务器交互方法的不同，返回的信息有所不同：使用 GET 方法时，对应请求资源的实体会随着状态码一起作为响应返回；而使用 HEAD 方法时，在响应中只返回首部，不会返回实体的主体部分；</p>
</li>
<li><p><strong>301 : Moved Permanently</strong>  永久性重定向。请求的资源已被分配新的URI，以后应使用资源现在所指的URI；</p>
</li>
<li><p><strong>304 : Not Modified</strong>  如果客户端发送了一个带条件的 GET 请求且该请求已被允许，而文档的内容（自上次访问以来或者根据请求的条件）并没有改变，则服务器应当返回这个状态码。304响应禁止包含消息体，因此始终以消息头后的第一个空行结尾;</p>
</li>
<li><p><strong>403 : Forbidden</strong> 服务器已经理解请求，但是拒绝执行它。这个请求不应该被重复提交,如果这不是一个 HEAD 请求，而且服务器希望能够讲清楚为何请求不能被执行，那么就应该在实体内描述拒绝的原因。当然服务器也可以返回一个404响应，假如它不希望让客户端获得任何信息;</p>
</li>
<li><p><strong>404 : Not Found</strong> 请求失败，请求所希望得到的资源未被在服务器上发现。404这个状态码被广泛应用于当服务器不想揭示到底为何请求被拒绝或者没有其他适合的响应可用的情况下。出现这个错误的最有可能的原因是服务器端没有这个页面。</p>
</li>
<li><p><strong>500 : Internal Server Error</strong> 服务器遇到了一个未曾预料的状况，导致了它无法完成对请求的处理。一般来说，这个问题都会在服务器端的源代码出现错误时出现。</p>
</li>
<li><p><strong>503 : Service Unavailable</strong> 由于临时的服务器维护或者 <strong>过载</strong>，服务器当前无法处理请求。这个状况是临时的，并且将在一段时间以后恢复。如果能够预计延迟时间，那么响应中可以包含一个 Retry-After 头用以标明这个延迟时间。如果没有给出这个 Retry-After 信息，那么客户端应当以处理500响应的方式处理它。</p>
</li>
</ul>
<blockquote>
<h4 id="报文有哪几部分组成？"><a href="#报文有哪几部分组成？" class="headerlink" title="报文有哪几部分组成？"></a><strong>报文有哪几部分组成？</strong></h4></blockquote>
<p>HTTP 报文是在 HTTP 应用程序之间发送的数据块。这些数据块以一些文本形式的 <strong>元信息</strong> 开头，描述报文的内容及含义，后面跟着可选的数据部分。<br>HTTP 报文由三部分组成：</p>
<ul>
<li>起始行（start line）：对报文进行描述；</li>
<li>首部 （header）：包含属性；</li>
<li>主体（body）：包含可选的数据；</li>
</ul>
<blockquote>
<h4 id="请求头的格式和作用是什么？给个范例截图说明"><a href="#请求头的格式和作用是什么？给个范例截图说明" class="headerlink" title="请求头的格式和作用是什么？给个范例截图说明"></a><strong>请求头的格式和作用是什么？给个范例截图说明</strong></h4></blockquote>
<p>随便打开一个网页，在开发者工具的 <code>NetWork</code> 中查看 <code>Request Headers</code> ，格式如下：</p>
<p><img src="http://7xr868.com1.z0.glb.clouddn.com/task34/RequestHeaders.png" alt=""><br>其中包含 <strong>请求方法</strong> 、 <strong>请求URI地址</strong>、 <strong>协议版本</strong>，很明显截图中的请求方法为 <code>GET</code>，请求地址为 <code>/categories</code>，协议及其版本为 <code>HTTP/1.1</code>;</p>
<p>查看 <code>Response Headers</code>，格式如下：</p>
<p><img src="http://7xr868.com1.z0.glb.clouddn.com/task34/ResponseHeaders.png" alt=""><br>其中包含 <strong>协议版本</strong> 、 <strong>状态码</strong>、 <strong>原因短语</strong>，很明显截图中的协议及其版本为 <code>HTTP/1.1</code>，状态码 <code>301</code>，原因短语是 <code>Moved Permanently</code>；</p>
<blockquote>
<h4 id="首部的格式和作用是什么？给个范例截图说明"><a href="#首部的格式和作用是什么？给个范例截图说明" class="headerlink" title="首部的格式和作用是什么？给个范例截图说明"></a><strong>首部的格式和作用是什么？给个范例截图说明</strong></h4></blockquote>
<p><strong><em>HTTP首部字段是构成HTTP报文的要素之一。在客户端与服务器端以HTTP协议进行通信时，无论是请求还是响应都会使用首部字段，它能起到传递额外更多信息的作用。使用首部字段是为了给服务器和浏览器提供报文主体大小、所使用的语言、认证信息等内容。——《图解HTTP》</em></strong></p>
<p>HTTP 首部基本可以分为四类：通用首部、请求首部、响应首部、实体首部。<br>HTTP 首部格式是由首部字段名和首部字段值组成，中间用冒号‘:’分隔，例如 <strong>Content-Type: text/html</strong>,字段值可有多个，例如 <strong>Keep-Alive: timeout=15, max=100</strong> 。</p>
<ul>
<li><p>通用首部：客户端和服务器端都能使用</p>
<blockquote>
<ul>
<li>Cache-Control 控制缓存行为</li>
<li>Connection 逐跳首部、连接的管理</li>
<li>Date 日期，报文创建时间</li>
<li>……</li>
</ul>
</blockquote>
</li>
<li><p>请求首部：从客户端往服务器端发送请求报文中所使用的字段，用于补充请求的附加信息、客户端信息和对响应内容相关的优先级等信息<br><img src="http://7xr868.com1.z0.glb.clouddn.com/task34/%E8%AF%B7%E6%B1%82%E9%A6%96%E9%83%A8%E5%AD%97%E6%AE%B5.png" alt=""><br>例如上图中:</p>
<blockquote>
<ul>
<li>Accept     告诉服务器能够发送那些媒体类型</li>
<li>Accept-Encoding 告诉服务器能够发送那些编码</li>
<li>Accept-Language 告诉服务器能够发送那些语言</li>
<li>Cookie     客户端字符串</li>
<li>Host 接收请求的服务器的主机名和端口号</li>
<li>Referer 提供了包含当前请求URI的文档的URL，告诉服务器自己来源</li>
<li>…..（这里不再列出所有）</li>
</ul>
</blockquote>
</li>
<li><p>响应首部：由服务器端向客户端返回响应报文中所使用的字段，用于补充响应的附加信息、服务器信息以及对客户端的附加要求等信息。<br><img src="http://7xr868.com1.z0.glb.clouddn.com/task34/%E5%93%8D%E5%BA%94%E9%A6%96%E9%83%A8%E5%AD%97%E6%AE%B5.png" alt=""><br>例如上图中:</p>
<blockquote>
<ul>
<li>Content-Encoding 主体编码格式</li>
<li>Content-Type 主体的MIME</li>
<li>ETag 主体的实体标记</li>
<li>Last-Modified 实体最后一次修改时间</li>
<li>Server 服务器应用软件名称和版本</li>
<li>…..（这里不再列出所有）</li>
</ul>
</blockquote>
<ul>
<li>实体首部：针对请求报文和响应报文使用的字段。补充了资源内容，更新时间等和实体相关的信息。</li>
</ul>
</li>
</ul>
<blockquote>
<h4 id="主体的作用是什么？给个范例"><a href="#主体的作用是什么？给个范例" class="headerlink" title="主体的作用是什么？给个范例"></a><strong>主体的作用是什么？给个范例</strong></h4></blockquote>
<p><img src="http://7xr868.com1.z0.glb.clouddn.com/task34/%E4%B8%BB%E4%BD%93.png" alt=""></p>
<ul>
<li>用于包含所请求的数据内容；</li>
<li>包含着返回的 HTML 文件的内容，即全部文本。</li>
</ul>
<blockquote>
<h4 id="简述浏览器缓存是如何控制的"><a href="#简述浏览器缓存是如何控制的" class="headerlink" title="简述浏览器缓存是如何控制的"></a><strong>简述浏览器缓存是如何控制的</strong></h4></blockquote>
<p>缓存有服务器端缓存和客户端缓存（一般指浏览器缓存），这里介绍浏览器缓存机制：</p>
<ul>
<li><strong>HTML Meta</strong> 标签控制缓存:浏览器缓存机制，其实主要就是 HTTP 协议定义的缓存机制（如：<code>Expires</code>； <code>Cache-control</code>等）。但是也有非 HTTP协议定义的缓存机制，如使用 HTML Meta 标签，Web开发者可以在HTML页面的 <code>&lt;head&gt;</code> 节点中加入 <code>&lt;meta&gt;</code> 标签<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"Pragam"</span> <span class="attr">content</span>=<span class="string">"no-cache"</span>&gt;</span></div></pre></td></tr></table></figure>
</li>
</ul>
<p>上述代码的作用是告诉浏览器当前页面不被缓存，每次访问都需要去服务器拉取。使用上很简单，但只有部分浏览器可以支持，而且所有缓存代理服务器都不支持，因为代理不解析HTML内容本身。而广泛应用的还是 HTTP头信息 来控制缓存。</p>
<ul>
<li><p>HTTP 响应首部字段 <strong>Expires</strong>，指明缓存的具体过期日期，来控制资源何时过期。在过期时间以内，若再次发起请求，通常浏览器都不会与服务器进行任何通信，而是直接使用本地副本。不过 Expires 是 HTTP 1.0 的东西，现在默认浏览器均默认使用HTTP 1.1，所以它的作用基本忽略。Expires 的一个缺点就是，返回的到期时间是服务器端的时间，这样存在一个问题，如果客户端的时间与服务器的时间相差很大（比如时钟不同步，或者跨时区），那么误差就很大，所以在HTTP 1.1版开始，使用Cache-Control: max-age=秒替代。</p>
</li>
<li><p><strong>Cache-Control</strong> HTTP 1.1 协议新增的指令，每个资源都可以通过设定 Cache-Control 来建立缓存策略。通常，可为它指定一个   <code>max-age</code> ，表示缓存的最长时间，单位为秒。</p>
<ul>
<li>no-cache，不缓存。</li>
<li>public，可以缓存。</li>
<li>no-store，请求和响应的信息都不应该被存储在对方的磁盘系统中。</li>
<li>must-revalidate，对于客户机的每次请求，代理服务器必须向服务器验证缓存是否过时。</li>
</ul>
</li>
<li><p>控制文件是否有修改 <strong>Last-Modified</strong>/<strong>E-Tag</strong> Last-Modified 表示被请求资源在服务器端的上次修改时间，而 ETag 则是一个唯一文件标识符，每次文件修改后都会生成一个新的 ETag。服务器通过向浏览器发送这两个字段，来告知浏览器其获得的资源的版本。由于 Last-Modified 和 ETag 的作用是相同的（均为向服务器验证资源是否最新），因此只使用一个即可。通常认为 Last-Modified 更好（它和 Expires 不同，由服务器生成，不依赖浏览器端时间）。</p>
</li>
<li><p>……</p>
</li>
</ul>
<blockquote>
<h4 id="下图各个参数是什么意思"><a href="#下图各个参数是什么意思" class="headerlink" title="下图各个参数是什么意思"></a><strong>下图各个参数是什么意思</strong></h4></blockquote>
<p><img src="http://7xpvnv.com2.z0.glb.qiniucdn.com/257149f7-1e11-4262-9b15-159389db83c6" alt=""></p>
<p>1.<strong>General</strong></p>
<ul>
<li>Reques URL : 请求资源所在的位置（资源的URL）；</li>
<li>Request Method : 请求用的是 PUT 方法；</li>
<li>Status Code : 状态码和原因短语是 200 OK，资源请求成功；</li>
<li>Remote Address：远程地址。资源所在 IP 地址。</li>
</ul>
<p>2.<strong>Response Headers</strong></p>
<ul>
<li>Connection：指定连接方式，持久连接；</li>
<li>Content-Length：主体部分的大小，单位是字节；</li>
<li>Content-Type：主体内对象的媒体类型，是 json 文件；</li>
<li>Date：报文创建的日期时间（GMT时间）；</li>
<li>Server：服务器软件版本信息；</li>
<li>X-Powered-By：开发资源的技术；是 Express;</li>
</ul>
<p>3.<strong>Request Headers</strong></p>
<ul>
<li>Accept：能够处理的媒体类型及其相对优先级。<code>*/*</code> 可以处理与请求相符的任意媒体类型;</li>
<li>Accept-Encoding：用户代理支持的内容编码及内容编码的优先级顺序。接受gzip、deflate 和 sdch 格式;</li>
<li>Accept-Language：用户代理能够处理的自然语言集。接受中文;</li>
<li>Cookie：之前从服务器获得的 Cookie 信息。</li>
<li>Host：资源所在的主机;</li>
<li>Origin：资源所在的源。包括主机，协议和端口号;</li>
<li>Referer：服务器请求的原始资源的 URI；</li>
<li>User-Agent：发出请求的客户端（浏览器）信息和用户代理名称；</li>
<li>X-Requested-With：用何种方式请求。这里使用的是 ajax；</li>
</ul>
<hr>
]]></content>
      
        <categories>
            
            <category> 计算机基础 </category>
            
            <category> 计算机网络 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 前后端 </tag>
            
            <tag> Web服务器 </tag>
            
            <tag> HTTP </tag>
            
            <tag> TCP/IP </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[从 URI 到页面呈现]]></title>
      <url>http://licao404.com/2016/05/07/%E4%BB%8EURI%E5%88%B0%E9%A1%B5%E9%9D%A2%E5%91%88%E7%8E%B0/</url>
      <content type="html"><![CDATA[<blockquote class="blockquote-center">前面提及过怎么用一些软件套件在<a href="./2016/04/10/使用XAMPP搭建本地Web服务器/">本地简单搭建 Web 服务器</a>，具体可以参照我的这篇文章 &gt;&gt; <a href="./2016/04/10/使用XAMPP搭建本地Web服务器/">《使用XAMPP搭建本地Web服务器》</a> ，这次我们理一理从从浏览器输入URL到Web页面呈现在我们眼前，它背后发生了什么？这次我们只是简单说说其过程，它涉及了很多计算机网络知识，<a href="http://baike.baidu.com/link?url=v-ZiUCzKEFsKfexauR5g8UA9H7D6ZsX_bD9jtGIUWOA3CafdHGK-p7EMwUHBeTuF92VEnVXh6A2o9yaAMJNywTBZQYuusmr7gPBMw0K91P95WgfPYswXuUJ_DeTe8DK9tBTE5WdUlKtKj8q78VOOwMROvTECRNRBxrCGuypphyy" target="_blank" rel="external">HTTP 协议</a>等，可以留待后续学习深究。</blockquote>

<a id="more"></a>
<blockquote>
<h4 id="简单描述下web-服务器、PHP、数据库、浏览器是如何实现动态网站的"><a href="#简单描述下web-服务器、PHP、数据库、浏览器是如何实现动态网站的" class="headerlink" title="简单描述下web 服务器、PHP、数据库、浏览器是如何实现动态网站的?"></a><strong>简单描述下web 服务器、PHP、数据库、浏览器是如何实现动态网站的?</strong></h4></blockquote>
<ol>
<li><p>客户端（浏览器）根据用户输入的<code>URL</code>，寻找<code>DNS</code>服务器将其解析为对应的Web服务器的<code>IP</code>地址，返回给浏览器；</p>
</li>
<li><p>浏览器打包<code>Http</code>请求，通过<code>TCP</code>协议连接前一步返回的IP所对应的Web服务器，通过默认的<code>80</code>端口请求Web服务器上相应目录下的动态语言文件（如index.php）;</p>
</li>
<li><p>Web服务器将用户请求的php文件交给php应用服务器处理（Web服务器本身不能处理php动态语言文件）；</p>
</li>
<li><p>php应用服务器接收、打开并解释php文件，在php文件中通过对数据库的连接代码连接本机或其他机器上的<code>MySQL</code>数据库，在php中执行<code>SQL</code>查询语句获得数据，php应用服务器将获得的数据生成<code>html</code>静态代码；</p>
</li>
<li><p>php应用服务器将生成的<code>html</code>静态代码返回<code>Web</code>服务器，<code>Web</code>服务器通过<code>TCP</code>协议将<code>html</code>静态代码传给浏览器；</p>
</li>
<li><p>浏览器解析接收到的代码，开始渲染页面并呈献给用户。</p>
</li>
</ol>
<blockquote>
<h4 id="常见的-WEB-服务器有哪些？"><a href="#常见的-WEB-服务器有哪些？" class="headerlink" title="常见的 WEB 服务器有哪些？"></a><strong>常见的 WEB 服务器有哪些？</strong></h4></blockquote>
<p><strong>Linux/Unix平台</strong></p>
<ul>
<li><p>Apache：<br>使用最多的Web服务器，几乎可以运行在所有计算机平台，开源免费。简单、速度快、性能稳定，并可做代理服务器来使用。</p>
</li>
<li><p>Nginx：小型高效，支持正向和反向代理等；</p>
</li>
</ul>
<ul>
<li>……</li>
</ul>
<p><strong>Windows平台</strong></p>
<ul>
<li>IIS：微软主推的Web服务器，IIS提供了一个图形界面的管理工具，称为Internet服务管理器，可用于监视配置和控制Internet服务。</li>
</ul>
<blockquote>
<h4 id="打开浏览器，在地址栏输入-http-baidu-com-页面展现了饥人谷官网的信息，整个过程发生了什么？（饥人谷官网后台语言-php-web服务器-nginx，数据库-mysql）"><a href="#打开浏览器，在地址栏输入-http-baidu-com-页面展现了饥人谷官网的信息，整个过程发生了什么？（饥人谷官网后台语言-php-web服务器-nginx，数据库-mysql）" class="headerlink" title="打开浏览器，在地址栏输入 http://baidu.com 页面展现了饥人谷官网的信息，整个过程发生了什么？（饥人谷官网后台语言 php,web服务器 nginx，数据库 mysql）"></a><strong>打开浏览器，在地址栏输入 <code>http://baidu.com</code> 页面展现了饥人谷官网的信息，整个过程发生了什么？（饥人谷官网后台语言 php,web服务器 nginx，数据库 mysql）</strong></h4></blockquote>
<ol>
<li><p>通过域名（URL）查询<code>nginx</code>服务器对应的IP地址（DNS解析）：</p>
<ul>
<li>查浏览器缓存，看是否有缓存的DNS,有的话就可以直接使用；</li>
<li>查系统缓存，如果浏览器缓存无记录，浏览器调用系统中的缓存记录；</li>
<li>查路由器缓存，如果系统中无缓存，进一步查询路由器缓存；</li>
<li>ISP缓存，如果路由器中无缓存，进一步查询ISP；</li>
<li>递归搜索，如果ISP缓存里仍然查不到，就会从顶级域名服务器的根域名服务器开始递归查询，一定可以查到；</li>
</ul>
</li>
<li><p>上一步查到的IP地址<code>121.40.201.213</code>,浏览器打包<code>http</code>请求（服务器所需要的一些信息）,如下图：<br><img src="http://7xr868.com1.z0.glb.clouddn.com/task23/http%E8%AF%B7%E6%B1%82.png" alt=""></p>
</li>
<li><p>通过<code>TCP</code>协议与<code>nginx</code>服务器创建连接（<a href="http://www.jellythink.com/archives/705" target="_blank" rel="external">三次握手</a>保证通信可靠性），然后浏览器向服务器发送请求；</p>
</li>
<li><p><code>nginx</code>服务器处理浏览器发来的请求，由于后台语言是<code>php</code>，则将请求交给php应用服务器；</p>
</li>
<li><p>php应用服务器接收、打开并解释php文件，在php文件中通过对数据库的连接代码连接本机或其他机器上的<code>MySQL</code>数据库，在php中执行<code>SQL</code>查询语句获得数据，php应用服务器将获得的数据生成html静态代码；</p>
</li>
<li><p>php应用服务器将生成的html静态代码返回<code>nginx</code>服务器，<code>nginx</code>服务器通过TCP协议将html静态代码传给浏览器，如下是响应头：<br><img src="http://7xr868.com1.z0.glb.clouddn.com/task23/http%E5%93%8D%E5%BA%94.png" alt=""></p>
</li>
<li><p>浏览器接收响应内容，浏览器开始下载并同时渲染内容，顺序都是从上到下，遇到JavaScript就先下载JavaScript，解析完JavaScript再继续进行其他；具体渲染过程如下：</p>
<ul>
<li>解析<code>HTML</code>生成<code>DOM</code>树；</li>
<li>解析<code>CSS</code>生成<code>CSSOM</code>树；</li>
<li>组合<code>DOM</code>和<code>CSSOM</code>生成渲染树；</li>
<li>遇到<code>JavaScript</code>解析JavaScript，阻塞后面的解析和渲染；</li>
<li>最后通过调用操作系统<code>Native GUI</code>的<code>API</code>进行页面绘制，呈现在用户面前。</li>
</ul>
<hr>
</li>
</ol>
]]></content>
      
        <categories>
            
            <category> 计算机基础 </category>
            
            <category> 计算机网络 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 前后端 </tag>
            
            <tag> Web服务器 </tag>
            
            <tag> HTTP </tag>
            
            <tag> TCP/IP </tag>
            
            <tag> php </tag>
            
            <tag> Apache </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[关于 "this" 二三事]]></title>
      <url>http://licao404.com/2016/05/04/%E5%85%B3%E4%BA%8E-this-%E4%BA%8C%E4%B8%89%E4%BA%8B/</url>
      <content type="html"><![CDATA[<blockquote>
<h3 id="【知识点】"><a href="#【知识点】" class="headerlink" title="【知识点】"></a>【知识点】</h3></blockquote>
<h4 id="apply、call-有什么作用，什么区别？"><a href="#apply、call-有什么作用，什么区别？" class="headerlink" title=" apply、call 有什么作用，什么区别？"></a><strong> apply、call 有什么作用，什么区别？</strong></h4><ul>
<li><code>call</code> 和 <code>apply</code> 都是 <code>Function.prototype</code> 的方法，即每个 <code>Function</code> 对象的实例（function定义的每个方法）都有这两个方法。<blockquote>
<p>二者的作用完全一样，都是用来<strong>动态改变某个函数运行时上下文</strong>（重新定义函数的执行环境），也就是函数内部 <code>this</code> 的指向。</p>
</blockquote>
</li>
</ul>
<a id="more"></a>
<ul>
<li><p><code>call</code> 和 <code>apply</code> 的区别仅仅是在参数定义的方式不太一样,具体表现为：</p>
<blockquote>
<p><code>call</code> 和 <code>apply</code> 方法的第一个参数都是要传入给当前对象的对象，或者是 <code>this</code> ;后面的参数都是传递给当前对象的参数，<code>call</code> 需要把参数按照顺序放进去，而 <code>apply</code> 则是把参数放在数组里;</p>
</blockquote>
</li>
<li><p>如下面的一个小例子，体现了这两个函数的共同作用：改变函数内部 <code>this</code> 的指向。又可以看到细微差别，变量传入方式的不同。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> animal = &#123;</div><div class="line">	<span class="attr">name</span>: <span class="string">'tiger'</span>,</div><div class="line">	<span class="attr">food</span>: <span class="string">'meat'</span>,</div><div class="line">	<span class="attr">fn</span>: <span class="function"><span class="keyword">function</span> (<span class="params">name,food</span>) </span>&#123;</div><div class="line">		 <span class="keyword">this</span>.name = name; </div><div class="line">		 <span class="keyword">this</span>.food = food;</div><div class="line">		 <span class="built_in">console</span>.log(<span class="keyword">this</span>);</div><div class="line">	&#125;</div><div class="line">&#125;;</div><div class="line"></div><div class="line">fn.call(animal,<span class="string">'sheep'</span>,<span class="string">'grass'</span>); <span class="comment">//Object &#123;name: "sheep", food: "grass"&#125;</span></div><div class="line">fn.apply(animal,[<span class="string">'panda'</span>,<span class="string">'bamboo'</span>]); <span class="comment">//Object &#123;name: "panda", food: "bamboo"&#125;</span></div></pre></td></tr></table></figure>
</li>
</ul>
<hr>
<blockquote>
<h3 id="【练习】"><a href="#【练习】" class="headerlink" title="【练习】"></a>【练习】</h3></blockquote>
<h4 id="1-以下代码输出什么"><a href="#1-以下代码输出什么" class="headerlink" title="1. 以下代码输出什么?"></a><strong>1. 以下代码输出什么?</strong></h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> john = &#123; </div><div class="line">  <span class="attr">firstName</span>: <span class="string">"John"</span> </div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">func</span>(<span class="params"></span>) </span>&#123; </div><div class="line">  alert(<span class="keyword">this</span>.firstName + <span class="string">": hi!"</span>)</div><div class="line">&#125;</div><div class="line">john.sayHi = func</div><div class="line">john.sayHi() <span class="comment">//alert出 John:hi!</span></div></pre></td></tr></table></figure>
<ul>
<li>输出：<code>John:hi!</code></li>
<li>解析：<code>john.sayHi()</code> 这样写就是对象 <code>john</code> 调用了函数 <code>func()</code>（或者说将函数 <code>func()</code> 绑定在对象 <code>john</code> 上）。函数 <code>func()</code> 内部的 <code>this</code> 指向的就是对象 <code>john</code>。</li>
</ul>
<h4 id="2-下面代码输出什么，为什么"><a href="#2-下面代码输出什么，为什么" class="headerlink" title="2. 下面代码输出什么，为什么"></a><strong>2. 下面代码输出什么，为什么</strong></h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">func() </div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">func</span>(<span class="params"></span>) </span>&#123; </div><div class="line">  alert(<span class="keyword">this</span>)</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>输出：<code>Winsow</code>对象</li>
<li>解析：直接 <code>func()</code> 这样写就是 <code>Winsow</code> 对象调用了函数 <code>func()</code>（或者说此时函数 <code>func()</code> 的执行环境是在全局环境下）。函数 <code>func()</code> 内部的 <code>this</code> 指向的就是对象 <code>Winsow</code>。</li>
</ul>
<h4 id="3-以下代码输出什么"><a href="#3-以下代码输出什么" class="headerlink" title="3. 以下代码输出什么?"></a><strong>3. 以下代码输出什么?</strong></h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn0</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params"></span>)</span>&#123;</div><div class="line">        <span class="built_in">console</span>.log(<span class="keyword">this</span>);</div><div class="line">    &#125;</div><div class="line">    fn();</div><div class="line">&#125;</div><div class="line"></div><div class="line">fn0();</div></pre></td></tr></table></figure>
<ul>
<li>输出：<code>Winsow</code> 对象</li>
<li>解析：追本溯源还是 <code>Winsow</code> 对象调用了 <code>fn()</code>;</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">document</span>.addEventListener(<span class="string">'click'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>);</div><div class="line">    setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">        <span class="built_in">console</span>.log(<span class="keyword">this</span>);</div><div class="line">    &#125;, <span class="number">200</span>);</div><div class="line">&#125;, <span class="literal">false</span>);</div></pre></td></tr></table></figure>
<ul>
<li>输出：<code>document</code> 文档对象 , <code>Winsow</code> 对象</li>
<li>解析：因为clik事件绑定在 document 上，<code>this</code> 指向 document 文档对象;延时器的执行环境都是全局的，<code>this</code> 指向 window</li>
</ul>
<h4 id="4-下面代码输出什么，为什么"><a href="#4-下面代码输出什么，为什么" class="headerlink" title="4. 下面代码输出什么，为什么"></a><strong>4. 下面代码输出什么，为什么</strong></h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">obj = &#123;</div><div class="line">  <span class="attr">go</span>: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123; alert(<span class="keyword">this</span>) &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">obj.go(); <span class="comment">//输出 obj 对象，obj 对象调用了函数 go();</span></div><div class="line"></div><div class="line">(obj.go)(); <span class="comment">//输出 obj 对象，立即执行函数写法，还是 obj 对象调用了函数 go();</span></div><div class="line"></div><div class="line">(a = obj.go)(); <span class="comment">//输出 Window 对象，a 是一个全局变量，函数赋值给一个全局变量，a() 执行时依赖的就是全局环境;</span></div><div class="line"></div><div class="line">(<span class="number">0</span> || obj.go)(); <span class="comment">//输出 Window 对象，(0 || obj.go) 就是 (obj.go)，所以(obj.go)()，调用它的仍然是全局对象;</span></div></pre></td></tr></table></figure>
<h4 id="5-下面代码输出什么，为什么"><a href="#5-下面代码输出什么，为什么" class="headerlink" title="5. 下面代码输出什么，为什么"></a><strong>5. 下面代码输出什么，为什么</strong></h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> john = &#123; </div><div class="line">  <span class="attr">firstName</span>: <span class="string">"John"</span> </div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">func</span>(<span class="params"></span>) </span>&#123; </div><div class="line">  alert( <span class="keyword">this</span>.firstName )</div><div class="line">&#125;</div><div class="line">func.call(john)</div></pre></td></tr></table></figure>
<ul>
<li>输出：<code>John</code> </li>
<li>解析：<code>call</code> 函数的用法：只有一个参数，指定 <code>func()</code> 函数内部 <code>this</code> 指向 <code>john</code> 对象.</li>
</ul>
<h4 id="6-下面代码输出什么，为什么"><a href="#6-下面代码输出什么，为什么" class="headerlink" title="6. 下面代码输出什么，为什么"></a><strong>6. 下面代码输出什么，为什么</strong></h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> john = &#123; </div><div class="line">  <span class="attr">firstName</span>: <span class="string">"John"</span>,</div><div class="line">  <span class="attr">surname</span>: <span class="string">"Smith"</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">func</span>(<span class="params">a, b</span>) </span>&#123; </div><div class="line">  alert( <span class="keyword">this</span>[a] + <span class="string">' '</span> + <span class="keyword">this</span>[b] )</div><div class="line">&#125;</div><div class="line">func.call(john, <span class="string">'firstName'</span>, <span class="string">'surname'</span>)</div></pre></td></tr></table></figure>
<ul>
<li>输出：<code>John Smith</code> </li>
<li>解析：<code>call</code> 函数的用法：第一个参数指定 <code>func()</code> 函数内部 <code>this</code> 指向 <code>john</code> 对象,后面的参数按顺序传入。</li>
</ul>
<h4 id="7-以下代码有什么问题，如何修改"><a href="#7-以下代码有什么问题，如何修改" class="headerlink" title="7. 以下代码有什么问题，如何修改"></a><strong>7. 以下代码有什么问题，如何修改</strong></h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> <span class="built_in">module</span>= &#123;</div><div class="line">  <span class="keyword">var</span> self = <span class="keyword">this</span>;  <span class="comment">//4. 这里先保存 this 的值，使其指向对象 module</span></div><div class="line">  bind: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    $btn.on(<span class="string">'click'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">      <span class="built_in">console</span>.log(<span class="keyword">this</span>) <span class="comment">//1. this指向的是 $btn ,因为 $btn 绑定了事件处理函数</span></div><div class="line">      <span class="keyword">this</span>.showMsg(); <span class="comment">//2. 因为 this 指向的是 $btn, $btn上怎么会有showMsg()呢，显然只有 module 上有</span></div><div class="line">      <span class="comment">//3. 所以这里需要在之前保存下this值，改为</span></div><div class="line">      self.showMsg();</div><div class="line">    &#125;)</div><div class="line">  &#125;,</div><div class="line">  </div><div class="line">  <span class="attr">showMsg</span>: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">'饥人谷'</span>);</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
      
        <categories>
            
            <category> 编程学习 </category>
            
            <category> 前端基础 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> JavaScript </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[同源策略&跨域请求]]></title>
      <url>http://licao404.com/2016/04/28/%E5%90%8C%E6%BA%90%E7%AD%96%E7%95%A5-%E8%B7%A8%E5%9F%9F%E8%AF%B7%E6%B1%82/</url>
      <content type="html"><![CDATA[<blockquote>
<h3 id="【知识点】"><a href="#【知识点】" class="headerlink" title="【知识点】"></a>【知识点】</h3></blockquote>
<h4 id="1-什么是同源策略？"><a href="#1-什么是同源策略？" class="headerlink" title="1. 什么是同源策略？"></a><strong>1. 什么是同源策略？</strong></h4><p>同源策略是浏览器最核心也是最基本的安全的功能。所谓同源，指的是协议、域名、端口号都相同，不同源的客户脚本（JavaScript）在没有明确授权的情况下，只能读写本域下的资源，不能读写对方的资源；</p>
<h4 id="2-什么是跨域？跨域有几种实现形式？"><a href="#2-什么是跨域？跨域有几种实现形式？" class="headerlink" title="2. 什么是跨域？跨域有几种实现形式？"></a><strong>2. 什么是跨域？跨域有几种实现形式？</strong></h4><p>跨域是指突破JavaScript同源策略的限制，<code>a.com</code> 域名下的 <code>js</code> 可以操作 <code>b.com</code> 或者 <code>child.a.com</code> 下的对象中的数据。<br><a id="more"></a></p>
<p>实现形式：</p>
<ul>
<li><p>降域（最简单形式）；对于主域相同子域不同（<code>http://www.a.com/</code> ，<code>http://child.a.com</code>）的情况，可以同时设置两个域名下 html 文件(<code>index1.html</code> ， <code>index2.html</code>) <code>document.domain = a.com</code> ,然后在 <code>index1.html</code> 中创建一个 <code>iframe</code>,去控制 <code>iframe</code> 的 <code>contentDocument</code>，这样就实现了不同子域的跨域。<code>iframe</code> 和 <code>相同主域</code> 是其限制条件；</p>
</li>
<li><p>JSONP 跨域：由于直接用 <code>XMLHttpRequest</code> 请求不同域上的数据是不可以的。这种方式主要是通过动态插入一个 <code>script</code> 标签。浏览器对 <code>script</code>的资源引用没有同源限制，同时资源加载到页面后会立即执行（没有阻塞的情况下）。</p>
</li>
<li><p>CORS（Cross-Origin Resource Sharing）：跨域资源共享，IE需要10以上。</p>
</li>
<li><p>HTML5 postMessage</p>
</li>
<li><p><a href="http://www.cnblogs.com/zichi/p/4620656.html" target="_blank" rel="external">window.name</a></p>
</li>
<li><p><a href="http://www.cnblogs.com/zichi/p/4621963.html?utm_source=tuicool&amp;utm_medium=referral" target="_blank" rel="external">hash</a></p>
</li>
</ul>
<h4 id="3-jsonp-的原理是什么？"><a href="#3-jsonp-的原理是什么？" class="headerlink" title="3. jsonp 的原理是什么？"></a><strong>3. jsonp 的原理是什么？</strong></h4><p>由于直接用 <code>XMLHttpRequest</code> 请求不同域上的数据是不可以的。这种方式主要是通过动态插入一个 <code>script</code> 标签。浏览器对 <code>script</code>的资源引用没有同源限制，同时资源加载到页面后会立即执行（没有阻塞的情况下）</p>
<p>举个栗子说明：<br><code>a.com</code> 域名下的 <code>index.html</code> 文件<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">'http://libs.baidu.com/jquery/2.0.0/jquery.min.js'</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="javascript"></span></div><div class="line">  <span class="comment">// jsonp跨域</span></div><div class="line">    <span class="function"><span class="keyword">function</span> <span class="title">callback</span>(<span class="params">json</span>) </span>&#123;</div><div class="line">      <span class="built_in">console</span>.log(json);</div><div class="line">    &#125;</div><div class="line">    <span class="comment">//动态创建一个script标签</span></div><div class="line">    <span class="keyword">var</span> s = <span class="built_in">document</span>.createElement(<span class="string">'script'</span>);</div><div class="line">    <span class="comment">//把a.json的URL赋给它</span></div><div class="line">    s.src = <span class="string">'http://b.com/a.js'</span>;</div><div class="line">    <span class="comment">//把这个script标签插入dom里</span></div><div class="line">    <span class="built_in">document</span>.body.appendChild(s);</div><div class="line">  <span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>由于 <code>jQuery</code> 将 jsonp 封装在了 ajax 方法中，上面也可以写为：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">'http://libs.baidu.com/jquery/2.0.0/jquery.min.js'</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="javascript"></span></div><div class="line">	  $.ajax(&#123;</div><div class="line">	    <span class="attr">url</span>: <span class="string">'http://b.com/a.js'</span>,</div><div class="line">	    <span class="attr">dataType</span>: <span class="string">'jsonp'</span>,</div><div class="line">	    <span class="attr">jsonpCallback</span>: <span class="string">'callback'</span>,</div><div class="line">	    <span class="attr">success</span>: <span class="function"><span class="keyword">function</span> (<span class="params">ret</span>) </span>&#123;</div><div class="line">	      <span class="built_in">console</span>.log(ret);</div><div class="line">	    &#125;</div><div class="line">	  &#125;);</div><div class="line">  <span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p><code>b.com</code> 域名下的 <code>a.js</code> 文件<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">callback(&#123;</div><div class="line">  <span class="string">"name"</span>: <span class="string">"aaa"</span>,</div><div class="line">  <span class="string">"age"</span>: <span class="number">20</span></div><div class="line">&#125;);</div></pre></td></tr></table></figure></p>
<p>正常情况下是不能访问的，会报跨域错误，这里用到了 <code>jsonp</code> ，实现了跨域访问 <code>a.js</code> ,得到了 <code>b.com</code> 下的数据:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Object &#123;name: &quot;aaa&quot;, age: 20&#125;</div></pre></td></tr></table></figure></p>
<p>需要注意的是 jsonp 是 get 形式的，无法使用 post，承载的信息量有限，信息量较大时请使用更强大的 CORS。</p>
<h4 id="4-CORS是什么？"><a href="#4-CORS是什么？" class="headerlink" title="4. CORS是什么？"></a><strong>4. CORS是什么？</strong></h4><p>CORS 全称是跨域资源共享（Cross-Origin Resource Sharing），是一种 <code>ajax</code> 跨域请求资源的方式，支持现代浏览器，IE支持10以上。<br>实现方式很简单，当你使用 <code>XMLHttpRequest</code> 发送请求时，浏览器发现该请求不符合同源策略，会给该请求加一个请求头：<code>Origin</code>，后台进行一系列处理，如果确定接受请求则在返回结果中加入一个响应头：<code>Access-Control-Allow-Origin</code>; 浏览器判断该相应头中是否包含 <code>Origin</code> 的值，如果有则浏览器会处理响应，我们就可以拿到响应数据，如果不包含浏览器直接驳回，这时我们无法拿到响应数据。所以 <code>CORS</code> 的表象是让你觉得它与同源的 <code>ajax</code> 请求没啥区别，代码完全一样。</p>
<hr>
<blockquote>
<h3 id="【练习】"><a href="#【练习】" class="headerlink" title="【练习】"></a>【练习】</h3></blockquote>
<h4 id="1-本地搭建服务器，演示同源策略"><a href="#1-本地搭建服务器，演示同源策略" class="headerlink" title="1. 本地搭建服务器，演示同源策略"></a><strong>1. 本地搭建服务器，演示同源策略</strong></h4><ul>
<li>本地搭建服务器（如果使用 SAE 可创建不同的代码版本，这样可通过1.xxx.sinapp.com和2.xxx.sinapp.com 访问了）</li>
<li>修改 本地host，通过不同域名访问本地服务器。比如访问 <code>http://a.com/index.html</code>, <code>http://b.com/ajax.php</code>，本质是在 <code>index.html</code> 里使用 <code>ajax</code> 接口访问 <code>http://b.com/ajax.php</code> 里的数据。</li>
<li>查看输出报错</li>
</ul>
<blockquote>
<p>通过 <code>XAMPP</code> 搭建本地服务器，编辑 <code>host</code> ：</p>
</blockquote>
<ul>
<li>127.0.0.1 a.com</li>
<li>127.0.0.1 b.com</li>
</ul>
<p>这样通过 <code>http://a.com</code> 和 <code>http://b.com</code> 两个不同域名可以访问本地服务器</p>
<blockquote>
<p>编辑 <code>http://a.com/index.html</code></p>
</blockquote>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>a.com<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"http://apps.bdimg.com/libs/jquery/1.9.1/jquery.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></div><div class="line">		<span class="keyword">var</span> start = <span class="number">1</span>;</div><div class="line">		$.ajax(&#123;</div><div class="line">		    <span class="attr">type</span>: <span class="string">'get'</span>,</div><div class="line">		    <span class="attr">url</span>: <span class="string">'//b.com/ajax.php'</span>,</div><div class="line">		    <span class="attr">data</span>: &#123;</div><div class="line">		    	<span class="attr">start</span>: start,</div><div class="line">		    	<span class="attr">len</span>:<span class="number">5</span></div><div class="line">		    &#125;,</div><div class="line">		    <span class="attr">success</span>: <span class="function"><span class="keyword">function</span>(<span class="params">ret</span>) </span>&#123;</div><div class="line">		        <span class="keyword">if</span>(ret.status === <span class="number">1</span>)&#123;</div><div class="line">		        	alert(<span class="string">'success to get data!'</span>);</div><div class="line">			    	start += <span class="number">5</span>;</div><div class="line">		        &#125;<span class="keyword">else</span> &#123;</div><div class="line">		        	alert(<span class="string">'failed to get data!'</span>);</div><div class="line">		        &#125;</div><div class="line">		    &#125;,</div><div class="line">		    <span class="attr">error</span>: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">		        alert(<span class="string">"Something error"</span>);</div><div class="line">		    &#125;</div><div class="line">		&#125;);</div><div class="line">	<span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div></pre></td></tr></table></figure>
<p>在 <code>a.com</code> 下我们通过 <code>index.html</code> 中的 <code>ajax</code> 访问 <code>b.com</code> 下的 <code>ajax.php</code></p>
<blockquote>
<p>编辑 <code>http://b.com/ajax.php</code></p>
</blockquote>
<figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;?php</span></div><div class="line">    <span class="comment">// 后端 php 测试接口文件</span></div><div class="line">    $start = $_GET[<span class="string">'start'</span>]; <span class="comment">//1</span></div><div class="line">    $len = $_GET[<span class="string">'len'</span>];  <span class="comment">//5</span></div><div class="line">    $items = <span class="keyword">array</span>();</div><div class="line"></div><div class="line">    <span class="keyword">for</span>($i = <span class="number">0</span>; $i &lt; $len; $i++)&#123;</div><div class="line">        array_push($items, <span class="string">'内容'</span> . ($start+$i));</div><div class="line">    &#125;</div><div class="line">    $ret = <span class="keyword">array</span>(<span class="string">'status'</span>=&gt;<span class="number">1</span>, <span class="string">'data'</span>=&gt;$items);</div><div class="line"></div><div class="line">    <span class="comment">//&#123;status: 1, data: ['内容1','内容2','内容3']&#125;</span></div><div class="line">    sleep(<span class="number">0.5</span>);</div><div class="line">    <span class="keyword">echo</span> json_encode($ret);</div></pre></td></tr></table></figure>
<blockquote>
<p>浏览器输入 <code>a.com</code> ，看到报错信息：</p>
</blockquote>
<p><img src="http://7xr868.com1.z0.glb.clouddn.com/task31/%E5%90%8C%E6%BA%90%E7%AD%96%E7%95%A5%E9%AA%8C%E8%AF%81.png" alt=""></p>
<h4 id="2-至少使用一种方式解决跨域问题"><a href="#2-至少使用一种方式解决跨域问题" class="headerlink" title="2. 至少使用一种方式解决跨域问题"></a><strong>2. 至少使用一种方式解决跨域问题</strong></h4><ul>
<li>JSONP 解决跨域</li>
</ul>
<p><code>a.com</code> 下的 html 请求 <code>b.com</code> 下的 php</p>
<blockquote>
<p>编辑 <code>http://a.com/index.html</code></p>
</blockquote>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">'http://libs.baidu.com/jquery/2.0.0/jquery.min.js'</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="javascript"></span></div><div class="line">$.ajax(&#123;</div><div class="line">	<span class="attr">url</span>: <span class="string">'http://b.com/a.php'</span>,</div><div class="line">	<span class="attr">dataType</span>: <span class="string">'jsonp'</span>,</div><div class="line">	<span class="attr">success</span>: <span class="function"><span class="keyword">function</span> (<span class="params">ret</span>) </span>&#123;</div><div class="line">		 <span class="built_in">console</span>.log(<span class="string">"I'm "</span> + ret.name + <span class="string">",and I'm "</span> + ret.age + <span class="string">" years old."</span>);</div><div class="line">	&#125;,</div><div class="line">	<span class="attr">error</span>: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">		 alert(<span class="string">"Something error"</span>);</div><div class="line">	&#125;</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<blockquote>
<p>编辑 <code>http://b.com/a.php</code></p>
</blockquote>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">&lt;?php</div><div class="line">  $jsondata = '&#123;</div><div class="line">    "name": "aaa",</div><div class="line">    "age": 20</div><div class="line">  &#125;';</div><div class="line">  echo $_GET['callback'].'('.$jsondata.')';</div></pre></td></tr></table></figure>
<blockquote>
<p>result</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">I&apos;m aaa,and I&apos;m 20 years old.</div></pre></td></tr></table></figure>
<ul>
<li>CORS 解决跨域</li>
</ul>
<p><code>a.com</code> 下的 html 请求 <code>b.com</code> 下的 php</p>
<blockquote>
<p>编辑 <code>http://a.com/index.html</code></p>
</blockquote>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">'http://libs.baidu.com/jquery/2.0.0/jquery.min.js'</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="javascript"></span></div><div class="line">$.ajax(&#123;</div><div class="line">	<span class="attr">url</span>: <span class="string">'http://b.com/a.php'</span>,</div><div class="line">	<span class="comment">// dataType: 'jsonp',</span></div><div class="line">	success: <span class="function"><span class="keyword">function</span> (<span class="params">ret</span>) </span>&#123;</div><div class="line">		 <span class="built_in">console</span>.log(<span class="string">"I'm "</span> + ret.name + <span class="string">",and I'm "</span> + ret.age + <span class="string">" years old."</span>);</div><div class="line">	&#125;,</div><div class="line">	<span class="attr">error</span>: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">		 alert(<span class="string">"Something error"</span>);</div><div class="line">	&#125;</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<blockquote>
<p>编辑 <code>http://b.com/a.php</code></p>
</blockquote>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">header("Access-Control-Allow-Origin:http://a.com");</div><div class="line">&lt;?php</div><div class="line">  $jsondata = '&#123;</div><div class="line">    "name": "aaa",</div><div class="line">    "age": 20</div><div class="line">  &#125;';</div><div class="line">  echo $_GET['callback'].'('.$jsondata.')';</div></pre></td></tr></table></figure>
<blockquote>
<p>result</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">I&apos;m aaa,and I&apos;m 20 years old.</div></pre></td></tr></table></figure>
<hr>
]]></content>
      
        <categories>
            
            <category> 编程学习 </category>
            
            <category> 前端基础 </category>
            
            <category> 计算机网络 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Web服务器 </tag>
            
            <tag> 浏览器 </tag>
            
            <tag> 跨域 </tag>
            
            <tag> CORS </tag>
            
            <tag> JSONP </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[瀑布流布局]]></title>
      <url>http://licao404.com/2016/04/28/%E7%80%91%E5%B8%83%E6%B5%81%E5%B8%83%E5%B1%80/</url>
      <content type="html"><![CDATA[<blockquote class="blockquote-center">瀑布流布局在国内外一些网站上基本都能看到，来看几个使用了瀑布流布局的网站： <a href="https://www.pinterest.com/" target="_blank" rel="external">Pinterest</a> (可能是最早使用这种布局的网站)、<a href="http://www.pixillion.com/our-work/film/" target="_blank" rel="external">Pixillion</a>、<a href="https://gimmebar.com/user/cameron" target="_blank" rel="external">Gimme Bar</a> 。炫酷吗，瀑布流布局的实现方式有很多种，也有各自的代表网站，并且已有很多瀑布流插件，但是自己动手丰衣足食，弄懂原理是关键。本文将解析瀑布流布局的原理，并自己用 jQuery 实现，当然也可以用原生 JavaScript 。</blockquote>

<a id="more"></a>
<hr>
<blockquote>
<h3 id="【原理准备】"><a href="#【原理准备】" class="headerlink" title="【原理准备】"></a>【原理准备】</h3></blockquote>
<h4 id="瀑布流布局的原理是什么"><a href="#瀑布流布局的原理是什么" class="headerlink" title="瀑布流布局的原理是什么?"></a><strong>瀑布流布局的原理是什么?</strong></h4><p>首先我们针对的是等宽不等高的元素进行布局，例如承载图片的 <code>item</code> 等；由于元素高度是不等的，布局的大体思想就是让每个元素找到最短的队，然后排队。</p>
<ol>
<li><p>首先得知道排几队，通过浏览器窗口宽度除以元素宽度即可，当然注意浏览器的宽度是可变的哦（我们可以通过 <code>resize</code> 实时监听浏览器窗口）；</p>
</li>
<li><p>知道了排几队，接着我们需要知道每一队的长度，当然这个值随着每一个元素的加入是改变的，那就通过一个数组来存储吧，数组长度就是有几队，数组每一项的值存队的长度；</p>
</li>
<li><p>然后我们来看最关键的点：<strong>挑最短的队排！</strong> 具体可以遍历数组获得最短的队是哪一队，这队多长？<br>找到了队伍咱就排吧，别忘了把自己的高度算进你这队的总长度呀！</p>
</li>
</ol>
<blockquote>
<h3 id="【具体实现】"><a href="#【具体实现】" class="headerlink" title="【具体实现】"></a>【具体实现】</h3></blockquote>
<p>原理虽然简单，来个 <code>demo</code> 看看怎样用代码描述：</p>
<ul>
<li><a href="http://febox.applinzi.com/task30/task30.html" target="_blank" rel="external">效果预览</a></li>
<li><a href="https://github.com/licao404/landemo/blob/master/task30/task30.html" target="_blank" rel="external">实现代码</a></li>
</ul>
<hr>
]]></content>
      
        <categories>
            
            <category> 编程学习 </category>
            
            <category> 前端基础 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> JavaScript </tag>
            
            <tag> jQuery </tag>
            
            <tag> 效果 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[jQuery懒加载]]></title>
      <url>http://licao404.com/2016/04/25/jQuery%E6%87%92%E5%8A%A0%E8%BD%BD/</url>
      <content type="html"><![CDATA[<blockquote class="blockquote-center">对于图片过多的页面，我们会使用懒加载，具体表现为当页面被请求时，只加载可视区域的图片，其它部分的图片则不加载，只有这些图片出现在可视区域时才会动态加载这些图片，从而节约了网络带宽和提高了初次加载的速度，也提高了用户体验。本文将介绍其实现原理以及如何动手实现。</blockquote>

<a id="more"></a>
<blockquote>
<h3 id="【原理准备】"><a href="#【原理准备】" class="headerlink" title="【原理准备】"></a>【原理准备】</h3></blockquote>
<h4 id="1-如何判断一个元素是否出现在窗口可视范围（浏览器的上边缘和下边缘之间，肉眼可视）。写一个函数-isVisible-实现"><a href="#1-如何判断一个元素是否出现在窗口可视范围（浏览器的上边缘和下边缘之间，肉眼可视）。写一个函数-isVisible-实现" class="headerlink" title="1. 如何判断一个元素是否出现在窗口可视范围（浏览器的上边缘和下边缘之间，肉眼可视）。写一个函数      isVisible 实现"></a><strong>1. 如何判断一个元素是否出现在窗口可视范围（浏览器的上边缘和下边缘之间，肉眼可视）。写一个函数      <code>isVisible</code> 实现</strong></h4><p><img src="http://7xr868.com1.z0.glb.clouddn.com/task29/isVisible.png" alt=""><br>依照我们画的思路图，给出描述程序：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//判断元素是否出现在浏览器窗口可视范围</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">isVisiable</span> (<span class="params">$node</span>) </span>&#123;</div><div class="line">	 <span class="keyword">var</span> scrollT = $(<span class="built_in">window</span>).scrollTop(),<span class="comment">//获取页面顶部到窗口顶部的滚动距离</span></div><div class="line">	 	 windowH = $(<span class="built_in">window</span>).height(),<span class="comment">//获取浏览器窗口高度</span></div><div class="line">	 	 offsetT = $node.offset().top;<span class="comment">//获取该元素距页面顶部的距离</span></div><div class="line"></div><div class="line">	 <span class="keyword">if</span> (scrollT+windowH &gt; offsetT) &#123;</div><div class="line">	 	<span class="keyword">return</span> <span class="literal">true</span>;</div><div class="line">	 &#125;<span class="keyword">else</span>&#123;</div><div class="line">	 	<span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">	 &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h4 id="2-当窗口滚动时，判断一个元素是不是出现在窗口可视范围。每次出现都在控制台打印-true-。用代码实现"><a href="#2-当窗口滚动时，判断一个元素是不是出现在窗口可视范围。每次出现都在控制台打印-true-。用代码实现" class="headerlink" title="2. 当窗口滚动时，判断一个元素是不是出现在窗口可视范围。每次出现都在控制台打印 true 。用代码实现"></a><strong>2. 当窗口滚动时，判断一个元素是不是出现在窗口可视范围。每次出现都在控制台打印 true 。用代码实现</strong></h4><blockquote>
<p><a href="http://js.jirengu.com/fufo/8/edit?html,console,output" target="_blank" rel="external">demo</a></p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> $target = $(<span class="string">'.nav3'</span>);</div><div class="line"></div><div class="line"><span class="comment">//监视窗口滚动</span></div><div class="line">$(<span class="built_in">window</span>).on(<span class="string">'scroll'</span>,<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> result = isVisiable ($target);</div><div class="line">    <span class="keyword">if</span>(result)&#123;<span class="built_in">console</span>.log(result)&#125;;</div><div class="line">&#125;)  </div><div class="line"></div><div class="line"><span class="comment">//判断元素是否出现在浏览器窗口可视范围</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">isVisiable</span> (<span class="params">$node</span>) </span>&#123;</div><div class="line">  <span class="keyword">var</span> scrollT = $(<span class="built_in">window</span>).scrollTop(),<span class="comment">//获取页面顶部到窗口顶部的滚动距离</span></div><div class="line">      windowH = $(<span class="built_in">window</span>).height(),<span class="comment">//获取浏览器窗口高度</span></div><div class="line">      offsetT = $node.offset().top;<span class="comment">//获取该元素距页面顶部的距离</span></div><div class="line"></div><div class="line">  <span class="keyword">if</span> (scrollT+windowH &gt; offsetT) &#123;</div><div class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</div><div class="line">  &#125;<span class="keyword">else</span>&#123;</div><div class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="3-当窗口滚动时，判断一个元素是不是出现在窗口可视范围。在元素第一次出现时在控制台打印-true，以后再次出现不做任何处理。用代码实现"><a href="#3-当窗口滚动时，判断一个元素是不是出现在窗口可视范围。在元素第一次出现时在控制台打印-true，以后再次出现不做任何处理。用代码实现" class="headerlink" title="3. 当窗口滚动时，判断一个元素是不是出现在窗口可视范围。在元素第一次出现时在控制台打印 true，以后再次出现不做任何处理。用代码实现"></a><strong>3. 当窗口滚动时，判断一个元素是不是出现在窗口可视范围。在元素第一次出现时在控制台打印 true，以后再次出现不做任何处理。用代码实现</strong></h4><blockquote>
<p><a href="http://js.jirengu.com/lif/1/edit?html,console,output" target="_blank" rel="external">demo</a></p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">console</span>.log(<span class="string">"当nav3出现时打印true"</span>);</div><div class="line"><span class="keyword">var</span> $target = $(<span class="string">'.nav3'</span>);</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">isVisiable</span> (<span class="params">$node</span>) </span>&#123;</div><div class="line">  <span class="keyword">var</span> scrollT = $(<span class="built_in">window</span>).scrollTop(),<span class="comment">//获取页面顶部到窗口顶部的滚动距离</span></div><div class="line">      windowH = $(<span class="built_in">window</span>).height(),<span class="comment">//获取浏览器窗口高度</span></div><div class="line">      offsetT = $node.offset().top;<span class="comment">//获取该元素距页面顶部的距离</span></div><div class="line"></div><div class="line">  <span class="comment">//判断该元素是否出现过，出现过就不再进行</span></div><div class="line">  <span class="keyword">if</span> ($target.data(<span class="string">'isAppeared'</span>)) &#123;</div><div class="line">  	<span class="keyword">return</span>;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="keyword">if</span> (scrollT+windowH &gt; offsetT) &#123;</div><div class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</div><div class="line">  &#125;<span class="keyword">else</span>&#123;</div><div class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">var</span> clock;</div><div class="line">$(<span class="built_in">window</span>).on(<span class="string">'scroll'</span>,<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">	<span class="keyword">if</span> (clock) &#123;</div><div class="line">		clearTimeout(clock);</div><div class="line">	&#125;</div><div class="line">	clock = setTimeout(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">	    <span class="keyword">var</span> result = isVisiable ($target);</div><div class="line"></div><div class="line">	    <span class="keyword">if</span>(result)&#123;</div><div class="line">	    	<span class="built_in">console</span>.log(result);</div><div class="line">	    	$target.data(<span class="string">'isAppeared'</span>,<span class="literal">true</span>);</div><div class="line">	    &#125;;    		  </div><div class="line">	&#125;,<span class="number">300</span>);</div><div class="line"></div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<h4 id="4-图片懒加载的原理是什么？"><a href="#4-图片懒加载的原理是什么？" class="headerlink" title="4.图片懒加载的原理是什么？"></a><strong>4.图片懒加载的原理是什么？</strong></h4><p>原理实际上很简单，当页面被请求时，只加载可视区域的图片，其它部分的图片则不加载，只有这些图片出现在可视区域时才会动态加载这些图片。判断图片是否出现在可视区域内前文已通过函数实现；还有一个就是当页面加载时我们需要将页面上的 <code>img</code> 标签的 <code>src</code> 指向一个小的图片（随便是啥），把我们要展示图片的真实地址放在一个自定义属性中，如 <code>data-src</code>：</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"loading.gif"</span> <span class="attr">data-src</span>=<span class="string">"http://xx.oo.com"</span>/&gt;</span></div></pre></td></tr></table></figure>
<blockquote>
<h3 id="【具体实现】"><a href="#【具体实现】" class="headerlink" title="【具体实现】"></a>【具体实现】</h3></blockquote>
<h4 id="1-实现如下回到顶部效果"><a href="#1-实现如下回到顶部效果" class="headerlink" title="1. 实现如下回到顶部效果"></a><strong>1. 实现如下回到顶部效果</strong></h4><p>当页面滚动到一定距离时，窗口右下角会出现回到顶部按钮，点击按钮页面会滚动到顶部。</p>
<ul>
<li><a href="http://febox.applinzi.com/task29/task29-1.html" target="_blank" rel="external">效果预览</a></li>
<li><a href="https://github.com/licao404/landemo/blob/master/task29/js/backtop.js" target="_blank" rel="external">实现代码</a></li>
</ul>
<h4 id="2-实现图片懒加载效果"><a href="#2-实现图片懒加载效果" class="headerlink" title="2. 实现图片懒加载效果"></a><strong>2. 实现图片懒加载效果</strong></h4><ul>
<li><a href="http://febox.applinzi.com/task29/task29-2.html" target="_blank" rel="external">效果预览</a></li>
<li><a href="https://github.com/licao404/landemo/blob/master/task29/task29-2.html" target="_blank" rel="external">实现代码</a></li>
</ul>
<h4 id="3-实现如下无限滚动效果"><a href="#3-实现如下无限滚动效果" class="headerlink" title="3. 实现如下无限滚动效果"></a><strong>3. 实现如下无限滚动效果</strong></h4><ul>
<li><a href="http://febox.applinzi.com/task29/task29-3.html#" target="_blank" rel="external">效果预览</a></li>
<li><a href="https://github.com/licao404/landemo/blob/master/task29/task29-3.html" target="_blank" rel="external">实现代码</a></li>
</ul>
<hr>
]]></content>
      
        <categories>
            
            <category> 编程学习 </category>
            
            <category> 前端基础 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> JavaScript </tag>
            
            <tag> jQuery </tag>
            
            <tag> 效果 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[jQuery实现几种轮播]]></title>
      <url>http://licao404.com/2016/04/24/jQuery%E5%AE%9E%E7%8E%B0%E5%87%A0%E7%A7%8D%E8%BD%AE%E6%92%AD/</url>
      <content type="html"><![CDATA[<span itemprop="image" itemscope="" itemtype="http://schema.org/ImageObject"><img itemprop="url image" src="http://7xrvo9.com1.z0.glb.clouddn.com/0424/%E8%BD%AE%E6%92%AD.gif" class="full-image" alt="alt"><meta itemprop="width" content="auto"><meta itemprop="height" content="auto"></span>
<a id="more"></a>
<hr>
<blockquote>
<p><strong>淡入淡出轮播</strong></p>
</blockquote>
<ul>
<li><p><a href="http://febox.applinzi.com/task27/task27-1.html" target="_blank" rel="external">效果预览</a></p>
</li>
<li><p><a href="https://github.com/licao404/landemo/blob/master/task27/task27-1.html" target="_blank" rel="external">实现代码</a></p>
</li>
</ul>
<hr>
<blockquote>
<p><strong>多个轮播</strong></p>
</blockquote>
<ul>
<li><p><a href="http://febox.applinzi.com/task27/task27-2.html" target="_blank" rel="external">效果预览</a></p>
</li>
<li><p><a href="https://github.com/licao404/landemo/blob/master/task27/task27-2.html" target="_blank" rel="external">实现代码</a></p>
</li>
</ul>
<hr>
<blockquote>
<p><strong>无缝轮播(克隆法)</strong></p>
</blockquote>
<ul>
<li><p><a href="http://febox.applinzi.com/task27/task27-3.html" target="_blank" rel="external">效果预览</a></p>
</li>
<li><p><a href="https://github.com/licao404/landemo/blob/master/task27/task27-3.html" target="_blank" rel="external">实现代码</a></p>
</li>
</ul>
<hr>
<blockquote>
<p><strong>无缝轮播（改变DOM）</strong></p>
</blockquote>
<ul>
<li><p><a href="http://febox.applinzi.com/task27/task27-3-2.html" target="_blank" rel="external">效果预览</a></p>
</li>
<li><p><a href="https://github.com/licao404/landemo/blob/master/task27/task27-3-2.html" target="_blank" rel="external">实现代码</a></p>
</li>
</ul>
<hr>
<blockquote>
<p><strong>全屏轮播</strong></p>
</blockquote>
<ul>
<li><p><a href="http://febox.applinzi.com/task27/task27-4.html" target="_blank" rel="external">效果预览</a></p>
</li>
<li><p><a href="https://github.com/licao404/landemo/blob/master/task27/task27-4.html" target="_blank" rel="external">实现代码</a></p>
</li>
</ul>
<hr>
]]></content>
      
        <categories>
            
            <category> 编程学习 </category>
            
            <category> 前端基础 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> JavaScript </tag>
            
            <tag> jQuery </tag>
            
            <tag> 效果 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[jQuery常用方法 & Ajax]]></title>
      <url>http://licao404.com/2016/04/19/jQuery%E5%B8%B8%E7%94%A8%E6%96%B9%E6%B3%95-Ajax/</url>
      <content type="html"><![CDATA[<blockquote>
<h3 id="【知识点】"><a href="#【知识点】" class="headerlink" title="【知识点】"></a>【知识点】</h3></blockquote>
<h4 id="1-Jquery-中，-document-ready-是什么意思？和-window-onload-的区别？-还有其他什么写法或者替代方法？"><a href="#1-Jquery-中，-document-ready-是什么意思？和-window-onload-的区别？-还有其他什么写法或者替代方法？" class="headerlink" title="1. Jquery 中， $(document).ready() 是什么意思？和  window.onload 的区别？ 还有其他什么写法或者替代方法？"></a><strong>1. Jquery 中， <code>$(document).ready()</code> 是什么意思？和  <code>window.onload</code> 的区别？ 还有其他什么写法或者替代方法？</strong></h4><p><code>$(document).ready()</code> 确保在所有 DOM 构建完成之后，再运行 jQuery 代码，不管其中的代码放在任何位置都是可以运行的，相当于放在了尾部：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$(<span class="built_in">document</span>).ready(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">  <span class="built_in">console</span>.log( <span class="string">"ready!"</span> );</div><div class="line">&#125;);</div></pre></td></tr></table></figure></p>
<a id="more"></a>
<blockquote>
<p><code>$(document).ready()</code> 和 <code>window.onload</code> 的区别：</p>
</blockquote>
<ul>
<li><p>执行时间不同。<code>window.onload</code> 是等页面所有的资源包括图片等外链资源都加载完毕后才能执行；<code>$(document).ready()</code> 只需等到 DOM 构建完成后便可执行，与前者的区别是 DOM 树虽然建立起来，但页面不一定加载完成；</p>
</li>
<li><p>可被执行的次数不同。 <code>window.onload</code> 不能同时编写多个，如果有多个 <code>window.onload</code> 方法，只会执行最后一个 <code>window.onload</code>，之前的 <code>window.onload</code> 都将被覆盖；<code>$(document).ready()</code> 可以同时编写多个，并且都可以得到执行；</p>
</li>
<li><p><code>window.onload</code> 没有简写形式</p>
</li>
</ul>
<blockquote>
<p><code>$(document).ready()</code> 几种简写形式：</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$(<span class="built_in">document</span>()&#123;</div><div class="line">  <span class="built_in">console</span>.log( <span class="string">"ready!"</span> );</div><div class="line">&#125;)</div></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="built_in">console</span>.log( <span class="string">"ready!"</span> );</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$().ready(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">  <span class="built_in">console</span>.log( <span class="string">"ready!"</span> );</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<h4 id="2-node-html-和-node-text-的区别"><a href="#2-node-html-和-node-text-的区别" class="headerlink" title="2. $node.html() 和 $node.text() 的区别?"></a><strong>2. <code>$node.html()</code> 和 <code>$node.text()</code> 的区别?</strong></h4><ul>
<li><code>$node.html()</code> 获取的是 <code>$node</code>内部的HTML内容；</li>
<li><code>$node.text()</code> 获取的是 <code>$node</code>内部的文本内容；</li>
</ul>
<h4 id="3-extend-的作用和用法"><a href="#3-extend-的作用和用法" class="headerlink" title="3. $.extend 的作用和用法?"></a><strong>3. <code>$.extend</code> 的作用和用法?</strong></h4><blockquote>
<p><code>$.extend</code> 是把将两个或更多对象的内容合并到 <strong>第一个</strong> 对象。</p>
</blockquote>
<ul>
<li><p><code>$.extend( target [, object1 ] [, objectN ] )</code><br><strong><em>target</em></strong>：一个对象，如果附加的对象被传递给这个方法将那么它将接收新的属性，如果它是唯一的参数将扩展jQuery的命名空间；<br><strong><em>object1</em></strong>：待合并到第一个对象的对象；<br><strong><em>objectN</em></strong>：待合并到第一个对象的对象；</p>
</li>
<li><p><code>$.extend( [deep], target [, object1 ] [, objectN ] )</code><br><strong><em>deep</em></strong>：如果是 <code>true</code>，合并成为递归（又叫做深拷贝）。例如下面一个例子：</p>
</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> student01 = &#123;<span class="attr">name</span>:<span class="string">"licao"</span>,<span class="attr">age</span>:<span class="number">20</span>&#125;;</div><div class="line"><span class="keyword">var</span> student02 = &#123;<span class="attr">name</span>:<span class="string">"xiaomin"</span>,<span class="attr">age</span>:<span class="number">25</span>,<span class="attr">sex</span>:<span class="string">"man"</span>&#125;;</div><div class="line">$.extend(student01,student02);</div></pre></td></tr></table></figure>
<p>运行后<code>student01</code>将变为 <code>{age:25,name:&quot;xiaomin&quot;,sex:&quot;man&quot;}</code>,而<code>student02</code>不变；</p>
<p>如果我们想保留原对象，我们可以通过传递一个空对象作为目标对象：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> student01 = &#123;<span class="attr">name</span>:<span class="string">"licao"</span>,<span class="attr">age</span>:<span class="number">20</span>&#125;;</div><div class="line"><span class="keyword">var</span> student02 = &#123;<span class="attr">name</span>:<span class="string">"xiaomin"</span>,<span class="attr">age</span>:<span class="number">25</span>,<span class="attr">sex</span>:<span class="string">"man"</span>&#125;;</div><div class="line"><span class="keyword">var</span> object = $.extend(&#123;&#125;, object1, object2);</div></pre></td></tr></table></figure>
<p>运行后<code>object</code>将变为 <code>{age:25,name:&quot;xiaomin&quot;,sex:&quot;man&quot;}</code>，而<code>student01</code> , <code>student02</code>不变；</p>
<h4 id="4-JQuery-的链式调用是什么？"><a href="#4-JQuery-的链式调用是什么？" class="headerlink" title="4. JQuery 的链式调用是什么？"></a><strong>4. JQuery 的链式调用是什么？</strong></h4><p>链式调用是一种语法招数，通过多次重复使用同一个变量来达到用少量代码表达复杂操作的目的，代码看起来更加优雅。缺点是占用了函数的返回值。当我们在实现一个<code>hover</code>效果：</p>
<p><img src="http://7xr868.com1.z0.glb.clouddn.com/%E9%93%BE%E5%BC%8F%E8%B0%83%E7%94%A8.gif" alt=""><br><code>mouseover</code>时显示半透明层，<code>mouseleave</code>时不显示，这其实就是 jQuery 链式调用的反映：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">$(<span class="string">".panel"</span>).on(<span class="string">'mouseover'</span>, <span class="string">'.item'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    $(<span class="keyword">this</span>).find(<span class="string">'.item-hover'</span>).show();</div><div class="line">&#125;).on(<span class="string">'mouseleave'</span>, <span class="string">'.item'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    $(<span class="keyword">this</span>).find(<span class="string">'.item-hover'</span>).hide();</div><div class="line">&#125;);</div></pre></td></tr></table></figure></p>
<p>我们选中的对象 <code>&#39;.item&#39;</code> 执行完一个方法后就返回本身（<code>return this</code>）,然后被返回的对象继续执行后面的方法，可以写一下 <a href="http://www.imooc.com/code/3402" target="_blank" rel="external">小例子</a> 增加理解</p>
<h4 id="5-JQuery-Ajax-中缓存怎样控制"><a href="#5-JQuery-Ajax-中缓存怎样控制" class="headerlink" title="5. JQuery Ajax 中缓存怎样控制?"></a><strong>5. JQuery Ajax 中缓存怎样控制?</strong></h4><p>首先得了解为什么我们二次访问后会访问之前一次请求成功后的缓存？这是浏览器的一种机制，当使用 Ajax 请求回来数据以后，浏览器会将请求的 URL 和数据缓存起来，然后当我们第二次请求时，浏览器先匹配本次URL是与之前留在缓存里的URL一致，是则给你本地缓存的数据，不会请求web服务器。</p>
<blockquote>
<p>如何解决 JQuery Ajax 缓存问题</p>
</blockquote>
<ul>
<li><p>调用 <code>$.ajaxSetup ({cache:false})</code> 方法</p>
</li>
<li></li>
</ul>
<h4 id="6-jQuery-中-data-函数的作用"><a href="#6-jQuery-中-data-函数的作用" class="headerlink" title="6. jQuery 中 data 函数的作用"></a><strong>6. jQuery 中 <code>data</code> 函数的作用</strong></h4><p>在匹配元素上存储任意相关数据 或 返回匹配的元素集合中的第一个元素的给定名称的数据存储的值。</p>
<p><code>.data()</code> 方法允许我们在DOM元素上绑定任意类型的数据,避免了循环引用的内存泄漏风险。</p>
<ul>
<li><code>.data( key, value )</code>：在匹配元素上存储任意相关数据</li>
<li><code>.data( key )</code>：返回匹配的元素集合中的第一个元素的给定名称的数据存储的值</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$(<span class="string">'body'</span>).data(<span class="string">"data"</span>,<span class="number">20</span>);</div></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$(<span class="string">'body'</span>).data(<span class="string">"data"</span>);<span class="comment">//20</span></div><div class="line">$(<span class="string">"body"</span>).data();<span class="comment">//[object Object] &#123; data: 20 &#125;</span></div></pre></td></tr></table></figure>
<p>我们可以在 dom 元素中存值然后取回</p>
<hr>
<blockquote>
<h3 id="【练习】"><a href="#【练习】" class="headerlink" title="【练习】"></a>【练习】</h3></blockquote>
<h4 id="1-写出以下功能对应的-jQuery-方法："><a href="#1-写出以下功能对应的-jQuery-方法：" class="headerlink" title="1. 写出以下功能对应的 jQuery 方法："></a><strong>1. 写出以下功能对应的 jQuery 方法：</strong></h4><ol>
<li><p>给元素 <code>$node</code> 添加 class <code>active</code>，给元素 $noed 删除 class <code>active</code></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$node.addClass(<span class="string">"active"</span>);<span class="comment">//添加 class</span></div><div class="line"></div><div class="line">$node.removeClass(<span class="string">"active"</span>);<span class="comment">//删除 class</span></div></pre></td></tr></table></figure>
</li>
<li><p>展示元素 <code>$node</code>, 隐藏元素<code>$node</code></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">$node.show();<span class="comment">//展示元素 `$node`</span></div><div class="line">$node.fadeIn(<span class="string">"slow"</span>);<span class="comment">//通过淡入的方式显示元素。</span></div><div class="line"></div><div class="line">$node.hide();<span class="comment">//隐藏元素`$node`</span></div><div class="line">$node.fadeOut(<span class="string">"slow"</span>);<span class="comment">//通过淡入的方式隐藏元素。</span></div></pre></td></tr></table></figure>
</li>
<li><p>获取元素 <code>$node</code> 的 属性: id、src、title， 修改以上属性</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">$node.attr(<span class="string">"id"</span>);</div><div class="line">$node.attr(<span class="string">"src"</span>);</div><div class="line">$node.attr(<span class="string">"title"</span>);</div><div class="line"></div><div class="line"><span class="comment">//单独设置一个简单属性</span></div><div class="line">$node.attr(<span class="string">"id"</span>,<span class="string">"yourid"</span>);</div><div class="line"></div><div class="line"><span class="comment">//一次设置多个属性</span></div><div class="line">$node.attr(&#123;</div><div class="line">  <span class="attr">id</span>: <span class="string">"yourid"</span>,</div><div class="line">  <span class="attr">src</span>: <span class="string">"http://www.licao404.com/..."</span>,</div><div class="line">  <span class="attr">title</span>: <span class="string">"jQuery"</span></div><div class="line">&#125;);</div></pre></td></tr></table></figure>
</li>
<li><p>给 <code>$node</code> 添加自定义属性 <code>data-src</code></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$node.attr(<span class="string">"data-src"</span>,<span class="string">"value"</span>);</div></pre></td></tr></table></figure>
</li>
<li><p>在 <code>$ct</code> 内部最开头添加元素 <code>$node</code></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ct.prepand($node);</div></pre></td></tr></table></figure>
</li>
<li><p>在 <code>$ct</code> 内部最末尾添加元素 <code>$node</code></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ct.append($node);</div></pre></td></tr></table></figure>
</li>
<li><p>删除 <code>$node</code></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$node.remove(); <span class="comment">//同时移除移除元素内部的一切,包括元素上的事件及 jQuery 数据。</span></div><div class="line">$node.detach(); <span class="comment">//删除的元素不删除数据和事件</span></div></pre></td></tr></table></figure>
</li>
<li><p>把 <code>$ct</code> 里内容清空</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ct.empty();<span class="comment">//为了避免内存泄漏，jQuery先移除子元素的数据和事件处理函数，然后移除子元素。</span></div></pre></td></tr></table></figure>
</li>
<li><p>在 <code>$ct</code> 里设置 html <code>&lt;div class=&quot;btn&quot;&gt;&lt;/div&gt;</code></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ct.html(<span class="string">'&lt;div class="btn"&gt;&lt;/div&gt;'</span>);</div></pre></td></tr></table></figure>
</li>
<li><p>获取、设置 <code>$node</code> 的宽度、高度(分别不包括内边距、包括内边距、包括边框、包括外边距)</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">$node.height()<span class="comment">//获取匹配元素集合中的第一个元素的当前计算高度值(不包括padding)。</span></div><div class="line">$node.height(<span class="number">200</span>)<span class="comment">//设置高度为200px,不输入单位默认是 px</span></div><div class="line"></div><div class="line">$node.innerHeight()<span class="comment">//获得匹配集合中第一个元素的当前计算的内部高度（包括padding，但不包括border）</span></div><div class="line">$node.innerHeight(<span class="number">200</span>)<span class="comment">//</span></div><div class="line"></div><div class="line">$node.outerHeight()<span class="comment">//获得匹配集合中第一个元素的当前计算的高度（）</span></div><div class="line">$node.outerHeight(<span class="literal">false</span>)<span class="comment">///获得匹配集合中第一个元素的当前计算的高度（包括border，但不包括margin）</span></div><div class="line"></div><div class="line">$node.outerHeight(<span class="literal">true</span>)<span class="comment">///获得匹配集合中第一个元素的当前计算的高度（包括margin）</span></div><div class="line"></div><div class="line"><span class="comment">//宽度设置也是和高度设置一样；</span></div></pre></td></tr></table></figure>
</li>
<li><p>获取窗口滚动条垂直滚动距离</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$node.scrollTop();</div></pre></td></tr></table></figure>
</li>
<li><p>获取 <code>$node</code> 到根节点水平、垂直偏移距离</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$node.offset();</div></pre></td></tr></table></figure>
</li>
<li><p>修改 <code>$node</code> 的样式，字体颜色设置红色，字体大小设置14px</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">$node.css(&#123;</div><div class="line">  <span class="string">"color"</span>:<span class="string">"red"</span>,</div><div class="line">  <span class="string">"font-size"</span>:<span class="string">"14px"</span></div><div class="line">&#125;);</div></pre></td></tr></table></figure>
</li>
<li><p>遍历节点，把每个节点里面的文本内容重复一遍</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$node.each(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">  $(<span class="keyword">this</span>).clone.insertAfter($(<span class="keyword">this</span>));</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
</li>
<li><p>从 <code>$ct</code> 里查找 class 为 <code>.item</code> 的子元素</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ct.find(<span class="string">'.item'</span>);</div></pre></td></tr></table></figure>
</li>
<li><p>获取 <code>$ct</code> 里面的所有孩子</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ct.chidren()</div></pre></td></tr></table></figure>
</li>
<li><p>对于 <code>$node</code>，向上找到 class 为’.ct’的父亲，在从该父亲找到’.panel’的孩子</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$node.parent(<span class="string">'.ct'</span>).find(<span class="string">'.panel'</span>);</div></pre></td></tr></table></figure>
</li>
<li><p>获取选择元素的数量</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$node.length;</div></pre></td></tr></table></figure>
</li>
<li><p>获取当前元素在兄弟中的排行</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$node.index();</div></pre></td></tr></table></figure>
</li>
</ol>
<h4 id="2-简单实现以下操作："><a href="#2-简单实现以下操作：" class="headerlink" title="2. 简单实现以下操作："></a><strong>2. 简单实现以下操作：</strong></h4><ol>
<li><p>当点击 <code>$btn</code> 时，让 <code>$btn</code> 的背景色变为红色再变为蓝色</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$btn.on(<span class="string">'click'</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">  $(<span class="keyword">this</span>).animate(&#123;<span class="attr">backgroundColor</span>:<span class="string">'red'</span>&#125;,<span class="number">1000</span>).animate(&#123;<span class="attr">backgroundColor</span>:<span class="string">'blue'</span>&#125;,<span class="number">1000</span>);</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
</li>
<li><p>当窗口滚动时，获取垂直滚动距离</p>
<blockquote>
<p><a href="http://js.jirengu.com/lic/2/edit" target="_blank" rel="external">demo</a></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&lt;script&gt;</div><div class="line">  $(<span class="built_in">window</span>).on(<span class="string">'scroll'</span>,<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="built_in">console</span>.log( $(<span class="built_in">document</span>).scrollTop() )</div><div class="line">  &#125;);</div><div class="line"><span class="xml"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></div></pre></td></tr></table></figure>
</blockquote>
</li>
<li><p>当鼠标放置到 <code>$div</code> 上，把<code>$div</code> 背景色改为红色，移出鼠标背景色变为白色</p>
<blockquote>
<p><a href="http://js.jirengu.com/lipe/1/edit?output" target="_blank" rel="external">demo</a></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">$button.on(<span class="string">"mouseenter"</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">      $(<span class="keyword">this</span>).css(<span class="string">"background-color"</span>, <span class="string">"red"</span>);</div><div class="line">  &#125;).on(<span class="string">"mouseleave"</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">      $(<span class="keyword">this</span>).css(<span class="string">"background-color"</span>, <span class="string">"white"</span>);</div><div class="line">  &#125;);</div></pre></td></tr></table></figure>
</blockquote>
</li>
<li><p>当鼠标激活 <code>input</code> 输入框时让输入框边框变为蓝色，当输入框内容改变时把输入框里的文字小写变为大写，当输入框失去焦点时去掉边框蓝色，控制台展示输入框里的文字</p>
<blockquote>
<p><a href="http://js.jirengu.com/kal/2/edit?html,console,output" target="_blank" rel="external">demo</a></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">$ipt.on(<span class="string">'focusin'</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">  $(<span class="keyword">this</span>).css(<span class="string">'border'</span>,<span class="string">'1px solid blue'</span>);</div><div class="line">&#125;).on(<span class="string">'keyup'</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">  $(<span class="keyword">this</span>).val($(<span class="keyword">this</span>).val().toUpperCase());</div><div class="line">&#125;).on(<span class="string">'focusout'</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">  $(<span class="keyword">this</span>).css(<span class="string">'border'</span>,<span class="string">''</span>);</div><div class="line">  <span class="built_in">console</span>.log($(<span class="keyword">this</span>).val());</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
</blockquote>
</li>
<li><p>当选择 <code>select</code> 后，获取用户选择的内容</p>
<blockquote>
<p><a href="http://js.jirengu.com/poc/1/edit?console,output" target="_blank" rel="external">demo</a></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">$select.on(<span class="string">'change'</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">  <span class="keyword">var</span> selected = $(<span class="keyword">this</span>).val();</div><div class="line">  <span class="built_in">console</span>.log(selected);</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
</blockquote>
</li>
</ol>
<h4 id="3-用-jquery-ajax-实现如下效果。当点击加载更多会加载数据展示到页面。当鼠标放置上去会变色"><a href="#3-用-jquery-ajax-实现如下效果。当点击加载更多会加载数据展示到页面。当鼠标放置上去会变色" class="headerlink" title="3. 用 jquery ajax 实现如下效果。当点击加载更多会加载数据展示到页面。当鼠标放置上去会变色"></a><strong>3. 用 jquery ajax 实现如下效果。<code>当点击加载更多会加载数据展示到页面。当鼠标放置上去会变色</code></strong></h4><blockquote>
<p><a href="http://febox.applinzi.com/task26/task26-3.html" target="_blank" rel="external">示例效果</a></p>
</blockquote>
<figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;?php</span></div><div class="line">    <span class="comment">// 后端 php 测试接口文件</span></div><div class="line">    $start = $_GET[<span class="string">'start'</span>]; <span class="comment">//2</span></div><div class="line">    $len = $_GET[<span class="string">'len'</span>];  <span class="comment">//6</span></div><div class="line">    $items = <span class="keyword">array</span>();</div><div class="line"></div><div class="line">    <span class="keyword">for</span>($i = <span class="number">0</span>; $i &lt; $len; $i++)&#123;</div><div class="line">        array_push($items, <span class="string">'内容'</span> . ($start+$i));</div><div class="line">    &#125;</div><div class="line">    $ret = <span class="keyword">array</span>(<span class="string">'status'</span>=&gt;<span class="number">1</span>, <span class="string">'data'</span>=&gt;$items);</div><div class="line"></div><div class="line">    <span class="comment">//&#123;status: 1, data: ['内容1','内容2','内容3']&#125;</span></div><div class="line">    sleep(<span class="number">0.5</span>);</div><div class="line">    <span class="keyword">echo</span> json_encode($ret);</div></pre></td></tr></table></figure>
<blockquote>
<p><a href="http://febox.applinzi.com/task26/task26-3.html" target="_blank" rel="external">效果点点我</a><br><a href="https://github.com/licao404/landemo/blob/master/task26/task26-3.html" target="_blank" rel="external">瞅瞅代码</a></p>
</blockquote>
<hr>
]]></content>
      
        <categories>
            
            <category> 编程学习 </category>
            
            <category> 前端基础 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> JavaScript </tag>
            
            <tag> AJAX </tag>
            
            <tag> jQuery </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[学习 ECharts（一）：初窥]]></title>
      <url>http://licao404.com/2016/04/19/%E5%AD%A6%E4%B9%A0-ECharts%EF%BC%88%E4%B8%80%EF%BC%89%EF%BC%9A%E5%88%9D%E7%AA%A5/</url>
      <content type="html"><![CDATA[<span itemprop="image" itemscope="" itemtype="http://schema.org/ImageObject"><img itemprop="url image" src="http://7xrvo9.com1.z0.glb.clouddn.com/ECharts/example.png" class="full-image" alt="alt"><meta itemprop="width" content="auto"><meta itemprop="height" content="auto"></span>
<blockquote class="blockquote-center">ECharts，一个纯 Javascript 的图表库，可以流畅的运行在 PC 和移动设备上，兼容当前绝大部分浏览器（IE8/9/10/11，Chrome，Firefox，Safari等），底层依赖轻量级的 Canvas 类库 <a href="https://github.com/ecomfe/zrender" target="_blank" rel="external">ZRender</a>，提供直观，生动，可交互，可高度个性化定制的数据可视化图表。</blockquote>

<a id="more"></a>
<h3 id="入门-Demo-01"><a href="#入门-Demo-01" class="headerlink" title="入门 Demo 01"></a>入门 Demo 01</h3><blockquote>
<p>如下面 demo 展示，我们尝试插入一个简单的柱形图：</p>
</blockquote>
<p><div id="wrap0" style="width: 100%;height: 400px;"></div><!--step2：先为echarts准备有宽高的容器--></p>
<script src="http://7xrvo9.com1.z0.glb.clouddn.com/Echarts%E5%AE%8C%E6%95%B4%E7%89%88/echarts.min.js"></script><!--step1：引入 ECharts-->
<script type="text/javascript">
    //step3：基于准备好的dom，初始化echarts实例
    var myChart = echarts.init(document.getElementById('wrap0'));
    //step4：指定图表的配置项和数据
    var option = {
        title: {
            text: '开始学习ECharts'
        },
        tooltip: {},
        legend: {
            data: ['决定因素']
        },
        xAxis: {
            data: ["天赋","努力","兴趣","交流","心态","好学"]
        },
        yAxis: {
            // data: ['点数']
        },
        backgroundColor: '#fff',
        series: [{
            name: '决定因素',
            type: 'bar',
            data: [5, 20, 36, 10, 10, 20]
        }]

    }; 

    //step5: 使用刚指定的配置项和数据显示图表。
    myChart.setOption(option);
</script>

<ol>
<li><p>下载 <a href="http://echarts.baidu.com/download.html" target="_blank" rel="external">ECharts</a> ，由于是初学，随便下什么版本。然后像普通引入外部 JS 文件一样引入 Echarts ;</p>
</li>
<li><p>在 <code>body</code> 里面写一个具有宽高的容器，准备往里面塞 ECharts ：</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"wrap"</span> <span class="attr">style</span>=<span class="string">"width: 100%;height: 400px;"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure>
</li>
<li><p>基于准备好的 <code>dom</code> ，用 <code>echarts.init()</code> 初始化一个 ECharts 实例:</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> myChart = echarts.init(<span class="built_in">document</span>.getElementById(<span class="string">'wrap'</span>));</div></pre></td></tr></table></figure>
</li>
<li><p>指定图表配置和数据,具体见 <a href="http://echarts.baidu.com/option.html#title" target="_blank" rel="external">配置项手册</a>：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> option = &#123;</div><div class="line">	<span class="comment">//......</span></div><div class="line">&#125;;</div></pre></td></tr></table></figure>
</li>
<li><p>通过 <a href="http://echarts.baidu.com/api.html#echartsInstance.setOption" target="_blank" rel="external">setOption</a> 方法生成一个简单的柱状图，下面是完整代码。</p>
</li>
</ol>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">title</span>&gt;</span>demo1<span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"wrap1"</span> <span class="attr">style</span>=<span class="string">"width: 100%;height: 400px;"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">	<span class="comment">&lt;!--step2：先为echarts准备有宽高的容器--&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"echarts.min.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line">    <span class="comment">&lt;!--step1：引入 ECharts,src里面写你放ECharts的JS文件地址，可以是url--&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="javascript"></span></div><div class="line">		<span class="comment">//step3：基于准备好的dom，初始化echarts实例</span></div><div class="line">		<span class="keyword">var</span> myChart = echarts.init(<span class="built_in">document</span>.getElementById(<span class="string">'wrap1'</span>));</div><div class="line">		<span class="comment">//step4：指定图表的配置项和数据</span></div><div class="line">		<span class="keyword">var</span> option = &#123;</div><div class="line">			<span class="attr">title</span>: &#123;</div><div class="line">				<span class="attr">text</span>: <span class="string">'开始学习ECharts'</span></div><div class="line">			&#125;,</div><div class="line">			<span class="attr">tooltip</span>: &#123;&#125;,</div><div class="line">			<span class="attr">legend</span>: &#123;</div><div class="line">				<span class="attr">data</span>: [<span class="string">'决定因素'</span>]</div><div class="line">			&#125;,</div><div class="line">			<span class="attr">xAxis</span>: &#123;</div><div class="line">				<span class="attr">data</span>: [<span class="string">"天赋"</span>,<span class="string">"努力"</span>,<span class="string">"兴趣"</span>,<span class="string">"交流"</span>,<span class="string">"心态"</span>,<span class="string">"好学"</span>]</div><div class="line">			&#125;,</div><div class="line">			<span class="attr">yAxis</span>: &#123;</div><div class="line">				<span class="comment">// data: ['点数']</span></div><div class="line">			&#125;,</div><div class="line">            <span class="attr">backgroundColor</span>: <span class="string">'#91C7AE'</span>,</div><div class="line">			<span class="attr">series</span>: [&#123;</div><div class="line">				<span class="attr">name</span>: <span class="string">'决定因素'</span>,</div><div class="line">				<span class="attr">type</span>: <span class="string">'bar'</span>,</div><div class="line">				<span class="attr">data</span>: [<span class="number">5</span>, <span class="number">20</span>, <span class="number">36</span>, <span class="number">10</span>, <span class="number">10</span>, <span class="number">20</span>]</div><div class="line">			&#125;]</div><div class="line">		&#125;; </div><div class="line">		<span class="comment">//step5: 使用刚指定的配置项和数据显示图表。</span></div><div class="line">		myChart.setOption(option);</div><div class="line">	<span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>
<h3 id="入门-Demo-02"><a href="#入门-Demo-02" class="headerlink" title="入门 Demo 02"></a>入门 Demo 02</h3><p><div id="wrap2" style="width: 100%;height: 400px;"></div><!--step2：先为echarts准备有宽高的容器--><br><!-- <script src="echarts.min.js"></script> --></p>
<script type="text/javascript">
    var myChart = echarts.init(document.getElementById('wrap2'));
    myChart.setOption({
        series : [
            {
                name: '访问来源',
                type: 'pie',
                radius: '55%',
                roseType: 'angle',
                data:[
                    {value:235, name:'视频广告'},
                    {value:274, name:'联盟广告'},
                    {value:310, name:'邮件营销'},
                    {value:335, name:'直接访问'},
                    {value:400, name:'搜索引擎'}
                ]
            }
        ]
})
</script>

<blockquote>
<p>看看上面的demo，我们尝试画一个进化的饼图 —— 南丁格尔图</p>
</blockquote>
<ol>
<li><p>先画一个饼图：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> myChart = echarts.init(<span class="built_in">document</span>.getElementById(<span class="string">'wrap2'</span>));</div><div class="line">myChart.setOption(&#123;</div><div class="line">    <span class="attr">series</span> : [</div><div class="line">        &#123;</div><div class="line">            <span class="attr">name</span>: <span class="string">'访问来源'</span>,</div><div class="line">            <span class="attr">type</span>: <span class="string">'pie'</span>,</div><div class="line">            <span class="attr">radius</span>: <span class="string">'55%'</span>,</div><div class="line">            <span class="attr">data</span>:[</div><div class="line">                &#123;<span class="attr">value</span>:<span class="number">400</span>, <span class="attr">name</span>:<span class="string">'搜索引擎'</span>&#125;,</div><div class="line">                &#123;<span class="attr">value</span>:<span class="number">335</span>, <span class="attr">name</span>:<span class="string">'直接访问'</span>&#125;,</div><div class="line">                &#123;<span class="attr">value</span>:<span class="number">310</span>, <span class="attr">name</span>:<span class="string">'邮件营销'</span>&#125;,</div><div class="line">                &#123;<span class="attr">value</span>:<span class="number">274</span>, <span class="attr">name</span>:<span class="string">'联盟广告'</span>&#125;,</div><div class="line">                &#123;<span class="attr">value</span>:<span class="number">235</span>, <span class="attr">name</span>:<span class="string">'视频广告'</span>&#125;</div><div class="line">            ]</div><div class="line">        &#125;</div><div class="line">    ]</div><div class="line">&#125;)</div></pre></td></tr></table></figure>
</li>
<li><p>这里 <code>data</code> 属性值不像入门教程里那样每一项都是单个数值，而是一个包含 <code>name</code> 和 <code>value</code> 属性的对象，ECharts 中的数据项都是既可以只设成数值，也可以设成一个包含有名称、该数据图形的样式配置、标签配置的对象，具体见 <a href="http://echarts.baidu.com/option.html#series-pie.data" target="_blank" rel="external">data</a> 文档。</p>
</li>
</ol>
<ul>
<li><p>ECharts 中的饼图也支持通过设置 <a href="http://echarts.baidu.com/option.html#series-pie.roseType" target="_blank" rel="external">roseType</a> 显示成南丁格尔图。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">roseType: <span class="string">'angle'</span></div></pre></td></tr></table></figure>
</li>
<li><p>南丁格尔图会通过半径表示数据的大小。</p>
</li>
</ul>
<blockquote>
<p>还不够漂亮？试试美化一下吧</p>
</blockquote>
<p>添加阴影，使用到 <a href="http://echarts.baidu.com/tutorial.html#series-pie.itemStyle" target="_blank" rel="external">itemStyle</a>:<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">roseType: <span class="string">'angle'</span>,<span class="comment">//饼图转换成南丁格尔图</span></div><div class="line"><span class="comment">//添加阴影</span></div><div class="line">itemStyle: &#123;</div><div class="line">    	<span class="attr">normal</span>: &#123;</div><div class="line">        <span class="comment">// 阴影的大小</span></div><div class="line">        shadowBlur: <span class="number">200</span>,</div><div class="line">        <span class="comment">// 阴影水平方向上的偏移</span></div><div class="line">        shadowOffsetX: <span class="number">0</span>,</div><div class="line">        <span class="comment">// 阴影垂直方向上的偏移</span></div><div class="line">        shadowOffsetY: <span class="number">0</span>,</div><div class="line">        <span class="comment">// 阴影颜色</span></div><div class="line">        shadowColor: <span class="string">'rgba(0, 0, 0, 0.5)'</span></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p><div id="wrap3" style="width: 100%;height: 400px;"></div><!--step2：先为echarts准备有宽高的容器--></p>
<script src="echarts.min.js"></script>
<script type="text/javascript">
    var myChart = echarts.init(document.getElementById('wrap3'));
    myChart.setOption({
        series : [
            {
                name: '访问来源',
                type: 'pie',
                radius: '55%',
                data:[
                    {value:235, name:'视频广告'},
                    {value:274, name:'联盟广告'},
                    {value:310, name:'邮件营销'},
                    {value:335, name:'直接访问'},
                    {value:400, name:'搜索引擎'}
                ],
                roseType: 'angle',//饼图转换成南丁格尔图
                //添加阴影
                itemStyle: {
                        normal: {
                        // 阴影的大小
                        shadowBlur: 200,
                        // 阴影水平方向上的偏移
                        shadowOffsetX: 0,
                        // 阴影垂直方向上的偏移
                        shadowOffsetY: 0,
                        // 阴影颜色
                        shadowColor: 'rgba(0, 0, 0, 0.5)'
                    }
                }
            }
        ]
})
</script>

<p><code>itemStyle</code> 都会有 <code>normal</code> 和 <code>emphasis</code> 两个选项，<code>normal</code> 选项是正常展示下的样式，<code>emphasis</code> 是鼠标 <code>hover</code> 时候的高亮样式。这个示例里是正常的样式下加阴影，但是可能更多的时候是 <code>hover</code> 的时候通过阴影突出。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">itemStyle: &#123;</div><div class="line">    <span class="attr">emphasis</span>: &#123;</div><div class="line">        <span class="attr">shadowBlur</span>: <span class="number">200</span>,</div><div class="line">        <span class="attr">shadowColor</span>: <span class="string">'rgba(0, 0, 0, 0.5)'</span></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><div id="wrap4" style="width: 100%;height: 400px;"></div><!--step2：先为echarts准备有宽高的容器--></p>
<script src="echarts.min.js"></script>
<script type="text/javascript">
    var myChart = echarts.init(document.getElementById('wrap4'));
    myChart.setOption({
        series : [
            {
                name: '访问来源',
                type: 'pie',
                radius: '55%',
                data:[
                    {value:235, name:'视频广告'},
                    {value:274, name:'联盟广告'},
                    {value:310, name:'邮件营销'},
                    {value:335, name:'直接访问'},
                    {value:400, name:'搜索引擎'}
                ],
                roseType: 'angle',//饼图转换成南丁格尔图
                //添加阴影
                itemStyle: {
                    emphasis: {
                        shadowBlur: 200,
                        shadowColor: 'rgba(0, 0, 0, 0.5)'
                    }
                }
            }
        ]
})
</script>

<blockquote>
<p>设置深色背景和浅色标签</p>
</blockquote>
<ol>
<li><p>背景色是全局的，所以直接在 <code>option</code> 下设置 <a href="http://echarts.baidu.com/option.html#backgroundColor" target="_blank" rel="external">backgroundColor</a> :</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">setOption(&#123;</div><div class="line">    <span class="attr">backgroundColor</span>: <span class="string">'#2c343c'</span></div><div class="line">&#125;)</div></pre></td></tr></table></figure>
</li>
<li><p>文本的样式可以设置全局的 <a href="http://echarts.baidu.com/option.html#textStyle" target="_blank" rel="external">textStyle</a></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">setOption(&#123;</div><div class="line">    <span class="attr">textStyle</span>: &#123;</div><div class="line">        <span class="attr">color</span>: <span class="string">'rgba(255, 255, 255, 0.3)'</span></div><div class="line">    &#125;</div><div class="line">&#125;)</div></pre></td></tr></table></figure>
</li>
<li><p>也可以每个系列分别设置，每个系列的文本设置在 <a href="http://echarts.baidu.com/option.html#series-pie.label.normal.textStyle" target="_blank" rel="external">label.normal.textStyle</a></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">label: &#123;</div><div class="line">    <span class="attr">normal</span>: &#123;</div><div class="line">        <span class="attr">textStyle</span>: &#123;</div><div class="line">            <span class="attr">color</span>: <span class="string">'rgba(255, 255, 255, 0.3)'</span></div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>饼图的话还要将标签的视觉引导线的颜色设为浅色。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">labelLine: &#123;</div><div class="line">    <span class="attr">normal</span>: &#123;</div><div class="line">        <span class="attr">lineStyle</span>: &#123;</div><div class="line">            <span class="attr">color</span>: <span class="string">'rgba(255, 255, 255, 0.3)'</span></div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ol>
<p><div id="wrap5" style="width: 100%;height: 400px;"></div><br><!--step2：先为echarts准备有宽高的容器--></p>
<script src="echarts.min.js"></script>
<script type="text/javascript">
    var myChart = echarts.init(document.getElementById('wrap5'));
    myChart.setOption({
        // // 背景色是全局的，所以直接在 option 下设置 backgroundColor
        backgroundColor: '#2c343c',
        // // 文本的样式可以设置全局的 textStyle
        // textStyle: {
        //     color: 'rgba(255, 255, 255, 0.3)'
        // },//
        series : [
            {
                name: '访问来源',
                type: 'pie',
                radius: '55%',
                data:[
                    {value:235, name:'视频广告'},
                    {value:274, name:'联盟广告'},
                    {value:310, name:'邮件营销'},
                    {value:335, name:'直接访问'},
                    {value:400, name:'搜索引擎'}
                ],
                roseType: 'angle',//饼图转换成南丁格尔图
                // 添加阴影
                itemStyle: {
                        normal: {
                        // 阴影的大小
                        shadowBlur: 200,
                        // 阴影水平方向上的偏移
                        shadowOffsetX: 0,
                        // 阴影垂直方向上的偏移
                        shadowOffsetY: 0,
                        // 阴影颜色
                        shadowColor: 'rgba(0, 0, 0, 0.5)'
                    }
                },    
                // itemStyle: {
                //     emphasis: {
                //         shadowBlur: 200,
                //         shadowColor: 'rgba(0, 0, 0, 0.5)'
                //     }
                // }    


                //每个系列分别设置文本样式，每个系列的文本设置在 label.normal.textStyle                            
                label: {
                    normal: {
                        textStyle: {
                            color: 'rgba(255, 255, 255, 0.3)'
                        }
                    }
                },    

                //饼图的话还要将标签的视觉引导线的颜色设为浅色。
                labelLine: {
                    normal: {
                        lineStyle: {
                            color: 'rgba(255, 255, 255, 0.3)'
                        }
                    }
                }       
            }
        ]
})
</script>

<blockquote>
<p>设置扇形的颜色</p>
</blockquote>
<ol>
<li>扇形的颜色也是在 itemStyle 中设置：<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">itemStyle: &#123;</div><div class="line">    <span class="attr">normal</span>: &#123;</div><div class="line">        <span class="comment">// 设置扇形的颜色</span></div><div class="line">        color: <span class="string">'#c23531'</span>,</div><div class="line">        <span class="attr">shadowBlur</span>: <span class="number">200</span>,</div><div class="line">        <span class="attr">shadowColor</span>: <span class="string">'rgba(0, 0, 0, 0.5)'</span></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ol>
<p><div id="wrap6" style="width: 100%;height: 400px;"></div><br><!--step2：先为echarts准备有宽高的容器--></p>
<script src="echarts.min.js"></script>
<script type="text/javascript">
    var myChart = echarts.init(document.getElementById('wrap6'));
    myChart.setOption({
        // // 背景色是全局的，所以直接在 option 下设置 backgroundColor
        backgroundColor: '#2c343c',
        // // 文本的样式可以设置全局的 textStyle
        // textStyle: {
        //     color: 'rgba(255, 255, 255, 0.3)'
        // },//
        series : [
            {
                name: '访问来源',
                type: 'pie',
                radius: '55%',
                data:[
                    {value:235, name:'视频广告'},
                    {value:274, name:'联盟广告'},
                    {value:310, name:'邮件营销'},
                    {value:335, name:'直接访问'},
                    {value:400, name:'搜索引擎'}
                ],
                roseType: 'angle',//饼图转换成南丁格尔图
                // 添加阴影
                itemStyle: {
                        normal: {
                        // 阴影的大小
                        shadowBlur: 200,
                        // 阴影水平方向上的偏移
                        shadowOffsetX: 0,
                        // 阴影垂直方向上的偏移
                        shadowOffsetY: 0,
                        // 阴影颜色
                        shadowColor: 'rgba(0, 0, 0, 0.5)',
                        // 设置扇形的颜色
                        color: '#c23531',
                        shadowBlur: 200,
                        shadowColor: 'rgba(0, 0, 0, 0.5)'                        
                    }
                },    
                // itemStyle: {
                //     emphasis: {
                //         shadowBlur: 200,
                //         shadowColor: 'rgba(0, 0, 0, 0.5)'
                //     }
                // }    


                //每个系列分别设置文本样式，每个系列的文本设置在 label.normal.textStyle                            
                label: {
                    normal: {
                        textStyle: {
                            color: 'rgba(255, 255, 255, 0.3)'
                        }
                    }
                },    

                //饼图的话还要将标签的视觉引导线的颜色设为浅色。
                labelLine: {
                    normal: {
                        lineStyle: {
                            color: 'rgba(255, 255, 255, 0.3)'
                        }
                    }
                }       
            }
        ]
})
</script>

<ol>
<li><p>ECharts 中每个扇形颜色的可以通过分别设置 <code>data</code> 下的数据项实现。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">data: [&#123;</div><div class="line">    <span class="attr">value</span>:<span class="number">400</span>,</div><div class="line">    <span class="attr">name</span>:<span class="string">'搜索引擎'</span>,</div><div class="line">    <span class="attr">itemStyle</span>: &#123;</div><div class="line">        <span class="attr">normal</span>: &#123;</div><div class="line">            <span class="attr">color</span>: <span class="string">'c23531'</span></div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;, ...]</div></pre></td></tr></table></figure>
</li>
<li><p>但是这次因为只有明暗度的变化，所以有一种更快捷的方式是通过 <a href="http://echarts.baidu.com/tutorial.html#option.html#visualMap" target="_blank" rel="external">visualMap</a> 组件将数值的大小映射到明暗度。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">visualMap: &#123;</div><div class="line">    <span class="comment">// 不显示 visualMap 组件，只用于明暗度的映射</span></div><div class="line">    show: <span class="literal">false</span>,</div><div class="line">    <span class="comment">// 映射的最小值为 80</span></div><div class="line">    min: <span class="number">80</span>,</div><div class="line">    <span class="comment">// 映射的最大值为 600</span></div><div class="line">    max: <span class="number">600</span>,</div><div class="line">    <span class="attr">inRange</span>: &#123;</div><div class="line">        <span class="comment">// 明暗度的范围是 0 到 1</span></div><div class="line">        colorLightness: [<span class="number">0</span>, <span class="number">1</span>]</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ol>
<p><div id="wrap7" style="width: 100%;height: 400px;"></div><br><!--step2：先为echarts准备有宽高的容器--></p>
<script src="echarts.min.js"></script>
<script type="text/javascript">
    var myChart = echarts.init(document.getElementById('wrap7'));
    myChart.setOption({
        // // 背景色是全局的，所以直接在 option 下设置 backgroundColor
        backgroundColor: '#2c343c',
        // // 文本的样式可以设置全局的 textStyle
        // textStyle: {
        //     color: 'rgba(255, 255, 255, 0.3)'
        // },//

        visualMap: {
            // 不显示 visualMap 组件，只用于明暗度的映射
            show: false,
            // 映射的最小值为 80
            min: 80,
            // 映射的最大值为 600
            max: 600,
            inRange: {
                // 明暗度的范围是 0 到 1
                colorLightness: [0, 1]
            }
        },

        series : [
            {
                name: '访问来源',
                type: 'pie',
                radius: '55%',
                data:[
                    {value:235, name:'视频广告'},
                    {value:274, name:'联盟广告'},
                    {value:310, name:'邮件营销'},
                    {value:335, name:'直接访问'},
                    {value:400, name:'搜索引擎'}
                ],
                roseType: 'angle',//饼图转换成南丁格尔图
                // 添加阴影
                itemStyle: {
                        normal: {
                        // 阴影的大小
                        shadowBlur: 200,
                        // 阴影水平方向上的偏移
                        shadowOffsetX: 0,
                        // 阴影垂直方向上的偏移
                        shadowOffsetY: 0,
                        // 阴影颜色
                        shadowColor: 'rgba(0, 0, 0, 0.5)',
                        // 设置扇形的颜色
                        color: '#c23531',
                        shadowBlur: 200,
                        shadowColor: 'rgba(0, 0, 0, 0.5)'                        
                    }
                },    
                // itemStyle: {
                //     emphasis: {
                //         shadowBlur: 200,
                //         shadowColor: 'rgba(0, 0, 0, 0.5)'
                //     }
                // }    


                //每个系列分别设置文本样式，每个系列的文本设置在 label.normal.textStyle                            
                label: {
                    normal: {
                        textStyle: {
                            color: 'rgba(255, 255, 255, 0.3)'
                        }
                    }
                },    

                //饼图的话还要将标签的视觉引导线的颜色设为浅色。
                labelLine: {
                    normal: {
                        lineStyle: {
                            color: 'rgba(255, 255, 255, 0.3)'
                        }
                    }
                }       
            }
        ]
})
</script>






<hr>
]]></content>
      
        <categories>
            
            <category> 数据可视化 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 库 </tag>
            
            <tag> 图表库 </tag>
            
            <tag> ECharts </tag>
            
            <tag> 可视化 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[jQuery DOM & 事件]]></title>
      <url>http://licao404.com/2016/04/16/jQuery-DOM-%E4%BA%8B%E4%BB%B6/</url>
      <content type="html"><![CDATA[<blockquote>
<h3 id="【知识点】"><a href="#【知识点】" class="headerlink" title="【知识点】"></a>【知识点】</h3></blockquote>
<h4 id="1-说说库和框架的区别？"><a href="#1-说说库和框架的区别？" class="headerlink" title="1. 说说库和框架的区别？"></a><strong>1. 说说库和框架的区别？</strong></h4><ul>
<li><strong>库</strong> 是把一些可以复用的方法集中进行封装到一个<code>library</code>，提供<code>API</code>，我们通过这些<code>API</code>就可以调用这些已经封装好的方法，将代码写得更少/巧/强壮，以便简单快捷完成任务，提高生产力！比如 <code>jQuery</code> 就是更加接近一个库，要什么可以从中拿；</li>
<li><strong>框架</strong> 也算是库的一种，不过更加强调提供一种解决方案，给你搭好架子，代码怎样组织，所以不单单是具体的方法或函数，而是注重从细节到整体的宏观思路。<code>AngularJS</code> 就算是一个框架，因为它提供了一整套的解决方案；</li>
</ul>
<a id="more"></a>
<blockquote>
<p>对于小型应用来说，因为业务逻辑简单，代码总量不会太大，组织不会是太大的问题，所以用类库就够了；而面对中/大型项目，特别是需要多人共同参与的项目，选择一个合适的框架有助于写出规范的，易于理解的，易于回复的，低耦合的……等等的代码，在此基础上再使用各种类库来增加具体代码的健壮性与功能性则更好。</p>
</blockquote>
<h4 id="2-jQuery-能做什么？"><a href="#2-jQuery-能做什么？" class="headerlink" title="2. jQuery 能做什么？"></a><strong>2. jQuery 能做什么？</strong></h4><p>一言以蔽之，jQuery就是让我们能更加畅快舒爽地编写JavaScript，不必去编写蛋疼费时的原生JavaScript！它轻量，快速，功能丰富。</p>
<ul>
<li>可以简单快捷完成诸如JavaScript中的HTML元素选取和操作，CSS操作，HTML <code>DOM</code>遍历和操作，事件处理，特效，动画和<code>AJAX</code>交互。</li>
<li>jQuery提供<code>API</code>让开发者编写插件。其模块化的使用方式使开发者可以很轻松的开发出功能强大的静态或动态网页。</li>
</ul>
<h4 id="3-jQuery-对象和-DOM-原生对象有什么区别？如何转化？"><a href="#3-jQuery-对象和-DOM-原生对象有什么区别？如何转化？" class="headerlink" title="3. jQuery 对象和 DOM 原生对象有什么区别？如何转化？"></a><strong>3. jQuery 对象和 DOM 原生对象有什么区别？如何转化？</strong></h4><ul>
<li>DOM对象是通过原生JavaScript获得的对象，jQuery对象是通过jQuery选择器获得对象；</li>
<li>jQuery对象只能使用jQuery自己的属性和方法，DOM对象只能使用DOM的属性和方法，</li>
</ul>
<blockquote>
<p>jQuery对象转DOM对象</p>
</blockquote>
<p>我们可以通过类数组下标的获取方式或者get方法获取指定下标的<code>DOM</code>对象:<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"ct"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"item"</span>&gt;</span>item1<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"item"</span>&gt;</span>item2<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"item"</span>&gt;</span>item3<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>jQuery 对象是类数组对象，所以可通过数组下标获取数组中的DOM对象：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$(<span class="string">'.item'</span>)[<span class="number">2</span>];<span class="comment">//&lt;div class="item"&gt;item3&lt;/div&gt;</span></div><div class="line">$(<span class="string">'.item'</span>).eq(<span class="number">2</span>)[<span class="number">0</span>];<span class="comment">//&lt;div class="item"&gt;item3&lt;/div&gt;</span></div></pre></td></tr></table></figure></p>
<p>通过jQuery的<code>.get()</code>方法获得的直接是DOM对象：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$(<span class="string">'.item'</span>).get(<span class="number">2</span>);<span class="comment">//&lt;div class="item"&gt;item3&lt;/div&gt;</span></div></pre></td></tr></table></figure></p>
<blockquote>
<p>DOM对象转 jQuery 对象</p>
</blockquote>
<p>使用 <code>$()</code> 将DOM对象包裹起来就是jQuery对象：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> ct = <span class="built_in">document</span>.getElementById(<span class="string">'ct'</span>);<span class="comment">//DOM对象</span></div><div class="line"><span class="keyword">var</span> $ct = $(ct);<span class="comment">//$(DOM对象)转化为了jQuery对象$ct</span></div></pre></td></tr></table></figure></p>
<h4 id="4-jQuery中如何绑定事件？bind、unbind、delegate、live、on、off都有什么作用？推荐使用哪种？使用on绑定事件使用事件代理的写法？"><a href="#4-jQuery中如何绑定事件？bind、unbind、delegate、live、on、off都有什么作用？推荐使用哪种？使用on绑定事件使用事件代理的写法？" class="headerlink" title="4. jQuery中如何绑定事件？bind、unbind、delegate、live、on、off都有什么作用？推荐使用哪种？使用on绑定事件使用事件代理的写法？"></a><strong>4. jQuery中如何绑定事件？<code>bind</code>、<code>unbind</code>、<code>delegate</code>、<code>live</code>、<code>on</code>、<code>off</code>都有什么作用？推荐使用哪种？使用<code>on</code>绑定事件使用事件代理的写法？</strong></h4><p>jQuery中有很多绑定事件的方法<code>.bind()</code>,<code>.live()</code>,<code>.delegate()</code>,<code>.on()</code>,下面看看他们的区别：</p>
<ul>
<li><p><code>.bind()</code>：对于早期jQuery版本（1.7以前），<code>.bind()</code>方法用于直接将事件绑定在选中的元素上，所以<code>.bind()</code>在绑定事件的时候被选的元素必须存在；使用一次<code>.bind()</code>选择器匹配的元素会附加一个事件处理函数，而以后再添加的元素则不会有。为此需要再使用一次 <code>.bind()</code> 才行；</p>
</li>
<li><p><code>.unbind</code>：<code>.bind()</code>的反向操作，从每一个匹配的元素中删除绑定的事件。<br>如果没有参数，则删除所有绑定的事件，<code>.bind(typpe)</code>删除指定类型事件；</p>
</li>
<li><p><code>.live()</code>：（1.9版本已废弃,不建议使用，老版本建议使用<code>.delegate()</code>）默认使用了事件代理（绑定在祖先元素上的事件处理程序可以对后代上触发事件作出回应），没有将事件直接绑定在该元素上，而是绑定在<code>document</code>元素上（DOM树的根节点），</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"clickme"</span>&gt;</span>Click here<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></div><div class="line">$(<span class="string">'.clickme'</span>).live(<span class="string">'click'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">      alert(<span class="string">"Live handler called."</span>); <span class="comment">//事件冒泡`document`元素上，查看事件类型是否是click、</span></div><div class="line">      <span class="comment">//目标元素和选择器.clickme否匹配，</span></div><div class="line">      <span class="comment">//是则执行绑定的事件处理函数；</span></div><div class="line">&#125;);</div><div class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div></pre></td></tr></table></figure>
</li>
<li><p><code>.delegate()</code>：对于早期jQuery版本（1.7以前），<code>.delegate</code>是使用事件代理最有效的方式,</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">"background-color:red"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>这是一个段落。<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">button</span>&gt;</span>请点击这里<span class="tag">&lt;/<span class="name">button</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></div><div class="line">$(<span class="string">'div'</span>).delegate(<span class="string">'button'</span>,<span class="string">'click'</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    $(<span class="string">'p'</span>).slideToggle();<span class="comment">//将事件绑定到$('div')上，事件冒泡到$('div')上</span></div><div class="line">&#125;)<span class="comment">//查看是不是click事件，目标元素是不是button，如果都满足，就执行函数</span></div><div class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div></pre></td></tr></table></figure>
</li>
<li><p><code>.on()</code>：（1.7版本后<code>.on()</code>取代了<code>.bind()</code>,<code>.live()</code>,<code>.delegate()</code>，提供绑定事件处理的所有功能，<strong>强烈推荐</strong>）<br>事件代理</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$(<span class="string">"body"</span>).on(<span class="string">"click"</span>, <span class="string">"p"</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    alert( $(<span class="keyword">this</span>).text() );<span class="comment">//当点击段落时，显示该段落中的文本</span></div><div class="line">&#125;);javascript</div></pre></td></tr></table></figure>
</li>
<li><p><code>.off()</code>：移除用<code>.on()</code>绑定的事件处理程序。</p>
</li>
</ul>
<h4 id="5-jQuery-如何展示-隐藏元素？"><a href="#5-jQuery-如何展示-隐藏元素？" class="headerlink" title="5. jQuery 如何展示/隐藏元素？"></a><strong>5. jQuery 如何展示/隐藏元素？</strong></h4><ul>
<li><p><strong>.hide( speed, [callback] )</strong>：隐藏显示的元素，<br><code>speed</code>：表示速度的参数，可选（<code>slow</code>,<code>fast</code>,<code>normal</code>）或者毫秒数;<br><code>[callback]</code>:在动画完成时执行的函数，每个元素执行一次。<br>不设置参数就立即执行，没有动画；</p>
</li>
<li><p><strong>.show(speed,callback)</strong>：显示隐藏的元素；</p>
</li>
</ul>
<h4 id="6-jQuery-动画如何使用？"><a href="#6-jQuery-动画如何使用？" class="headerlink" title="6. jQuery 动画如何使用？"></a><strong>6. jQuery 动画如何使用？</strong></h4><p><strong>.animate(params,[speed],[callback])</strong> 函数用来创建自定义动画，这个函数的关键在于指定动画形式及结果样式属性对象。这个对象中每个属性都表示一个可以变化的样式属性（如“height”、“top”或“opacity”）。注意：所有指定的属性必须用骆驼形式，比如用marginLeft代替margin-left.<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="css"></span></div><div class="line">    <span class="selector-class">.box</span>&#123;</div><div class="line">        <span class="attribute">width</span>: <span class="number">50px</span>;</div><div class="line">        <span class="attribute">height</span>:<span class="number">50px</span>;</div><div class="line">        <span class="attribute">background-color</span>: red;</div><div class="line">    &#125;</div><div class="line">    <span class="selector-class">.btn</span>&#123;</div><div class="line">      <span class="attribute">margin-bottom</span>:<span class="number">10px</span>;</div><div class="line">    &#125;</div><div class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">"btn"</span>&gt;</span>Click<span class="tag">&lt;/<span class="name">button</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"box"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></div><div class="line">  $(<span class="string">'.btn'</span>).on(<span class="string">'click'</span>,<span class="function"><span class="keyword">function</span> <span class="title">repeat</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    $(<span class="string">'.box'</span>).animate(&#123;</div><div class="line">      <span class="attr">width</span>:<span class="string">"100px"</span>,</div><div class="line">      <span class="attr">height</span>:<span class="string">"100px"</span>,</div><div class="line">      <span class="attr">opacity</span>:<span class="number">0.5</span></div><div class="line">    &#125;,<span class="number">1000</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">      $(<span class="keyword">this</span>).animate(&#123;</div><div class="line">        <span class="attr">width</span>:<span class="string">"50px"</span>,</div><div class="line">        <span class="attr">height</span>:<span class="string">"50px"</span>,</div><div class="line">        <span class="attr">opacity</span>:<span class="number">1</span></div><div class="line">      &#125;,<span class="number">1000</span>,repeat());</div><div class="line">    &#125;);</div><div class="line">  &#125;);</div><div class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>效果：<br><img src="http://7xr868.com1.z0.glb.clouddn.com/task25/animate%28%29.gif" alt=""></p>
<h4 id="7-如何设置和获取元素内部-HTML-内容？如何设置和获取元素内部文本？"><a href="#7-如何设置和获取元素内部-HTML-内容？如何设置和获取元素内部文本？" class="headerlink" title="7. 如何设置和获取元素内部 HTML 内容？如何设置和获取元素内部文本？"></a><strong>7. 如何设置和获取元素内部 HTML 内容？如何设置和获取元素内部文本？</strong></h4><ul>
<li><p><strong><code>$(selector).html()</code></strong>用于获取<strong>第一个</strong>匹配元素的内容，。这个函数不能用于XML文档，但可以用于XHTML文档。如果选择器匹配多个元素，那么只有第一个匹配元素的 HTML 内容会被获取；</p>
</li>
<li><p><strong><code>$(selector).html( htmlString )</code></strong>用于设定每一个匹配元素的html内容;也可以通过函数来设置html内容：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">$(<span class="string">'div.demo-container'</span>).html(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="keyword">var</span> emph = <span class="string">'&lt;em&gt;'</span> + $(<span class="string">'p'</span>).length + <span class="string">' paragraphs!&lt;/em&gt;'</span>;</div><div class="line">  <span class="keyword">return</span> <span class="string">'&lt;p&gt;All new content for '</span> + emph + <span class="string">'&lt;/p&gt;'</span>;</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
</li>
<li><p><strong><code>$(selector).text()</code></strong>取得所有匹配元素的文本内容。这个方法对HTML和XML文档都有效。注意：<code>.text()</code> 方法不能使用在 <code>input</code> 元素或<code>scripts</code>元素上。 <code>input</code> 或 <code>textarea</code> 需要使用 <strong><code>.val()</code></strong> 方法获取或设置文本值。得到<code>scripts</code>元素的值，使用<code>.html()</code>方法</p>
</li>
<li><p><strong><code>$(selecor).text( textString )</code></strong>用于设置每一个匹配元素的文本内容；也可以通过函数来设置：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$(<span class="string">"p"</span>).text(<span class="function"><span class="keyword">function</span>(<span class="params">n</span>)</span>&#123;</div><div class="line">    <span class="keyword">return</span> <span class="string">"这个 p 元素的 index 是："</span> + n;</div><div class="line">    &#125;);</div></pre></td></tr></table></figure>
</li>
</ul>
<h4 id="8-如何设置和获取表单用户输入或者选择的内容？如何设置和获取元素属性？"><a href="#8-如何设置和获取表单用户输入或者选择的内容？如何设置和获取元素属性？" class="headerlink" title="8. 如何设置和获取表单用户输入或者选择的内容？如何设置和获取元素属性？"></a><strong>8. 如何设置和获取表单用户输入或者选择的内容？如何设置和获取元素属性？</strong></h4><ul>
<li><p><strong><code>$(selector).val()</code></strong>获取匹配元素的当前（输入/选择）值，如果多选，将返回一个数组，其包含所选的值。例如：如果是<code>select</code>元素， 当没有选择项被选中，它返回<code>null</code>;如果<code>select</code>元素有<code>multiple</code>（多选）属性，并且至少一个选择项被选中，<code>.val()</code>方法返回一个数组，这个数组包含每个选中选择项的值；</p>
</li>
<li><p><strong><code>$(selector).val(value)</code></strong>设置匹配元素输入或选择的值；也可以通过函数设定文本框的值；</p>
</li>
</ul>
<blockquote>
<p>例如将文本框输入变为大写：</p>
</blockquote>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">class</span>=<span class="string">"ipt"</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"ipt"</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></div><div class="line">    $(<span class="string">'.ipt'</span>).on(<span class="string">'keyup'</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">      $(<span class="keyword">this</span>).val($(<span class="keyword">this</span>).val().toUpperCase());</div><div class="line">    &#125;);</div><div class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div></pre></td></tr></table></figure>
<ul>
<li><strong><code>.attr(name|properties|key,value|fn)</code></strong>获取匹配的元素集合中的<strong>第一个</strong>元素的属性的值  或 设置每一个匹配元素的一个或多个属性。<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//  设置一个属性</span></div><div class="line">$(<span class="string">'#img1'</span>).attr(<span class="string">'alt'</span>, <span class="string">'rain'</span>);</div><div class="line"></div><div class="line"><span class="comment">//设置多个属性</span></div><div class="line">$(<span class="string">'#img1'</span>).attr(&#123;</div><div class="line">  <span class="attr">alt</span>: <span class="string">'rain'</span>,</div><div class="line">  <span class="attr">title</span>: <span class="string">'cloud'</span></div><div class="line">&#125;);</div><div class="line"></div><div class="line"><span class="comment">//设置函数返回</span></div><div class="line">$(<span class="string">"img"</span>).attr(<span class="string">"title"</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123; <span class="keyword">return</span> <span class="keyword">this</span>.src &#125;);</div></pre></td></tr></table></figure>
</li>
</ul>
<hr>
<blockquote>
<h3 id="【练习】"><a href="#【练习】" class="headerlink" title="【练习】"></a>【练习】</h3></blockquote>
<h4 id="1-使用-jQuery实现如下效果"><a href="#1-使用-jQuery实现如下效果" class="headerlink" title="1. 使用 jQuery实现如下效果"></a><strong>1. 使用 jQuery实现如下效果</strong></h4><p><img src="http://7xnk1s.com2.z0.glb.qiniucdn.com/8-1.gif" alt=""></p>
<ul>
<li><strong><a href="http://febox.applinzi.com/task25/task25-1.html" target="_blank" rel="external">效果点我</a></strong></li>
<li><strong><a href="http://js.jirengu.com/vor/8/edit?html" target="_blank" rel="external">瞅瞅代码</a></strong></li>
</ul>
<h4 id="2-使用-jQuery实现如下效果"><a href="#2-使用-jQuery实现如下效果" class="headerlink" title="2. 使用 jQuery实现如下效果"></a><strong>2. 使用 jQuery实现如下效果</strong></h4><p><img src="http://7xnk1s.com2.z0.glb.qiniucdn.com/8-2.gif" alt=""></p>
<blockquote>
<p><strong>问题：</strong> 点奢侈品2的时候页面跳到了顶部，可能是什么原因？如何解决</p>
</blockquote>
<ul>
<li><strong><a href="http://febox.applinzi.com/task25/task25-2.html" target="_blank" rel="external">效果点我</a></strong></li>
<li><strong><a href="http://js.jirengu.com/doj/1/edit?html" target="_blank" rel="external">瞅瞅代码</a></strong></li>
</ul>
<h4 id="3-使用-jQuery实现如下效果"><a href="#3-使用-jQuery实现如下效果" class="headerlink" title="3. 使用 jQuery实现如下效果"></a><strong>3. 使用 jQuery实现如下效果</strong></h4><p><img src="http://7xnk1s.com2.z0.glb.qiniucdn.com/8-3-1.gif" alt=""></p>
<ul>
<li><strong><a href="http://febox.applinzi.com/task25/task25-3.html" target="_blank" rel="external">效果点我</a></strong></li>
<li><strong><a href="http://js.jirengu.com/duh/3/edit?html" target="_blank" rel="external">瞅瞅代码</a></strong></li>
</ul>
<blockquote>
<p><strong>提示</strong></p>
</blockquote>
<p>1.使用代理<br>2.当点击按钮时使用如下数据<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> products = [</div><div class="line">    &#123;</div><div class="line">        <span class="attr">img</span>: <span class="string">'http://img10.360buyimg.com/N3/jfs/t2242/92/1446546284/374195/9196ac66/56af0958N1a723458.jpg'</span>,</div><div class="line">        <span class="attr">name</span>: <span class="string">'珂兰 黄金手 猴哥款'</span>,</div><div class="line">        <span class="attr">price</span>: <span class="string">'￥405.00'</span></div><div class="line">    &#125;,&#123;</div><div class="line">        <span class="attr">img</span>: <span class="string">'http://img10.360buyimg.com/N3/jfs/t2242/92/1446546284/374195/9196ac66/56af0958N1a723458.jpg'</span>,</div><div class="line">        <span class="attr">name</span>: <span class="string">'珂兰 黄金转运珠 猴哥款'</span>,</div><div class="line">        <span class="attr">price</span>: <span class="string">'￥100.00'</span></div><div class="line">    &#125;,&#123;</div><div class="line">        <span class="attr">img</span>: <span class="string">'http://img10.360buyimg.com/N3/jfs/t2242/92/1446546284/374195/9196ac66/56af0958N1a723458.jpg'</span>,</div><div class="line">        <span class="attr">name</span>: <span class="string">'珂兰 黄金手链 3D猴哥款'</span>,</div><div class="line">        <span class="attr">price</span>: <span class="string">'￥45.00'</span></div><div class="line">    &#125;</div><div class="line">];</div></pre></td></tr></table></figure></p>
<hr>
<blockquote>
<p>参考：</p>
</blockquote>
<ul>
<li><a href="http://jquery.cuishifeng.cn/" target="_blank" rel="external">jQuery API 1.12 中文文档</a></li>
<li><a href="http://www.css88.com/jqapi-1.9/" target="_blank" rel="external">jQuery API 中文文档</a></li>
</ul>
<hr>
]]></content>
      
        <categories>
            
            <category> 编程学习 </category>
            
            <category> 前端基础 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> JavaScript </tag>
            
            <tag> jQuery </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[AJAX-从入门到放弃]]></title>
      <url>http://licao404.com/2016/04/12/Ajax%E6%B5%85%E5%85%A5%E9%97%A8/</url>
      <content type="html"><![CDATA[<blockquote>
<h3 id="【知识点】"><a href="#【知识点】" class="headerlink" title="【知识点】"></a>【知识点】</h3></blockquote>
<h4 id="AJAX-是什么？有什么作用？"><a href="#AJAX-是什么？有什么作用？" class="headerlink" title="AJAX 是什么？有什么作用？"></a><strong>AJAX 是什么？有什么作用？</strong></h4><p>AJAX（<strong>Asynchronous Javascript And XML</strong>）即异步的JavaScript和XML，是一种创建交互式网页应用的网页开发技术，所以并不是一门编程语言（小白多少年以为它诸如JavaScript，jQuery一类<code>(@_@;)</code>,身份终于得到正名）。</p>
<p>通过在后台与服务器进行少量的数据交换，AJAX可以使网页实现异步更新，这意味着可以在不重新加载（刷新）整个网页的情况下，对网页某部分进行更新。<br><a id="more"></a><br>AJAX的核心、基础是JavaScript的 <strong>XMLHttpRequest</strong> 对象（<code>IE7+、Firefox、Chrome、Safari and Opera</code>），这个对象为向服务器发送请求和解析服务器响应提供了流畅的接口，XmlHttpRequest可以使用JavaScript向服务器提出请求并处理响应，而不阻塞用户。通过以下代码创建一个XMLHttpRequest对象：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> xmlhttp = <span class="keyword">new</span> XMLHttpRequest();</div></pre></td></tr></table></figure></p>
<p>老版本IE浏览器（IE5，6）使用<code>ActiveX</code>对象：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> xmlhttp = <span class="keyword">new</span> ActiveXObject();</div></pre></td></tr></table></figure></p>
<p>尝试写一个浏览器兼容的创建XHR对象的函数：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">creatXHR</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="keyword">var</span> xmlhttp;</div><div class="line">    <span class="keyword">if</span> (<span class="built_in">window</span>.XMLHttpRequest) &#123;</div><div class="line">        <span class="comment">//IE7+、Firefox、Chrome、Safari and Opera</span></div><div class="line">        xmlhttp = <span class="keyword">new</span> XMLHttpRequest();</div><div class="line">    &#125;<span class="keyword">else</span>&#123;</div><div class="line">        <span class="comment">//IE5，6</span></div><div class="line">        xmlhttp = <span class="keyword">new</span> ActiveXObject(<span class="string">"Microsoft.XMLHTTP"</span>);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> xmlhttp;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<blockquote>
<p>这个函数貌似只是个思路(草稿)？我们试试让他更加丰满的吧，教你封装一个“<a href="#01">ajax()函数</a>”.</p>
</blockquote>
<p>创建了XMLHttpRequest对象后，我们需要给对象的 <strong>onreadystatechange</strong> 属性绑定事件监听函数，告诉服务器接收到请求然后应该去干什么：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">xmlhttp.onreadystatechange = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="comment">//Something you want to do ...</span></div><div class="line">    <span class="built_in">console</span>.log(xmlhttp.status);</div><div class="line">    <span class="keyword">if</span> (xmlhttp.readyState == <span class="number">4</span> &amp;&amp; xmlhttp.status == <span class="number">200</span>) &#123;</div><div class="line">        <span class="comment">//do something</span></div><div class="line">    &#125;</div><div class="line">    <span class="keyword">if</span>(xmlhtt.status === <span class="number">404</span>)&#123;</div><div class="line">        <span class="comment">//do something</span></div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure></p>
<p>然后发送请求，有两个重要方法 <strong>open()</strong> 和 <strong>send()</strong> ：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">xmlhttp.open(<span class="string">"GET"</span>,<span class="string">"example.php"</span>,<span class="literal">true</span>)</div></pre></td></tr></table></figure></p>
<blockquote>
<p><code>open()</code>方法内的3个参数：<br><strong><code>1).</code></strong> <code>method</code>规定HTTP请求的方式，一般是<code>GET</code>或者<code>POST</code>（按照HTTP规范,该参数要大写;否则,某些浏览器(如Firefox)可能无法处理请求。HTTP有<a href="https://www.w3.org/Protocols/rfc2616/rfc2616-sec9.html" target="_blank" rel="external">9种请求方式</a><br><strong><code>2).</code></strong> 请求页面的<code>url</code>，注意不能<strong>跨域请求</strong>,否则会有<code>permission denied</code>错误；<br><strong><code>3).</code></strong> <code>asunc</code>:设置为 <strong>true</strong> 异步模式，JavaScript函数将继续执行,而不等待服务器响应.这就是”AJAX”中的”A”；设置为 <strong>false</strong> 同步模式，只能等待服务器响应而无法继续进行其他；</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">xmlhttp.send();</div><div class="line">xmlhttp.send(string);</div></pre></td></tr></table></figure>
<blockquote>
<p>如果采用了<code>GET</code>方式，直接<code>send()</code>后进行其他操作;如果采用了<code>POST</code>方式，<code>send()</code>方法的参数可以使任何想发给服务器的数据，规定必须是字符串的形式；</p>
</blockquote>
<p><strong>readyState</strong> ：</p>
<ul>
<li>0 ：请求未初始化</li>
<li>1 ：服务器连接已建立</li>
<li>2 ：请求已接收</li>
<li>3 ：请求处理中</li>
<li>4 ：请求完成，响应就绪</li>
</ul>
<p><strong>status</strong> ：</p>
<ul>
<li>202 ： “OK”</li>
<li>404 ： 未找到资源</li>
</ul>
<h4 id="前后端开发联调需要注意哪些事情？后端接口完成前如何-mock-数据？"><a href="#前后端开发联调需要注意哪些事情？后端接口完成前如何-mock-数据？" class="headerlink" title="前后端开发联调需要注意哪些事情？后端接口完成前如何 mock 数据？"></a><strong>前后端开发联调需要注意哪些事情？后端接口完成前如何 mock 数据？</strong></h4><p>前后端纯接口开发模式：<br><strong><code>1).</code></strong> 在开发之前规定好接口文档，并指明由谁来撰写和维护；<br><strong><code>2).</code></strong> 如果接口的信息改动需要互相确认改动信息；<br><strong><code>3).</code></strong> 确定接口数据传输类型，JSON、XML or JSONP；<br><strong><code>4).</code></strong> 定义数据管理和归属权，是属于前端管理还是后端管理；<br><strong><code>5).</code></strong> 确定数据传输方式，前后端之间是否有中间层；</p>
<p>后端接口完成前如何 mock 数据：<br><strong><code>1).</code></strong> 自己制作模拟数据，但这种方式工作量比较大，而且需要收集分类要求的数据，如果<code>API</code>变更，之前的所有数据也需要及时更新。但这样的好处是能够快速的完成前端任务；<br><strong><code>2).</code></strong> 使用模拟数据生成器：<a href="http://mockjs.com/" target="_blank" rel="external">Mock.js</a>；</p>
<h4 id="点击按钮，使用-AJAX-获取数据，如何在数据到来之前防止重复点击"><a href="#点击按钮，使用-AJAX-获取数据，如何在数据到来之前防止重复点击" class="headerlink" title="点击按钮，使用 AJAX 获取数据，如何在数据到来之前防止重复点击?"></a><strong>点击按钮，使用 AJAX 获取数据，如何在数据到来之前防止重复点击?</strong></h4><p><strong><code>1).</code></strong> 这个只知道可以通过设置一个表示状态的<code>flag</code>，初始化值为<code>false</code>，即：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> flag = <span class="literal">false</span>;</div></pre></td></tr></table></figure></p>
<p><strong><code>2).</code></strong> 然后在绑定事件函数内部flag值设为<code>true</code>，当前可用,函数返回。例如：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">btn.addEventListener(<span class="string">'click'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">e</span>) </span>&#123;</div><div class="line">    <span class="comment">//......</span></div><div class="line">    flag = <span class="literal">true</span>;</div><div class="line">    <span class="keyword">if</span>(flag)&#123;</div><div class="line">        <span class="keyword">return</span>;</div><div class="line">    &#125;</div><div class="line">&#125;);</div></pre></td></tr></table></figure></p>
<p><strong><code>3).</code></strong> 请求数据时，函数flag设为false，保证其重复点击不请求。<br>……待续</p>
<hr>
<blockquote>
<h3 id="【练习】"><a href="#【练习】" class="headerlink" title="【练习】"></a>【练习】</h3></blockquote>
<h4 id="封装一个-AJAX-函数，能通过如下方式调用"><a href="#封装一个-AJAX-函数，能通过如下方式调用" class="headerlink" title="封装一个 AJAX 函数，能通过如下方式调用"></a><strong>封装一个 AJAX 函数，能通过如下方式调用</strong></h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">document</span>.querySelector(<span class="string">'#btn'</span>).addEventListener(<span class="string">'click'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    ajax(&#123;</div><div class="line">        <span class="attr">url</span>: <span class="string">'getData.php'</span>,   <span class="comment">//接口地址</span></div><div class="line">        type: <span class="string">'get'</span>,               <span class="comment">// 类型， post 或者 get,</span></div><div class="line">        data: &#123;</div><div class="line">            <span class="attr">username</span>: <span class="string">'xiaoming'</span>,</div><div class="line">            <span class="attr">password</span>: <span class="string">'abcd1234'</span></div><div class="line">        &#125;,</div><div class="line">        <span class="attr">success</span>: <span class="function"><span class="keyword">function</span>(<span class="params">ret</span>)</span>&#123;</div><div class="line">            <span class="built_in">console</span>.log(ret);       <span class="comment">// &#123;status: 0&#125;</span></div><div class="line">        &#125;,</div><div class="line">        <span class="attr">error</span>: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">           <span class="built_in">console</span>.log(<span class="string">'出错了'</span>)</div><div class="line">        &#125;</div><div class="line">    &#125;)</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p><a id="01" name="01"> </a></p>
<blockquote>
<p>将其封装成一个<a href="https://github.com/jirengu-inc/jrg-tehui2/blob/master/homework/%E6%9D%8E%E6%93%8D/task24/js/ajax.js" target="_blank" rel="external">ajax.js</a>，以便让我们以后尽情的调用它，代码如下：</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> xmlhttp = <span class="literal">false</span>;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">ajax</span>(<span class="params">opts</span>) </span>&#123;</div><div class="line">    <span class="comment">//跨浏览器创建xhr对象</span></div><div class="line">    xmlhttp = <span class="literal">false</span>;</div><div class="line">    <span class="keyword">if</span> (<span class="built_in">window</span>.XMLHttpRequest) &#123; <span class="comment">//现代浏览器</span></div><div class="line">        xmlhttp = <span class="keyword">new</span> XMLHttpRequest();</div><div class="line">        <span class="keyword">if</span> (xmlhttp.overrideMimeType) &#123; <span class="comment">//设置MIME类别，针对某些特定版本的mozillar浏览器的BUG进行修正</span></div><div class="line">            xmlhttp.overrideMimeType(<span class="string">'text/xml'</span>);</div><div class="line">        &#125;</div><div class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="built_in">window</span>.ActiveXObject) &#123; <span class="comment">//IE5,6</span></div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            xmlhttp = <span class="keyword">new</span> ActiveXObject(<span class="string">"Msxm12.XMLHTTP"</span>);</div><div class="line">        &#125; <span class="keyword">catch</span> (e) &#123;</div><div class="line">            <span class="keyword">try</span> &#123;</div><div class="line">                xmlhttp = <span class="keyword">new</span> ActiveXObject(<span class="string">"Microsoft.XMLHTTP"</span>);</div><div class="line">            &#125; <span class="keyword">catch</span> (e) &#123;&#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">if</span> (!xmlhttp) &#123; <span class="comment">//异常，创建xhr对象实例失败</span></div><div class="line">        alert(<span class="string">'Giving up :( Cannot create an XMLHTTP instance'</span>);</div><div class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line"></div><div class="line">    xmlhttp.onreadystatechange = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">        <span class="keyword">if</span> (xmlhttp.readyState == <span class="number">4</span> &amp;&amp; xmlhttp.status == <span class="number">200</span>) &#123;</div><div class="line">            <span class="keyword">var</span> json = <span class="built_in">JSON</span>.parse(xmlhttp.responseText);</div><div class="line">            opts.success(json);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span> (xmlhttp.readyState == <span class="number">4</span> &amp;&amp; xmlhttp.status == <span class="number">404</span>) &#123;</div><div class="line">            opts.error();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">var</span> dataStr = <span class="string">''</span>;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> key <span class="keyword">in</span> opts.data) &#123;</div><div class="line">        dataStr += key + <span class="string">'='</span> + opts.data[key] + <span class="string">'&amp;'</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="comment">// dataStr = dataStr.substr(0,dataStr.length-1);</span></div><div class="line">    dataStr = dataStr.replace(<span class="regexp">/&amp;$/g</span>, <span class="string">''</span>);</div><div class="line"></div><div class="line">    <span class="keyword">if</span> (opts.type.toLowerCase() === <span class="string">'post'</span>) &#123;</div><div class="line">        xmlhttp.open(opts.type, opts.url, <span class="literal">true</span>);</div><div class="line">        xmlhttp.setRequestHeader(<span class="string">"Content-type"</span>, <span class="string">"application/x-www-form-urlencoded"</span>);</div><div class="line">        xmlhttp.send(dataStr);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">if</span> (opts.type.toLowerCase() === <span class="string">'get'</span>) &#123;</div><div class="line">        xmlhttp.open(opts.type, opts.url + <span class="string">'?'</span> + dataStr, <span class="literal">true</span>);</div><div class="line">        xmlhttp.send();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="实现如下”加载更多”的功能"><a href="#实现如下”加载更多”的功能" class="headerlink" title="实现如下”加载更多”的功能"></a><strong>实现如下”加载更多”的功能</strong></h4><ul>
<li><a href="http://febox.applinzi.com/task24-2/task24-2.html" target="_blank" rel="external">效果点我点我</a></li>
<li>瞅瞅代码：<a href="https://github.com/licao404/landemo/blob/master/task24-2/task24-2.html" target="_blank" rel="external">index.html</a> | <a href="https://github.com/licao404/landemo/blob/master/js/ajax.js" target="_blank" rel="external">ajax.js</a></li>
</ul>
<h4 id="实现注册表单验证功能"><a href="#实现注册表单验证功能" class="headerlink" title="实现注册表单验证功能"></a><strong>实现注册表单验证功能</strong></h4><ul>
<li><a href="http://febox.applinzi.com/task24-3/task24-3.html" target="_blank" rel="external">效果点我点我</a></li>
<li>瞅瞅代码：<a href="https://github.com/licao404/landemo/blob/master/task24-3/task24-3.html" target="_blank" rel="external">index.html</a> | <a href="https://github.com/licao404/landemo/blob/master/js/ajax.js" target="_blank" rel="external">ajax.js</a> | <a href="https://github.com/licao404/landemo/blob/master/js/checkIpt.js" target="_blank" rel="external">checkIpt.js</a> | <a href="https://github.com/licao404/landemo/blob/master/js/doClass.js" target="_blank" rel="external">doClass.js</a></li>
</ul>
<hr>
<blockquote>
<p>参考:</p>
</blockquote>
<ul>
<li><a href="https://developer.mozilla.org/zh-CN/docs/AJAX/Getting_Started" target="_blank" rel="external">MDN | AJAX入门</a></li>
</ul>
<hr>
]]></content>
      
        <categories>
            
            <category> 编程学习 </category>
            
            <category> 前端基础 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> JavaScript </tag>
            
            <tag> AJAX </tag>
            
            <tag> 前后端 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[使用XAMPP搭建本地Apache服务器]]></title>
      <url>http://licao404.com/2016/04/10/%E4%BD%BF%E7%94%A8XAMPP%E6%90%AD%E5%BB%BA%E6%9C%AC%E5%9C%B0Web%E6%9C%8D%E5%8A%A1%E5%99%A8/</url>
      <content type="html"><![CDATA[<blockquote class="blockquote-center">Web服务器的搭建，例如<a href="http://baike.baidu.com/link?url=MroN_mSBbcJL21A0lYqZlh5FNT3Hukj2ZfurTNf0gxr904iT7hc7zrVaLUC8UuXLTT8ABpm16ilURuOMOMwma9b2R011L2tqMeugghpPt9W" target="_blank" rel="external">Apache</a>，对初学者来说并不是简单事，如果还想添加PHP、MySQL等，就更难了。如果我们借助一些集成软件包，一切操作都简单了。而本文使用的XAMPP，就是这样一个易于安装且包含 MySQL、PHP 和 Perl 的 Apache 发行版，其他类似软件还有<a href="http://www.wampserver.com/en/" target="_blank" rel="external">wamp</a>等</blockquote>

<h3 id="安装及配置"><a href="#安装及配置" class="headerlink" title="安装及配置"></a>安装及配置</h3><a id="more"></a>
<p><strong>1）</strong>.XAMPP是全平台的，直接在<a href="https://www.apachefriends.org/zh_cn/index.html" target="_blank" rel="external">官网</a>下载系统对应的版本：<a href="https://www.apachefriends.org/xampp-files/5.6.19/xampp-win32-5.6.19-0-VC11-installer.exe" target="_blank" rel="external">XAMPP for Windows</a>  |  <a href="https://www.apachefriends.org/xampp-files/5.6.19/xampp-linux-x64-5.6.19-0-installer.run" target="_blank" rel="external">XAMPP for Linux</a>  |  <a href="https://www.apachefriends.org/xampp-files/5.6.19/xampp-osx-5.6.19-0-installer.dmg" target="_blank" rel="external">XAMPP for OS X</a></p>
<p><strong>2）</strong>.安装XAMPP，不要安装到C盘，安装过程就不详细展开，不了解的可自行搜索。建议至少安装Apache、MySQL、PHP、以及phpMyAdmin；</p>
<p><strong>3）</strong>.新建一个文件夹来存放网站代码，比如我在D盘下新建<code>myWeb</code>文件夹；</p>
<p><strong>4）</strong>.安装完成后，打开安装目录下的<code>apache</code>文件夹下的<code>conf</code>文件夹下的<code>httpd.conf</code>文件（记事本或其他文本编辑器）。修改<br><code>DocumentRoot</code>目录（该目录就是网站代码的路径），大概在240行附近，将其改为刚刚新建的文件夹的路径，例如：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">DocumentRoot &quot;D:/myWeb&quot;</div><div class="line">&lt;Directory &quot;D:/myWeb&quot;&gt;</div></pre></td></tr></table></figure></p>
<p><strong>5）</strong>.在<code>C:\Windows\System32\drivers\etc</code>目录下修改<code>host</code>，加入<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">127.0.0.1 www.licao-train.com</div></pre></td></tr></table></figure></p>
<blockquote>
<p>这一步的目的是让你后面在浏览器输入<code>www.licao-train.com</code>域名能定位到你的代码目录（这里是<code>myWeb</code>目录），当然域名可以替换。</p>
</blockquote>
<h3 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h3><p><strong>1）</strong>.在存放网站代码文件夹里(这里是myWeb文件夹)新建一个php文件<code>hello.php</code>，打开文件编写php代码：<br><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;?php</span> </div><div class="line">    <span class="keyword">echo</span> <span class="string">"hello php"</span>; </div><div class="line">    phpinfo(); </div><div class="line"><span class="meta">?&gt;</span></div></pre></td></tr></table></figure></p>
<p><strong>2）</strong>.保存退出，打开XAMPP，启动Apache和MySQL（start）；</p>
<p><strong>3）</strong>.在浏览器地址栏输入<code>http://localhost/index.php</code>或者<code>http://www.licao-train.com/hello.php</code>，看是否可以访问刚刚新建的<code>php</code>文件：<br><img src="http://7xr868.com1.z0.glb.clouddn.com/task23/XAMPP%E9%85%8D%E7%BD%AE%E5%B1%95%E7%A4%BA.png" alt=""></p>
<p>到这里，你的Apache服务器+PHP基本上已经搭建好了。遇到不可测的问题可以在下面回复，我们一起学习。</p>
<hr>
]]></content>
      
        <categories>
            
            <category> 计算机基础 </category>
            
            <category> 计算机网络 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 前后端 </tag>
            
            <tag> Web服务器 </tag>
            
            <tag> php </tag>
            
            <tag> Apache </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[史上最全CSS学习资料大全]]></title>
      <url>http://licao404.com/2016/04/04/%E3%80%902016%E5%B9%B4%E7%89%B9%E5%88%AB%E7%A6%8F%E5%88%A9%E3%80%91%E5%8F%B2%E4%B8%8A%E6%9C%80%E5%85%A8CSS%E5%AD%A6%E4%B9%A0%E8%B5%84%E6%96%99%E5%A4%A7%E5%85%A8/</url>
      <content type="html"><![CDATA[<span itemprop="image" itemscope="" itemtype="http://schema.org/ImageObject"><img itemprop="url image" src="http://img.imooc.com/568c7d4400013a4d19201080.jpg" class="full-image" alt="alt"><meta itemprop="width" content="auto"><meta itemprop="height" content="auto"></span>
<blockquote>
<p>本文转载自慕课网，原文<a href="http://www.imooc.com/article/3450" target="_blank" rel="external">戳此</a></p>
</blockquote>
<h2 id="基础篇"><a href="#基础篇" class="headerlink" title="基础篇"></a>基础篇</h2><ul>
<li><a href="http://www.imooc.com/article/1437" target="_blank" rel="external">CSS 最核心的几个概念</a></li>
<li><a href="http://www.imooc.com/article/1186" target="_blank" rel="external">CSS 简写指南</a></li>
<li><a href="http://www.imooc.com/article/2001" target="_blank" rel="external">CSS样式基础</a></li>
<li><a href="http://www.imooc.com/article/2067" target="_blank" rel="external">CSS样式设置</a></li>
<li><a href="http://www.imooc.com/article/2058" target="_blank" rel="external">CSS布局模型</a></li>
<li><a href="http://www.imooc.com/article/2010" target="_blank" rel="external">CSS文字排版</a></li>
<li><a href="http://www.imooc.com/article/2475" target="_blank" rel="external">你不得不知道的CSS 字体那些事儿</a></li>
<li><a href="http://www.imooc.com/article/2064" target="_blank" rel="external">CSS中的颜色值和长度值</a></li>
<li><a href="http://www.imooc.com/article/2004" target="_blank" rel="external">CSS选择器分类</a></li>
<li><a href="http://www.imooc.com/article/2787" target="_blank" rel="external">30个你必须记住的CSS选择符</a></li>
<li><a href="http://www.imooc.com/article/2031" target="_blank" rel="external">CSS元素分类</a></li>
<li><a href="http://www.imooc.com/article/2799" target="_blank" rel="external">浅谈CSS伪类分类</a></li>
</ul>
<a id="more"></a>
<h2 id="进阶篇"><a href="#进阶篇" class="headerlink" title="进阶篇"></a>进阶篇</h2><ul>
<li><a href="http://www.imooc.com/article/2442" target="_blank" rel="external">CSS 专业技巧收集</a></li>
<li><a href="http://www.imooc.com/article/1845" target="_blank" rel="external">CSS小技巧</a></li>
<li><a href="http://www.imooc.com/article/2061" target="_blank" rel="external">CSS代码优化</a></li>
<li><a href="http://www.imooc.com/article/2007" target="_blank" rel="external">CSS的继承、层叠、特殊性和重要性</a></li>
<li><a href="http://www.imooc.com/article/3030" target="_blank" rel="external">CSS 的使用中你可能不知道的 7 件事</a></li>
<li><a href="http://www.imooc.com/article/1536" target="_blank" rel="external">Web 开发中 20 个很有用的 CSS 库</a></li>
<li><a href="http://www.imooc.com/article/1334" target="_blank" rel="external">11个学习CSS实用工具和资源</a></li>
<li><a href="http://www.imooc.com/article/1247" target="_blank" rel="external">17个有趣实用的CSS 3悬停效果教程</a></li>
<li><a href="http://www.imooc.com/article/2181" target="_blank" rel="external">前端笔试面试中的常用知识点总结(CSS)</a></li>
<li><a href="http://www.imooc.com/article/1332" target="_blank" rel="external">10个顶级的CSS UI开源框架</a></li>
</ul>
<h2 id="实战篇"><a href="#实战篇" class="headerlink" title="实战篇"></a>实战篇</h2><ul>
<li><a href="http://www.imooc.com/article/2055" target="_blank" rel="external">用CSS来找出两张图的差异</a>:</li>
<li><a href="http://www.imooc.com/article/2979" target="_blank" rel="external">用 CSS 3 来做个平安果吧~</a>:</li>
<li><a href="http://www.imooc.com/article/2409" target="_blank" rel="external">如何调试CSS动画</a>:</li>
<li><a href="http://www.imooc.com/article/2409" target="_blank" rel="external">用CSS制作Loading加载动画【第一期】</a>:</li>
<li><a href="http://www.imooc.com/article/1258" target="_blank" rel="external">用CSS制作Loading加载动画-Loading字样【第二期】</a>:</li>
<li><a href="http://www.imooc.com/article/2439" target="_blank" rel="external">帮助你美化网站的10+实用 CSS3 技巧</a>:</li>
<li><a href="http://www.imooc.com/article/2163" target="_blank" rel="external">30个使用CSS实现的loading等待加载效果</a>:</li>
<li><a href="http://www.imooc.com/article/3273" target="_blank" rel="external">慕课课程导航解析</a>:</li>
</ul>
<h2 id="免费课程（视频）篇"><a href="#免费课程（视频）篇" class="headerlink" title="免费课程（视频）篇"></a>免费课程（视频）篇</h2><ul>
<li><a href="http://www.imooc.com/learn/315" target="_blank" rel="external">重识CSS</a>:</li>
<li><a href="http://www.imooc.com/learn/314" target="_blank" rel="external">CSS未来</a>:</li>
<li><a href="http://www.imooc.com/learn/316" target="_blank" rel="external">css框架的迷思</a>:</li>
<li><a href="http://www.imooc.com/learn/319" target="_blank" rel="external">CSS与界面动效</a>:</li>
<li><a href="http://www.imooc.com/learn/320" target="_blank" rel="external">CSS工作流</a>:</li>
<li><a href="http://www.imooc.com/learn/57" target="_blank" rel="external">如何用CSS进行网页布局</a>:</li>
<li><a href="http://www.imooc.com/learn/473" target="_blank" rel="external">CSS3图片动态提示效果</a>:</li>
<li><a href="http://www.imooc.com/learn/323" target="_blank" rel="external">Web Components中的CSS</a>:</li>
<li><a href="http://www.imooc.com/learn/357" target="_blank" rel="external">CSS动画实用技巧</a>:</li>
<li><a href="http://www.imooc.com/learn/9" target="_blank" rel="external">HTML+CSS基础课程</a>:</li>
<li><a href="http://www.imooc.com/learn/174" target="_blank" rel="external">商城分类导航效果</a>:</li>
<li><a href="http://www.imooc.com/learn/12" target="_blank" rel="external">形形色色的下拉菜单</a>:</li>
<li><a href="http://www.imooc.com/learn/6" target="_blank" rel="external">导航条菜单的制作</a>:</li>
</ul>
<hr>
]]></content>
      
        <categories>
            
            <category> 编程学习 </category>
            
            <category> 前端基础 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> CSS </tag>
            
            <tag> 转载 </tag>
            
            <tag> 干货 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[DOM,事件]]></title>
      <url>http://licao404.com/2016/04/03/DOM-%E4%BA%8B%E4%BB%B6/</url>
      <content type="html"><![CDATA[<p><blockquote class="blockquote-center">DOM（文档对象模型）是针对HTML、XML和SVG文档的API（编程接口）。DOM将前述的结构化文档解析成一个层次化的节点树（DOM Tree）。所有的节点和树状结构都有规范的API，这样我们就可以通过编程语言操作（增删改查）这些文档。严格地说，DOM不属于JavaScript，但是操作DOM是JavaScript最常见的任务，而JavaScript也是最常用于DOM操作的语言。所以，DOM往往放在JavaScript里面介绍。下文是利用JavaScript对DOM标准的实现。</blockquote><br><a id="more"></a></p>
<blockquote>
<h3 id="【知识点】"><a href="#【知识点】" class="headerlink" title="【知识点】"></a>【知识点】</h3></blockquote>
<h4 id="1-dom对象的innerText和innerHTML有什么区别？"><a href="#1-dom对象的innerText和innerHTML有什么区别？" class="headerlink" title="1. dom对象的innerText和innerHTML有什么区别？"></a><strong>1. <code>dom对象</code>的<code>innerText</code>和<code>innerHTML</code>有什么区别？</strong></h4><ul>
<li><code>innerHTML</code>获取的是这个元素节点包含的所有HTML代码，包括标签，文本内容，例如：</li>
</ul>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"p1"</span>&gt;</span>我是段落1</div><div class="line">		<span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">"link"</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>FE<span class="tag">&lt;/<span class="name">a</span>&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></div><div class="line">    <span class="keyword">var</span> p1 = <span class="built_in">document</span>.getElementById(<span class="string">'p1'</span>);</div><div class="line">    <span class="built_in">console</span>.log( p1.innerHTML);</div><div class="line">    <span class="comment">//输出：</span></div><div class="line">    <span class="comment">//我是段落1</span></div><div class="line">    <span class="comment">// &lt;a class="link" href="#"&gt;FE&lt;/a&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div></pre></td></tr></table></figure>
<ul>
<li><code>innerText</code>自动忽略当前节点内部的HTML标签，获取的是这个元素节点包含的所有文本字符串内容，进行拼接。输出结果为：</li>
</ul>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></div><div class="line">    <span class="built_in">console</span>.log( p1.innerText);</div><div class="line">    <span class="comment">//输出：</span></div><div class="line">    <span class="comment">//我是段落1 FE</span></div><div class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div></pre></td></tr></table></figure>
<ul>
<li><code>innerHTML</code>是符合W3C标准的属性，而<code>innerText</code>只适用于IE浏览器；</li>
</ul>
<ul>
<li><code>innerText</code>会自动对HTML标签转义，什么意思呢，继续修改上面的例子：p标签解释为文本，即<code>&amp;lt;p&amp;gt;</code>，而不会当作标签处理，正因为如此，<code>innerText</code>比<code>innerHTML</code>更加安全，可以防止<code>XSS攻击</code>;</li>
</ul>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></div><div class="line">    p1.innerText = <span class="string">"&lt;p&gt;hello&lt;/p&gt;"</span>;</div><div class="line">    <span class="built_in">console</span>.log( p1.innerHTML); <span class="comment">//&amp;lt;p&amp;gt;hello&amp;lt;/p&amp;gt;</span></div><div class="line">    <span class="built_in">console</span>.log( p1.innerText); <span class="comment">//&lt;p&gt;hello&lt;/p&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div></pre></td></tr></table></figure>
<h4 id="2-elem-children和elem-childNodes的区别？"><a href="#2-elem-children和elem-childNodes的区别？" class="headerlink" title="2. elem.children和elem.childNodes的区别？"></a><strong>2. elem.children和elem.childNodes的区别？</strong></h4><ul>
<li><p><code>children</code>属性是非标准的，返回一个类似数组的动态对象（实时反映变化），包括当前元素节点的所有子元素集合。如果当前元素没有子元素，则返回的对象包含零个成员。</p>
</li>
<li><p><code>childNodes</code>属性是标准的，返回一个包括当前节点的所有子节点的<code>NodeList</code>集合，包括文本节点Text，Comment节点。</p>
</li>
</ul>
<h4 id="3-查询元素有几种常见的方法？"><a href="#3-查询元素有几种常见的方法？" class="headerlink" title="3. 查询元素有几种常见的方法？"></a><strong>3. 查询元素有几种常见的方法？</strong></h4><ol>
<li><p><code>getElementById(id)</code>：返回指定ID属性的元素节点.找不到匹配的节点，返回<code>null</code>；特别的，在搜索匹配节点时，id属性是大小写敏感的。比如，如果某个节点的id属性是<code>main</code>，那么<code>document.getElementById(&quot;Main&quot;)</code>将返回<code>null</code>，而不是指定节点。</p>
</li>
<li><p><code>getElementByClassName(class)</code>：该方法返回一个类数组对象，包括了所有class名字符合指定条件的元素（搜索范围包括本身），元素的变化实时反映在返回结果中。这个方法不仅可以在document对象上调用，也可以在任何元素节点上调用。</p>
</li>
<li><p><code>getElementsByTagName()</code>：返回所有指定标签的元素。返回值是一个<code>HTMLCollection</code>对象，也就是说，搜索结果是一个动态集合，任何元素的变化都会实时反映在返回的集合中。这个方法不仅可以在<code>document</code>对象上调用，也可以在任何元素节点上调用。</p>
</li>
<li><p><code>getElementsByName()</code>：返回拥有<code>name属性</code>的HTML元素，比如<code>form</code>、<code>img</code>、<code>frame</code>、<code>embed和object</code>，返回一个<code>NodeList</code>格式的对象，不会实时反映元素的变化。</p>
</li>
<li><p><code>querySelector()</code>：返回匹配指定的<code>CSS选择器</code>的元素节点。如果有多个节点满足匹配条件，则返回<code>第一个匹配</code>的节点。如果没有发现匹配的节点，则返回<code>null</code>。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> el2 = <span class="built_in">document</span>.querySelector(<span class="string">'#myParent &gt; [ng-click]'</span>);</div></pre></td></tr></table></figure>
<p> 其中<code>querySelector()</code>无法选中CSS伪元素</p>
</li>
<li><p><code>querySelectorAll()</code>：返回匹配指定的<code>CSS选择器</code>的所有节点，返回的是<code>NodeList类型</code>的对象。NodeList对象不是动态集合，所以元素节点的变化无法实时反映在返回结果中。</p>
</li>
</ol>
<h4 id="4-如何创建一个元素？如何给元素设置属性？"><a href="#4-如何创建一个元素？如何给元素设置属性？" class="headerlink" title="4. 如何创建一个元素？如何给元素设置属性？"></a><strong>4. 如何创建一个元素？如何给元素设置属性？</strong></h4><ol>
<li><ul>
<li><p>使用<code>createElement()</code>方法来创建一个<code>HTML</code>元素节点，例如创建一个<code>img</code>元素：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> img = <span class="built_in">document</span>.createElement(<span class="string">'img'</span>);</div></pre></td></tr></table></figure>
</li>
<li><p>使用<code>setAttribute()</code>方法来<strong>设置元素属性</strong>，例如：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">img.setAttribute(<span class="string">"src"</span>,<span class="string">"1.png"</span>);</div></pre></td></tr></table></figure>
</li>
<li><p>然后使用<code>appendChild()</code>，把元素节点添加到指定元素节点末尾，比如添加到<code>body</code>元素节点末尾：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">document</span>.body.appendChild(img);</div></pre></td></tr></table></figure>
</li>
</ul>
</li>
<li><p><code>createTextNode()</code>方法创建文本节点：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> text = <span class="built_in">document</span>.createTextNode(<span class="string">'hello!'</span>);</div><div class="line"><span class="built_in">document</span>.body.appendChild(text);</div></pre></td></tr></table></figure>
<p> 这个方法可以确保返回的节点，被浏览器当作txt文本渲染，而不是当作HTML代码（恶意代码会被转义）渲染。因此，可以用来展示用户的输入，避免<code>XSS攻击</code></p>
</li>
<li><p><code>createDocumentFragment()</code>生成一个<code>DocumentFragment</code>对象。</p>
</li>
</ol>
<h4 id="5-元素的添加、删除？"><a href="#5-元素的添加、删除？" class="headerlink" title="5. 元素的添加、删除？"></a><strong>5. 元素的添加、删除？</strong></h4><ul>
<li><p>使用<code>appendChild()</code>添加元素到指定元素的末尾：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">document</span>.body.appendChild(<span class="built_in">document</span>.createElement(<span class="string">'img'</span>));</div></pre></td></tr></table></figure>
</li>
<li><p>使用<code>insertBefore()</code>添加元素到指定元素之前;</p>
</li>
<li><p>使用<code>removeChild()</code>删除元素;</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">body.removeChild(<span class="built_in">document</span>.getElementById(<span class="string">'p1'</span>));</div></pre></td></tr></table></figure>
</li>
</ul>
<h4 id="6-DOM0-事件和-DOM2级-在事件监听使用方式上有什么区别？"><a href="#6-DOM0-事件和-DOM2级-在事件监听使用方式上有什么区别？" class="headerlink" title="6. DOM0 事件和 DOM2级 在事件监听使用方式上有什么区别？"></a><strong>6. <code>DOM0</code> 事件和 <code>DOM2级</code> 在事件监听使用方式上有什么区别？</strong></h4><ul>
<li><code>DOM0</code>级事件处理程序只能给元素绑定一个事件，例如给<code>button</code>绑定两个<code>onclick</code>事件：</li>
</ul>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">""</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">name</span>=<span class="string">"button"</span> <span class="attr">id</span>=<span class="string">"btn"</span>&gt;</span><span class="tag">&lt;/<span class="name">button</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></div><div class="line">    <span class="built_in">document</span>.getElementById(<span class="string">"btn"</span>).onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">        <span class="built_in">console</span>.log(<span class="string">"hello"</span>);</div><div class="line">    &#125;</div><div class="line">    <span class="built_in">document</span>.getElementById(<span class="string">"btn"</span>).onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">        <span class="built_in">console</span>.log(<span class="string">"world"</span>);</div><div class="line">    &#125;</div><div class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div></pre></td></tr></table></figure>
<p>点击<code>button</code>只会打印出<code>world</code>,这种方式绑定的事件只会在时间流的冒泡阶段被处理</p>
<ul>
<li><code>DOM2</code>级事件处理程序可以绑定多个事件（新浏览器处理方式），修改上面的例子：<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></div><div class="line">    <span class="built_in">document</span>.getElementById(<span class="string">"btn"</span>).addEventListener(<span class="string">"click"</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;<span class="built_in">console</span>.log(<span class="string">"helo"</span>);&#125;,<span class="literal">false</span>);</div><div class="line">    <span class="built_in">document</span>.getElementById(<span class="string">"btn"</span>).addEventListener(<span class="string">"click"</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;<span class="built_in">console</span>.log(<span class="string">"world"</span>);&#125;,<span class="literal">false</span>);</div><div class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div></pre></td></tr></table></figure>
</li>
</ul>
<p>点击<code>button</code>会先后打印出<code>hello</code>、<code>world</code>，通过<code>addEventListener()</code>绑定的事件处理程序只能通过<code>removeElementListener()</code>移除。<code>addEventListener()</code>第三个参数为布尔值，设为<code>false</code>时表示在事件流的冒泡阶段触发事件，<code>true</code>则为捕获阶段。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">document</span>.getElementById(<span class="string">"p1"</span>).addEventListener(<span class="string">"click"</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;<span class="built_in">console</span>.log(<span class="string">"helo parents"</span>);&#125;,<span class="literal">true</span>);</div><div class="line"></div><div class="line"><span class="built_in">document</span>.getElementById(<span class="string">"btn"</span>).addEventListener(<span class="string">"click"</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;<span class="built_in">console</span>.log(<span class="string">"helo"</span>);&#125;,<span class="literal">true</span>);</div></pre></td></tr></table></figure>
<p>上面的事件在事件捕获阶段被触发，绑定在父元素上的事件先于目标事件被触发，先后输出<code>hello parents</code>、<code>hello</code>；</p>
<h4 id="7-attachEvent与addEventListener的区别？"><a href="#7-attachEvent与addEventListener的区别？" class="headerlink" title="7. attachEvent与addEventListener的区别？"></a><strong>7. <code>attachEvent</code>与<code>addEventListener</code>的区别？</strong></h4><ol>
<li><p>参数不同：</p>
<ul>
<li><p>参数个数不同，<code>addEventListener()</code>有3个参数，<code>attachEvent()</code>有2个参数；<code>attachEvent()</code>事件处理程序只能绑定在事件冒泡阶段，<code>addEventListener()</code>可以通过其第3个参数设定为<code>true</code>和<code>false</code>来决定事件处理程序绑定在冒泡还是捕获阶段；（一般情况下都是冒泡，出于兼容性考虑）</p>
</li>
<li><p>第一个参数意义不同，<code>addEventListener()</code>第一个参数是事件类型（<code>click</code> ，<code>load</code>），<code>attachEvent()</code>第一个参数是事件处理函数名称（<code>onclick</code>，<code>onload</code>）</p>
</li>
</ul>
</li>
<li><p>事件处理程序的作用域不同。<code>addEventListener()</code>作用域是元素本身，<code>this</code>触发元素；<code>attachEvent()</code>在全局作用域中运行，<code>this</code>等于<code>window</code>;</p>
</li>
<li><p>时间处理程序的执行顺序不同。<code>addEventListener()</code>是以添加它们的顺序执行，<code>attachEvent()</code>执行顺序一般是则相反的；</p>
</li>
</ol>
<h4 id="8-解释IE事件冒泡和DOM2事件传播机制？"><a href="#8-解释IE事件冒泡和DOM2事件传播机制？" class="headerlink" title="8. 解释IE事件冒泡和DOM2事件传播机制？"></a><strong>8. 解释<code>IE</code>事件冒泡和<code>DOM2</code>事件传播机制？</strong></h4><ul>
<li><p>IE事件冒泡：事件开始由具体的元素接收，然后一层层往上传播到较不具体的节点，基本上所有的浏览器都支持事件冒泡；</p>
</li>
<li><p><code>DOM2级</code>事件传播包含3个阶段，事件捕获阶段 ——&gt; 处于目标阶段 ——&gt; 事件冒泡阶段，首先是事件捕获，从最上层节点一层层往下传播，然后目标节点接收事件，最后进行事件冒泡；</p>
</li>
</ul>
<h4 id="9-如何阻止事件冒泡？-如何阻止默认事件？"><a href="#9-如何阻止事件冒泡？-如何阻止默认事件？" class="headerlink" title="9. 如何阻止事件冒泡？ 如何阻止默认事件？"></a><strong>9. 如何阻止事件冒泡？ 如何阻止默认事件？</strong></h4><ul>
<li><code>stopPropagation()</code>方法用于立即停止事件在DOM层次中的传播，阻止事件进一步冒泡或捕获，例如：</li>
</ul>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">"btn"</span>&gt;</span>Click Me<span class="tag">&lt;/<span class="name">button</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></div><div class="line">    <span class="built_in">document</span>.querySelector(<span class="string">'#btn'</span>).onclick = <span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>&#123;</div><div class="line">        <span class="built_in">console</span>.log(e);</div><div class="line">        <span class="built_in">console</span>.log(<span class="string">"hello"</span>);</div><div class="line">        e.stopPropagation();</div><div class="line">        <span class="built_in">console</span>.log(<span class="keyword">this</span>.innerText());</div><div class="line">        <span class="built_in">console</span>.log(e.target);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="built_in">document</span>.body.onclick = <span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>&#123;</div><div class="line">        <span class="built_in">console</span>.log(e);</div><div class="line">        <span class="built_in">console</span>.log(<span class="string">"world!"</span>);</div><div class="line">        <span class="built_in">console</span>.log(e.target);</div><div class="line">    &#125;</div><div class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div></pre></td></tr></table></figure>
<p>添加了<code>stopPropagation()</code>方法阻止了事件冒泡到<code>body</code>,绑定在<code>body</code>上的事件没有被触发。</p>
<ul>
<li>对IE来讲，是通过将<code>cancelBubble</code>属性值设置为<code>true</code>来取消冒泡：</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">document</span>.getElementById(<span class="string">'btn'</span>).attachEvent(<span class="string">"onclick"</span>,<span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>&#123;</div><div class="line">    e.cancelBubble = <span class="literal">true</span>;</div><div class="line">&#125;)</div></pre></td></tr></table></figure>
<ul>
<li><code>preventDefault()</code>方法用于取消事件默认行为,例如点击<code>a链接</code>会发生跳转是默认行为，可以通过<code>e.preventDefault()</code>阻止这一行为：</li>
</ul>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"http://www.baidu.com"</span> <span class="attr">class</span>=<span class="string">"btn"</span>&gt;</span>Click Me<span class="tag">&lt;/<span class="name">a</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></div><div class="line">    <span class="built_in">document</span>.querySelector(<span class="string">'.btn'</span>).addEventListener(<span class="string">'click'</span>,<span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>&#123;</div><div class="line">        <span class="built_in">console</span>.log(<span class="string">"hello"</span>);</div><div class="line">        e.preventDefault();</div><div class="line">    &#125;)</div><div class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div></pre></td></tr></table></figure>
<ul>
<li>对IE来讲，是通过将<code>returnValue</code>属性值设置为<code>false</code>来取消默认行为：<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">document</span>.getElementById(<span class="string">'btn'</span>).attachEvent(<span class="string">"onclick"</span>,<span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>&#123;</div><div class="line">    e.returnValue = <span class="literal">false</span>;</div><div class="line">&#125;)</div></pre></td></tr></table></figure>
</li>
</ul>
<hr>
<blockquote>
<h3 id="【练习】"><a href="#【练习】" class="headerlink" title="【练习】"></a>【练习】</h3></blockquote>
<h4 id="1-有如下代码，要求当点击每一个元素li时控制台展示该元素的文本内容。不考虑兼容"><a href="#1-有如下代码，要求当点击每一个元素li时控制台展示该元素的文本内容。不考虑兼容" class="headerlink" title="1. 有如下代码，要求当点击每一个元素li时控制台展示该元素的文本内容。不考虑兼容"></a><strong>1. 有如下代码，要求当点击每一个元素li时控制台展示该元素的文本内容。不考虑兼容</strong></h4><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">"ct"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>让我们<span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>一起学习<span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>JavaScript<span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></div><div class="line"><span class="comment">//使用事件代理：</span></div><div class="line">    <span class="built_in">document</span>.querySelector(<span class="string">'.ct'</span>).onclick = <span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>&#123;</div><div class="line">        <span class="built_in">console</span>.log(e.target.innerText);</div><div class="line">    &#125;</div><div class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div></pre></td></tr></table></figure>
<p>或者采用原始方法：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></div><div class="line"><span class="comment">//给每个&lt;li&gt;标签绑定事件</span></div><div class="line">    <span class="keyword">var</span> arr = <span class="built_in">document</span>.getElementsByTagName(<span class="string">'li'</span>);</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>;i &lt; arr.length;i++)&#123;</div><div class="line">    	arr[i].addEventListener(<span class="string">'click'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    		 <span class="built_in">console</span>.log(<span class="keyword">this</span>.innerText);</div><div class="line">    	&#125;)</div><div class="line">    &#125;    </div><div class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div></pre></td></tr></table></figure></p>
<h4 id="2-补全代码，要求如下："><a href="#2-补全代码，要求如下：" class="headerlink" title="2. 补全代码，要求如下："></a><strong>2. 补全代码，要求如下：</strong></h4><ol>
<li>当点击按钮开头添加时在<code>&lt;li&gt;让我们&lt;/li&gt;</code>元素前添加一个新元素，内容为用户输入的非空字符串；当点击结尾添加时在<code>&lt;li&gt;JavaScript&lt;/li&gt;</code>后添加用户输入的非空字符串;</li>
<li><p>当点击每一个元素<code>li</code>时控制台展示该元素的文本内容;    </p>
<ul>
<li><p><a href="http://febox.applinzi.com/task-22/task-22-2.html" target="_blank" rel="external">效果点我</a></p>
</li>
<li><p>代码如下：(事件代理的一种<a href="http://jsbin.com/relowi/7/edit?html,console,output" target="_blank" rel="external">错误写法</a>)</p>
</li>
</ul>
</li>
</ol>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">"ct"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>让我们<span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>一起学习<span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>JavaScript<span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">class</span>=<span class="string">"ipt-add-content"</span> <span class="attr">placeholder</span>=<span class="string">"添加内容"</span>/&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">"btn-add-start"</span>&gt;</span>开头添加<span class="tag">&lt;/<span class="name">button</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">"btn-add-end"</span>&gt;</span>结尾添加<span class="tag">&lt;/<span class="name">button</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></div><div class="line"><span class="keyword">var</span> ul = <span class="built_in">document</span>.querySelector(<span class="string">'.ct'</span>),</div><div class="line">    addEnd = <span class="built_in">document</span>.querySelector(<span class="string">'#btn-add-end'</span>),</div><div class="line">    addStart = <span class="built_in">document</span>.querySelector(<span class="string">'#btn-add-start'</span>);</div><div class="line"></div><div class="line"><span class="comment">// ul.onclick = function (e) &#123;</span></div><div class="line"><span class="comment">//      console.log(e.target.innerText) ;</span></div><div class="line"><span class="comment">// &#125;//注意：这样写会出问题，当点击到的是ul而不是li时（ul有padding时）会出错</span></div><div class="line"><span class="comment">//改为以下这种写法：</span></div><div class="line">ul.addEventListener(<span class="string">'click'</span>,<span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>&#123;</div><div class="line">    <span class="keyword">if</span> (e.target.tagName.toLowerCase() === <span class="string">'li'</span>) &#123;</div><div class="line">        <span class="built_in">console</span>.log(e.target.innerText);</div><div class="line">    &#125;</div><div class="line">&#125;);</div><div class="line"></div><div class="line">addEnd.onclick = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> item = <span class="built_in">document</span>.createElement(<span class="string">'li'</span>);</div><div class="line">    item.innerText = <span class="built_in">document</span>.querySelector(<span class="string">'.ipt-add-content'</span>).value;</div><div class="line">    <span class="keyword">if</span> (item.innerText) &#123;</div><div class="line">        ul.appendChild(item);</div><div class="line">        <span class="built_in">document</span>.querySelector(<span class="string">'.ipt-add-content'</span>).value = <span class="literal">null</span>;</div><div class="line">    &#125;<span class="keyword">else</span> &#123;</div><div class="line">        alert(<span class="string">"Input Nothing!"</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">addStart.onclick = <span class="function"><span class="keyword">function</span> (<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="keyword">var</span> item = <span class="built_in">document</span>.createElement(<span class="string">'li'</span>);</div><div class="line">    item.innerText = <span class="built_in">document</span>.querySelector(<span class="string">'.ipt-add-content'</span>).value;</div><div class="line">    <span class="keyword">if</span> (item.innerText) &#123;</div><div class="line">        ul.insertBefore(item,ul.firstChild);</div><div class="line">        <span class="built_in">document</span>.querySelector(<span class="string">'.ipt-add-content'</span>).value = <span class="literal">null</span>;</div><div class="line">    &#125;<span class="keyword">else</span> &#123;</div><div class="line">        alert(<span class="string">"Input Nothing!"</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div></pre></td></tr></table></figure>
<h4 id="3-补全代码，要求：当鼠标放置在li元素上，会在img-preview里展示当前li元素的data-img对应的图片。"><a href="#3-补全代码，要求：当鼠标放置在li元素上，会在img-preview里展示当前li元素的data-img对应的图片。" class="headerlink" title="3. 补全代码，要求：当鼠标放置在li元素上，会在img-preview里展示当前li元素的data-img对应的图片。"></a><strong>3. 补全代码，要求：当鼠标放置在<code>li</code>元素上，会在<code>img-preview</code>里展示当前<code>li</code>元素的<code>data-img</code>对应的图片。</strong></h4><ul>
<li><p><a href="http://febox.applinzi.com/task-22/task-22-3.html" target="_blank" rel="external">效果点我</a></p>
</li>
<li><p>代码如下：</p>
</li>
</ul>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">"ct"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">data-img</span>=<span class="string">"http://7xrvo9.com1.z0.glb.clouddn.com/0320/2016-03-20%2012.19.57%201.jpg"</span>&gt;</span>鼠标放置查看图片1<span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">data-img</span>=<span class="string">"http://7xrvo9.com1.z0.glb.clouddn.com/0320/2016-03-20%2012.24.13%201.jpg"</span>&gt;</span>鼠标放置查看图片2<span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">data-img</span>=<span class="string">"http://7xrvo9.com1.z0.glb.clouddn.com/0320/2016-03-20%2012.28.55%201.jpg"</span>&gt;</span>鼠标放置查看图片3<span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"img-preview"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></div><div class="line"><span class="keyword">var</span> ct = <span class="built_in">document</span>.querySelector(<span class="string">'.ct'</span>),</div><div class="line">    preview = <span class="built_in">document</span>.querySelector(<span class="string">'.img-preview'</span>);</div><div class="line"></div><div class="line">ct.addEventListener(<span class="string">'mouseover'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">e</span>) </span>&#123;</div><div class="line">    preview.innerHTML = <span class="string">'&lt;img src="'</span>+e.target.getAttribute(<span class="string">'data-img'</span>)+<span class="string">'" style="width:500px"&gt;'</span>;</div><div class="line">&#125;);</div><div class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div></pre></td></tr></table></figure>
<h4 id="4-实现tab切换功能"><a href="#4-实现tab切换功能" class="headerlink" title="4. 实现tab切换功能"></a><strong>4. 实现<code>tab</code>切换功能</strong></h4><ul>
<li><a href="http://febox.applinzi.com/task-22/task-22-4.html" target="_blank" rel="external">效果点我点我</a></li>
<li><a href="https://github.com/licao404/landemo/blob/master/task-22/task-22-4.html" target="_blank" rel="external">瞅瞅代码</a></li>
</ul>
<h4 id="5-实现模态框功能"><a href="#5-实现模态框功能" class="headerlink" title="5. 实现模态框功能"></a><strong>5. 实现模态框功能</strong></h4><ul>
<li><a href="http://febox.applinzi.com/task-22/task-22-5.html" target="_blank" rel="external">效果点我点我</a></li>
<li><a href="https://github.com/licao404/landemo/blob/master/task-22/task-22-5.html" target="_blank" rel="external">瞅瞅代码</a></li>
</ul>
<hr>
]]></content>
      
        <categories>
            
            <category> 编程学习 </category>
            
            <category> 前端基础 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> JavaScript </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[RegExp类型]]></title>
      <url>http://licao404.com/2016/03/31/RegExp%E7%B1%BB%E5%9E%8B/</url>
      <content type="html"><![CDATA[<blockquote class="blockquote-center">ECMAScript通过RegExp来支持正则表达式，正则表达式是一种描述文本内容（字符串结构）的模式，有点像字符串的模板。常常用作按照“给定模式”匹配文本的工具</blockquote>

<a id="more"></a>
<blockquote>
<h3 id="【知识点】"><a href="#【知识点】" class="headerlink" title="【知识点】"></a>【知识点】</h3></blockquote>
<h4 id="1-d，-w-s-a-zA-Z0-9-b-x-3-分别是什么？"><a href="#1-d，-w-s-a-zA-Z0-9-b-x-3-分别是什么？" class="headerlink" title="1. \d，\w,\s,[a-zA-Z0-9],\b,.,*,+,?,x{3},^$分别是什么？"></a><strong>1. <code>\d</code>，<code>\w</code>,<code>\s</code>,<code>[a-zA-Z0-9]</code>,<code>\b</code>,<code>.</code>,<code>*</code>,<code>+</code>,<code>?</code>,<code>x{3}</code>,<code>^$</code>分别是什么？</strong></h4><ul>
<li><code>\d</code>：匹配0-9间的任意一个数字，等同于<code>[0-9]</code>；</li>
<li><code>\w</code>：匹配任意的字母、数字、下划线，等同于<code>[A-Za-z0-9_]</code>；</li>
<li><code>\s</code>：匹配空白字符（包括空格、tab、换行、回车），等同于<code>[\n\t\r\v\f]</code>；</li>
<li><code>[a-zA-Z0-9]</code>：匹配任意的字母、数字</li>
<li><code>\b</code>：匹配单词边界；</li>
<li><code>.</code>：匹配除换行、回车、结束符（行分隔符\u2028、段分隔符\u2029）以外的单个字符；</li>
<li><code>*</code>：匹配出现0次或多次，等同于<code>{0,}</code>；</li>
<li><code>+</code>：匹配出现1次或多次，等同于<code>{1,}</code>；</li>
<li><code>?</code>：匹配出现0次或1次，等同于<code>{0,1}</code>；</li>
<li><code>x{3}</code>：匹配恰好重复3次；<code>{n,}</code>表示至少重复n次；<code>{n,m}</code>表示重复不少于n次，不多于m次</li>
<li><code>^$</code>：<code>^</code>表示字符串开始的位置，<code>$</code>表示字符串结束的位置，<code>/^n$/</code>表示从开始到结束位置只有<code>n</code></li>
<li><code>|</code>：或关系；</li>
</ul>
<h4 id="2-贪婪模式和非贪婪模式指什么？"><a href="#2-贪婪模式和非贪婪模式指什么？" class="headerlink" title="2. 贪婪模式和非贪婪模式指什么？"></a><strong>2. 贪婪模式和非贪婪模式指什么？</strong></h4><ul>
<li>贪婪模式：趋向于最大长度的匹配，比如<code>var str = &quot;abbbc&quot;;</code>,贪婪模式下，<code>str.match(/ab+/)</code>匹配到的是<code>abbb</code>；</li>
<li>非贪婪模式：匹配到结果就好，尽可能少的匹配。默认是贪婪模式，如果需要改为非贪婪模式，则在量词符（<code>+</code>,<code>*</code>,<code>?</code>）后加一个问号，<code>str.match(/ab+?/)</code>匹配到的则是<code>ab</code>；</li>
</ul>
<hr>
<blockquote>
<h3 id="【练习】"><a href="#【练习】" class="headerlink" title="【练习】"></a>【练习】</h3></blockquote>
<h4 id="1-写一个函数trim-str-，去除字符串两边的空白字符"><a href="#1-写一个函数trim-str-，去除字符串两边的空白字符" class="headerlink" title="1.写一个函数trim(str)，去除字符串两边的空白字符"></a><strong>1.写一个函数<code>trim(str)</code>，去除字符串两边的空白字符</strong></h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">trim</span> (<span class="params">str</span>) </span>&#123;</div><div class="line">     <span class="keyword">return</span> str.replace(<span class="regexp">/^\s+|\s+$/g</span>,<span class="string">""</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="2-使用实现-addClass-el-cls-、hasClass-el-cls-、removeClass-el-cls-，使用正则"><a href="#2-使用实现-addClass-el-cls-、hasClass-el-cls-、removeClass-el-cls-，使用正则" class="headerlink" title="2.使用实现 addClass(el, cls)、hasClass(el, cls)、removeClass(el,cls)，使用正则"></a><strong>2.使用实现 <code>addClass(el, cls)</code>、<code>hasClass(el, cls)</code>、<code>removeClass(el,cls)</code>，使用正则</strong></h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//提示: el为dom元素，cls为操作的class， el.className获取el元素的class</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">hasClass</span> (<span class="params">el,cls</span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> exp = <span class="keyword">new</span> <span class="built_in">RegExp</span>(<span class="string">"\\d"</span>+cls+<span class="string">"\\d"</span>);</div><div class="line">    <span class="keyword">return</span> exp.test(el.className);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//如果不存在则进行添加</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">addClass</span> (<span class="params">el,cls</span>) </span>&#123;</div><div class="line">     <span class="keyword">if</span> (!hasClass(el,cls)) &#123;</div><div class="line">        <span class="keyword">return</span> el.className += <span class="string">" "</span> + cls;</div><div class="line">      &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//如果存在则进行删除</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">removeClass</span> (<span class="params">el,cls</span>) </span>&#123;</div><div class="line">     <span class="keyword">if</span> (hasClass(el,cls)) &#123;</div><div class="line">        <span class="keyword">return</span> el.className.replace(<span class="keyword">new</span> Regexp(<span class="string">"\\d"</span>+cls+<span class="string">"\\d"</span>), <span class="string">''</span>);</div><div class="line">     &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="3-写一个函数isEmail-str-，判断用户输入的是不是邮箱"><a href="#3-写一个函数isEmail-str-，判断用户输入的是不是邮箱" class="headerlink" title="3.写一个函数isEmail(str)，判断用户输入的是不是邮箱"></a><strong>3.写一个函数<code>isEmail(str)</code>，判断用户输入的是不是邮箱</strong></h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">isEmail</span> (<span class="params">str</span>) </span>&#123;</div><div class="line">    <span class="comment">//为了方便Console测试效果，下面所有函数均不return，而是用if()&#123;&#125;else&#123;&#125;输出查看</span></div><div class="line">     <span class="keyword">if</span>(str.match(<span class="regexp">/^([\w\.\-])+\@(([\w\-])+\.)+([a-zA-Z0-9]&#123;2,4&#125;)$/</span>))&#123;</div><div class="line">        <span class="built_in">console</span>.log(<span class="string">"email格式 正确"</span>);</div><div class="line">     &#125;<span class="keyword">else</span> &#123;</div><div class="line">        <span class="built_in">console</span>.log(<span class="string">"email格式 错误"</span>);</div><div class="line">     &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="4-写一个函数isPhoneNum-str-，判断用户输入的是不是手机号"><a href="#4-写一个函数isPhoneNum-str-，判断用户输入的是不是手机号" class="headerlink" title="4.写一个函数isPhoneNum(str)，判断用户输入的是不是手机号"></a><strong>4.写一个函数<code>isPhoneNum(str)</code>，判断用户输入的是不是手机号</strong></h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">isPhoeNum</span> (<span class="params">str</span>) </span>&#123;</div><div class="line">    <span class="keyword">if</span> (str.match(<span class="regexp">/^1[34578]\d&#123;9&#125;$/</span>)) &#123;</div><div class="line">       <span class="built_in">console</span>.log(<span class="string">"手机号格式 正确"</span>);</div><div class="line">     &#125; <span class="keyword">else</span> &#123;</div><div class="line">       <span class="built_in">console</span>.log(<span class="string">"手机号格式 错误"</span>);</div><div class="line">     &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="5-写一个函数isValidUsername-str-，判断用户输入的是不是合法的用户名（长度6-20个字符，只能包括字母、数字、下划线）"><a href="#5-写一个函数isValidUsername-str-，判断用户输入的是不是合法的用户名（长度6-20个字符，只能包括字母、数字、下划线）" class="headerlink" title="5.写一个函数isValidUsername(str)，判断用户输入的是不是合法的用户名（长度6-20个字符，只能包括字母、数字、下划线）"></a><strong>5.写一个函数<code>isValidUsername(str)</code>，判断用户输入的是不是合法的用户名（长度6-20个字符，只能包括字母、数字、下划线）</strong></h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">isValidUsername</span> (<span class="params">str</span>) </span>&#123;</div><div class="line">    <span class="keyword">if</span> (str.match(<span class="regexp">/^\w&#123;6,20&#125;$/</span>)) &#123;</div><div class="line">       <span class="built_in">console</span>.log(<span class="string">"用户名 正确"</span>);</div><div class="line">    &#125;<span class="keyword">else</span> &#123;</div><div class="line">       <span class="built_in">console</span>.log(<span class="string">"用户名 错误"</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="6-写一个函数isValidPassword-str-判断用户输入的是不是合法密码（长度6-20个字符，包括大写字母、小写字母、数字、下划线至少两种）"><a href="#6-写一个函数isValidPassword-str-判断用户输入的是不是合法密码（长度6-20个字符，包括大写字母、小写字母、数字、下划线至少两种）" class="headerlink" title="6.写一个函数isValidPassword(str), 判断用户输入的是不是合法密码（长度6-20个字符，包括大写字母、小写字母、数字、下划线至少两种）"></a><strong>6.写一个函数<code>isValidPassword(str)</code>, 判断用户输入的是不是合法密码（长度6-20个字符，包括大写字母、小写字母、数字、下划线至少两种）</strong></h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">isValidPassword</span> (<span class="params">str</span>) </span>&#123;</div><div class="line"></div><div class="line">       <span class="comment">// ?!exp 零宽度正先行断言，排除全数字，全大写字母，全小写字母，全下划线</span></div><div class="line">        <span class="keyword">if</span> (str.match(<span class="regexp">/^(?!^\d+$)(?!^[A-Z]+$)(?!^[a-z]+$)(?!^[_]+$).&#123;6,20&#125;$/</span>) &amp;&amp; str.match(<span class="regexp">/^\w&#123;6,20&#125;$/</span>)) &#123;</div><div class="line">           <span class="built_in">console</span>.log(<span class="string">"密码格式 正确"</span>);</div><div class="line">        &#125;<span class="keyword">else</span> &#123;</div><div class="line">           <span class="built_in">console</span>.log(<span class="string">"密码格式 错误"</span>);</div><div class="line">        &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="7-写一个正则表达式，得到如下字符串里所有的颜色（-121212）"><a href="#7-写一个正则表达式，得到如下字符串里所有的颜色（-121212）" class="headerlink" title="7.写一个正则表达式，得到如下字符串里所有的颜色（#121212）"></a><strong>7.写一个正则表达式，得到如下字符串里所有的颜色<code>（#121212）</code></strong></h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> re = <span class="regexp">/#[\da-f]&#123;6&#125;/ig</span>;</div><div class="line"></div><div class="line"><span class="keyword">var</span> subj = <span class="string">"color: #121212; background-color: #AA00ef; width: 12px; bad-colors: f#fddee #fd2 "</span></div><div class="line"></div><div class="line">alert( subj.match(re) )  <span class="comment">// #121212,#AA00ef</span></div></pre></td></tr></table></figure>
<h4 id="8-下面代码输出什么-为什么-改写代码，让其输出gardon-world"><a href="#8-下面代码输出什么-为什么-改写代码，让其输出gardon-world" class="headerlink" title="8.下面代码输出什么? 为什么? 改写代码，让其输出gardon,world."></a><strong>8.下面代码输出什么? 为什么? 改写代码，让其输出<code>gardon</code>,<code>world</code>.</strong></h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> str = <span class="string">'hello  "gardon" , hello "world"'</span>;</div><div class="line"><span class="keyword">var</span> pat =  <span class="regexp">/".*"/g</span>;</div><div class="line">str.match(pat);  </div><div class="line"><span class="comment">//输出 "gardon" , hello "world"</span></div><div class="line"><span class="comment">//量词符*默认贪婪模式，/".*"/g匹配第一个 " 到最后一个 " 之间除换行、回车、结束符（行分隔符\u2028、段分隔符\u2029）以外的所有字符</span></div></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//量词符后加?改写为非贪婪模式</span></div><div class="line"><span class="keyword">var</span> str = <span class="string">'hello  "gardon" , hello "world"'</span>;</div><div class="line"><span class="keyword">var</span> pat =  <span class="regexp">/".*?"/g</span>;</div><div class="line">str.match(pat);</div><div class="line"><span class="comment">//输出 "gardon","world"</span></div></pre></td></tr></table></figure>
<h4 id="9-补全如下正则表达式，输出字符串中的注释内容-可尝试使用贪婪模式和非贪婪模式两种方法"><a href="#9-补全如下正则表达式，输出字符串中的注释内容-可尝试使用贪婪模式和非贪婪模式两种方法" class="headerlink" title="9.补全如下正则表达式，输出字符串中的注释内容. (可尝试使用贪婪模式和非贪婪模式两种方法)"></a><strong>9.补全如下正则表达式，输出字符串中的注释内容. (可尝试使用贪婪模式和非贪婪模式两种方法)</strong></h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">str = <span class="string">'.. &lt;!-- My -- comment \n test --&gt; ..  &lt;!----&gt; .. '</span>;</div><div class="line"></div><div class="line"><span class="comment">//贪婪模式</span></div><div class="line">re = <span class="regexp">/&lt;!--[^&gt;]*--&gt;/g</span>;</div><div class="line"></div><div class="line"><span class="comment">//非贪婪模式</span></div><div class="line">re = <span class="regexp">/&lt;!--(.|\s)*?--&gt;/g</span>;</div><div class="line"><span class="comment">// re = /&lt;!--[^&gt;]*?--&gt;/g;</span></div><div class="line"></div><div class="line">str.match(re) ;<span class="comment">// '&lt;!-- My -- comment \n test --&gt;', '&lt;!----&gt;'</span></div></pre></td></tr></table></figure>
<h4 id="10-补全如下正则表达式"><a href="#10-补全如下正则表达式" class="headerlink" title="10.补全如下正则表达式"></a><strong>10.补全如下正则表达式</strong></h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//贪婪模式</span></div><div class="line"><span class="keyword">var</span> re =<span class="regexp">/&lt;[^&gt;]+&gt;/g</span>;</div><div class="line"></div><div class="line"><span class="comment">//非贪婪模式</span></div><div class="line"><span class="keyword">var</span> re = <span class="regexp">/&lt;[^&gt;].*?&gt;/g</span>;</div><div class="line"></div><div class="line"><span class="keyword">var</span> str = <span class="string">'&lt;&gt; &lt;a href="/"&gt; &lt;input type="radio" checked&gt; &lt;b&gt;'</span></div><div class="line">str.match(re) <span class="comment">// '&lt;a href="/"&gt;', '&lt;input type="radio" checked&gt;', '&lt;b&gt;'</span></div></pre></td></tr></table></figure>
<hr>
]]></content>
      
        <categories>
            
            <category> 编程学习 </category>
            
            <category> 前端基础 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> JavaScript </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[闭包/延时器]]></title>
      <url>http://licao404.com/2016/03/28/%E9%97%AD%E5%8C%85+%E5%BB%B6%E6%97%B6%E5%99%A8/</url>
      <content type="html"><![CDATA[<blockquote>
<h3 id="【知识点】"><a href="#【知识点】" class="headerlink" title="【知识点】"></a>【知识点】</h3></blockquote>
<h4 id="1-什么是闭包-有什么作用？"><a href="#1-什么是闭包-有什么作用？" class="headerlink" title="1. 什么是闭包? 有什么作用？"></a><strong>1. 什么是闭包? 有什么作用？</strong></h4><h5 id="闭包概念："><a href="#闭包概念：" class="headerlink" title="闭包概念："></a>闭包概念：</h5><ul>
<li>简而言之，闭包就是有权访问另一个函数内部参数和变量的<code>函数</code>;</li>
<li>只有函数中的<code>内部函数</code>才能一直访问该函数作用域中的局部变量，即使在其外部函数被返回了之后。那么这个内部函数可以理解为闭包（创建了闭包）；</li>
<li>本质上，闭包就是沟通函数内部和函数外部的途径；</li>
</ul>
<a id="more"></a>
<h5 id="闭包作用："><a href="#闭包作用：" class="headerlink" title="闭包作用："></a>闭包作用：</h5><ul>
<li>实现封装，闭包可以访问和操作函数内部作用域中的参数和变量，使变量长期驻留内存，例如下面一个例子：<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//正常情况下，dealWith()函数内部的变量i无法在函数外被访问</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">dealWith</span> (<span class="params"></span>) </span>&#123;</div><div class="line">     <span class="keyword">var</span> i = <span class="number">0</span>;</div><div class="line"></div><div class="line">     <span class="function"><span class="keyword">function</span> <span class="title">inc</span> (<span class="params"></span>) </span>&#123;</div><div class="line">         i++;</div><div class="line">     &#125;</div><div class="line">     <span class="function"><span class="keyword">function</span> <span class="title">dec</span> (<span class="params"></span>) </span>&#123;</div><div class="line">         i--;</div><div class="line">     &#125;</div><div class="line">     <span class="function"><span class="keyword">function</span> <span class="title">get</span> (<span class="params"></span>) </span>&#123;</div><div class="line">         <span class="built_in">console</span>.log(i);</div><div class="line">         <span class="keyword">return</span> i;</div><div class="line">     &#125;</div><div class="line">     <span class="function"><span class="keyword">function</span> <span class="title">set</span> (<span class="params">k</span>) </span>&#123;</div><div class="line">         i = k;</div><div class="line">     &#125;</div><div class="line"><span class="comment">//当我们执行var deal = dealWith()时，下面的函数对象就返回给函数外部的全局变量deal，</span></div><div class="line"><span class="comment">//所以下面的函数对象将一直在内存里，而其依赖的dealWith()也不会在调用结束后被回收</span></div><div class="line">     <span class="keyword">return</span> &#123;</div><div class="line">        <span class="attr">inc</span>:inc,</div><div class="line">        <span class="attr">dec</span>:dec,</div><div class="line">        <span class="attr">get</span>:get,</div><div class="line">        <span class="attr">set</span>:set</div><div class="line">     &#125;</div><div class="line">&#125;</div><div class="line"><span class="keyword">var</span> deal = dealWith();</div><div class="line">deal.set(<span class="number">10</span>);<span class="comment">//通过调用内部的函数set()修改函数内部变量i</span></div><div class="line">deal.inc();</div><div class="line">deal.get();<span class="comment">//11</span></div><div class="line">deal.dec();</div><div class="line">deal.get();<span class="comment">//10</span></div></pre></td></tr></table></figure>
</li>
</ul>
<h4 id="2-setTimeout-0-有什么作用？"><a href="#2-setTimeout-0-有什么作用？" class="headerlink" title="2. setTimeout 0 有什么作用？"></a><strong>2. <code>setTimeout 0</code> 有什么作用？</strong></h4><blockquote>
<p>引子：正常情况下javascript都是按照顺序（<code>单线程</code>）执行的，也就是无法同时执行多段代码，当某一段代码正在执行的时候，所有后续的任务都必须等待，形成一个队列，一旦当前任务执行完毕，再从队列中取出下一个任务。这也常被称为 <code>“阻塞式执行”</code>。</p>
</blockquote>
<ul>
<li>但是我们可能让该语句后面的语句执行完再立即执行本身(延时执行该语句/函数)，这时就可以用到setTimeout延时0ms来实现；<a href="http://www.cnblogs.com/silin6/p/4333999.html" target="_blank" rel="external">拓展阅读&gt;&gt;</a></li>
</ul>
<hr>
<blockquote>
<h3 id="【练习】"><a href="#【练习】" class="headerlink" title="【练习】"></a>【练习】</h3></blockquote>
<h4 id="1-下面的代码输出多少？修改代码让fnArr-i-输出-i。使用两种以上的方法"><a href="#1-下面的代码输出多少？修改代码让fnArr-i-输出-i。使用两种以上的方法" class="headerlink" title="1.下面的代码输出多少？修改代码让fnArr[i]()输出 i。使用两种以上的方法"></a><strong>1.下面的代码输出多少？修改代码让<code>fnArr[i]()</code>输出 <code>i</code>。使用两种以上的方法</strong></h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> fnArr = [];</div><div class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i ++) &#123;</div><div class="line">    fnArr[i] =  <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">        <span class="keyword">return</span> i;</div><div class="line">    &#125;;</div><div class="line">&#125;</div><div class="line"><span class="built_in">console</span>.log( fnArr[<span class="number">3</span>]() );  <span class="comment">//10</span></div></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//***************方法1：创建闭包***************</span></div><div class="line"><span class="keyword">var</span> fnArr = [];</div><div class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i ++) &#123;</div><div class="line">    fnArr[i] = (<span class="function"><span class="keyword">function</span> (<span class="params">a</span>) </span>&#123;</div><div class="line">    	 <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    	 	<span class="keyword">return</span> a;</div><div class="line">    	 &#125;</div><div class="line">    &#125;)(i);</div><div class="line">&#125;</div><div class="line"><span class="built_in">console</span>.log( fnArr[<span class="number">3</span>]() );  <span class="comment">//3</span></div><div class="line"></div><div class="line"><span class="comment">//***************方法1换一种写法***************</span></div><div class="line"><span class="keyword">var</span> fnArr = [];</div><div class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i ++) &#123;</div><div class="line">	fnArr[i] = (<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">		 <span class="keyword">var</span> a = i;</div><div class="line">		 <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">		 	 <span class="keyword">return</span> a;</div><div class="line">		 &#125;</div><div class="line">	&#125;)();</div><div class="line"> &#125;</div><div class="line"><span class="built_in">console</span>.log( fnArr[<span class="number">3</span>]() );  <span class="comment">//3</span></div><div class="line"></div><div class="line"><span class="comment">//***************方法2：给函数绑定属性***************</span></div><div class="line"><span class="keyword">var</span> fnArr = [];</div><div class="line"><span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++)&#123;</div><div class="line">	fnArr[i] = <span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params"></span>)</span>&#123;</div><div class="line">		<span class="keyword">return</span> fn.idx;</div><div class="line">	&#125;</div><div class="line">	fnArr[i].idx = i;</div><div class="line">&#125;		</div><div class="line"><span class="built_in">console</span>.log( fnArr[<span class="number">3</span>]() );  <span class="comment">//3</span></div></pre></td></tr></table></figure>
<h4 id="2-使用闭包封装一个汽车对象，可以通过如下方式获取汽车状态"><a href="#2-使用闭包封装一个汽车对象，可以通过如下方式获取汽车状态" class="headerlink" title="2.使用闭包封装一个汽车对象，可以通过如下方式获取汽车状态"></a><strong>2.使用闭包封装一个汽车对象，可以通过如下方式获取汽车状态</strong></h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> Car = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">	 <span class="keyword">var</span> speed;</div><div class="line"></div><div class="line">	 <span class="function"><span class="keyword">function</span> <span class="title">setSpeed</span> (<span class="params">num</span>) </span>&#123;</div><div class="line">	 	 speed = num;</div><div class="line">	 &#125;</div><div class="line"></div><div class="line">	 <span class="function"><span class="keyword">function</span> <span class="title">getSpeed</span> (<span class="params"></span>) </span>&#123;</div><div class="line">	 	<span class="built_in">console</span>.log(speed);</div><div class="line">	 	<span class="keyword">return</span> speed ;</div><div class="line">	 &#125;</div><div class="line"></div><div class="line">	 <span class="function"><span class="keyword">function</span> <span class="title">accelerate</span> (<span class="params"></span>) </span>&#123;</div><div class="line">	 	 speed += <span class="number">10</span>;</div><div class="line">	 &#125;</div><div class="line"></div><div class="line">	 <span class="function"><span class="keyword">function</span> <span class="title">decelerate</span> (<span class="params"></span>) </span>&#123;</div><div class="line">	 	 speed -= <span class="number">10</span>;</div><div class="line">	 	 <span class="keyword">if</span>(speed &lt; <span class="number">0</span>)&#123;speed = <span class="number">0</span>&#125;</div><div class="line">	 &#125;</div><div class="line"></div><div class="line">	 <span class="function"><span class="keyword">function</span> <span class="title">getStatus</span> (<span class="params"></span>) </span>&#123;</div><div class="line">	 	<span class="keyword">return</span> speed &gt; <span class="number">0</span> ? <span class="string">"running"</span>:<span class="string">"stop"</span>;</div><div class="line">	 &#125;</div><div class="line"></div><div class="line">	 <span class="keyword">return</span> &#123;</div><div class="line">	 	<span class="attr">setSpeed</span>:setSpeed,</div><div class="line">	 	<span class="attr">getSpeed</span>:getSpeed,</div><div class="line">	 	<span class="attr">accelerate</span>:accelerate,</div><div class="line">	 	<span class="attr">decelerate</span>:decelerate,</div><div class="line">	 	<span class="attr">getStatus</span>:getStatus</div><div class="line">	 &#125;</div><div class="line">&#125;();</div><div class="line"></div><div class="line">Car.setSpeed(<span class="number">30</span>);</div><div class="line">Car.getSpeed(); <span class="comment">//30</span></div><div class="line">Car.accelerate();</div><div class="line">Car.getSpeed(); <span class="comment">//40;</span></div><div class="line">Car.decelerate();</div><div class="line">Car.decelerate();</div><div class="line">Car.getSpeed(); <span class="comment">//20</span></div><div class="line"><span class="built_in">console</span>.log(Car.getStatus()); <span class="comment">// 'running';</span></div><div class="line">Car.decelerate();</div><div class="line">Car.decelerate();</div><div class="line">Car.decelerate();</div><div class="line"><span class="built_in">console</span>.log(Car.getStatus()); <span class="comment">//'stop';</span></div><div class="line">Car.accelerate();</div><div class="line"><span class="built_in">console</span>.log(Car.getStatus());  <span class="comment">//'running';</span></div><div class="line"><span class="comment">// Car.speed;  //error无法访问函数内部变量</span></div></pre></td></tr></table></figure>
<h4 id="3-下写一个函数使用setTimeout模拟setInterval的功能"><a href="#3-下写一个函数使用setTimeout模拟setInterval的功能" class="headerlink" title="3.下写一个函数使用setTimeout模拟setInterval的功能"></a><strong>3.下写一个函数使用<code>setTimeout</code>模拟<code>setInterval</code>的功能</strong></h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 实时输出本机时间</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">myIntv</span> (<span class="params"></span>) </span>&#123;</div><div class="line">	 setTimeout(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">	 	<span class="keyword">var</span> now = <span class="keyword">new</span> <span class="built_in">Date</span>();</div><div class="line">	 	<span class="built_in">console</span>.log(now.getHours()+<span class="string">':'</span>+now.getMinutes()+<span class="string">':'</span>+now.getSeconds());</div><div class="line">	 	myIntv();</div><div class="line">	 &#125;, <span class="number">1000</span>)</div><div class="line">&#125;</div><div class="line">myIntv();</div></pre></td></tr></table></figure>
<h4 id="4-写一个函数，计算setTimeout最小时间粒度"><a href="#4-写一个函数，计算setTimeout最小时间粒度" class="headerlink" title="4.写一个函数，计算setTimeout最小时间粒度"></a><strong>4.写一个函数，计算setTimeout最小时间粒度</strong></h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">getMini</span> (<span class="params"></span>) </span>&#123;</div><div class="line">	<span class="keyword">var</span> startTime = <span class="built_in">Date</span>.now();</div><div class="line">	<span class="keyword">var</span> i = <span class="number">0</span>;</div><div class="line">	<span class="keyword">var</span> clock = setTimeout(<span class="function"><span class="keyword">function</span>  (<span class="params"></span>) </span>&#123;</div><div class="line">		 i++;</div><div class="line">		 <span class="keyword">if</span>(i === <span class="number">1000</span>)&#123;</div><div class="line">		 	clearTimeout(clock);</div><div class="line">		 	<span class="keyword">var</span> endTime = <span class="built_in">Date</span>.now();</div><div class="line">		 	<span class="built_in">console</span>.log((endTime-startTime)/i);</div><div class="line">		 &#125;</div><div class="line">		 clock = setTimeout(<span class="built_in">arguments</span>.callee, <span class="number">0</span>);</div><div class="line">	&#125;, <span class="number">0</span>)</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="5-下面这段代码输出结果是-为什么"><a href="#5-下面这段代码输出结果是-为什么" class="headerlink" title="5.下面这段代码输出结果是? 为什么?"></a><strong>5.下面这段代码输出结果是? 为什么?</strong></h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> a = <span class="number">1</span>;</div><div class="line">setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    a = <span class="number">2</span>;</div><div class="line">    <span class="built_in">console</span>.log(a);</div><div class="line">&#125;, <span class="number">0</span>);</div><div class="line"><span class="keyword">var</span> a ;</div><div class="line"><span class="built_in">console</span>.log(a);</div><div class="line">a = <span class="number">3</span>;</div><div class="line"><span class="built_in">console</span>.log(a);</div><div class="line"></div><div class="line"><span class="comment">//依次输出 1 3 2，而不是按照顺序1 2 3</span></div><div class="line"><span class="comment">//javascript是按照顺序（`单线程`）执行的</span></div><div class="line"><span class="comment">//因为用到了setTimeout(func, 0)，func内的语句会在下面的语句执行完成后立即执行,</span></div></pre></td></tr></table></figure>
<h4 id="6-下面这段代码输出结果是-为什么"><a href="#6-下面这段代码输出结果是-为什么" class="headerlink" title="6.下面这段代码输出结果是? 为什么?"></a><strong>6.下面这段代码输出结果是? 为什么?</strong></h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> flag = <span class="literal">true</span>;</div><div class="line">setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    flag = <span class="literal">false</span>;</div><div class="line">&#125;,<span class="number">0</span>)</div><div class="line"><span class="keyword">while</span>(flag)&#123;&#125;</div><div class="line"><span class="built_in">console</span>.log(flag);</div><div class="line"></div><div class="line"><span class="comment">//死循环，不输出</span></div><div class="line"><span class="comment">//javascript是按照顺序（`单线程`）执行的</span></div><div class="line"><span class="comment">//因为用到了setTimeout(func, 0),flag = false延后执行，while(flag)&#123;&#125;无限循环阻塞了后面语句的继续执行</span></div></pre></td></tr></table></figure>
<h4 id="7-下面这段代码输出？如何输出delayer-0-delayer-1"><a href="#7-下面这段代码输出？如何输出delayer-0-delayer-1" class="headerlink" title="7.下面这段代码输出？如何输出delayer: 0, delayer:1..."></a><strong>7.下面这段代码输出？如何输出<code>delayer: 0, delayer:1...</code></strong></h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>;i&lt;<span class="number">5</span>;i++)&#123;</div><div class="line">    setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">         <span class="built_in">console</span>.log(<span class="string">'delayer:'</span> + i );</div><div class="line">    &#125;, <span class="number">0</span>);</div><div class="line">    <span class="built_in">console</span>.log(i);</div><div class="line">&#125;</div><div class="line"><span class="comment">//输出 0 1 2 3 4 delayer:5 delayer:5 delayer:5 delayer:5 delayer:5</span></div></pre></td></tr></table></figure>
<p>以下先后进行两种改写，想想有什么区别，为什么结果会不同？<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//改写闭包形式01：</span></div><div class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>;i&lt;<span class="number">5</span>;i++)&#123;</div><div class="line">    setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params">i</span>)</span>&#123;</div><div class="line">         <span class="built_in">console</span>.log(<span class="string">'delayer:'</span> + i );</div><div class="line">    &#125;(i), <span class="number">0</span>);</div><div class="line">    <span class="built_in">console</span>.log(i);</div><div class="line">&#125;</div><div class="line"><span class="comment">//delayer:0 0 delayer:1 1 delayer:2 2 delayer:3 3 delayer:4 4</span></div></pre></td></tr></table></figure></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//改写闭包形式02：</span></div><div class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>;i&lt;<span class="number">5</span>;i++)&#123;</div><div class="line">	(<span class="function"><span class="keyword">function</span> (<span class="params">i</span>) </span>&#123;</div><div class="line">		 setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">         <span class="built_in">console</span>.log(<span class="string">'delayer:'</span> + i );</div><div class="line">    &#125;, <span class="number">0</span>);</div><div class="line">	&#125;)(i);</div><div class="line"></div><div class="line">    <span class="built_in">console</span>.log(i);</div><div class="line">&#125;</div><div class="line"><span class="comment">//0 1 2 3 4 delayer:0 delayer:1 delayer:2 delayer:3 delayer:4</span></div></pre></td></tr></table></figure>
<hr>
]]></content>
      
        <categories>
            
            <category> 编程学习 </category>
            
            <category> 前端基础 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> JavaScript </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[为什么你应该（从现在开始就）写博客]]></title>
      <url>http://licao404.com/2016/03/28/%E4%B8%BA%E4%BB%80%E4%B9%88%E4%BD%A0%E5%BA%94%E8%AF%A5%EF%BC%88%E4%BB%8E%E7%8E%B0%E5%9C%A8%E5%BC%80%E5%A7%8B%E5%B0%B1%EF%BC%89%E5%86%99%E5%8D%9A%E5%AE%A2/</url>
      <content type="html"><![CDATA[<h3 id="为什么你应该写博客"><a href="#为什么你应该写博客" class="headerlink" title="为什么你应该写博客"></a>为什么你应该写博客</h3><p>用一句话来说就是，<strong>写一个博客有很多好处，却没有任何明显的坏处。</strong>（阿灵顿的情况属于例外，而非常态，就像不能拿抽烟活到一百岁的英国老太太的个例来反驳抽烟对健康的极大损伤一样）</p>
<p>让我说得更明确一点：用博客的形式来记录下你有价值的思考，会带来很多好处，却没有任何明显的坏处。Note：碎碎念不算思考、心情琐记不算思考、唠唠叨叨也不算思考、没话找话也不算思考，请以此类推。<br><a id="more"></a><br>下面是我个人认为写一个长期的价值博客的最大的几点好处：</p>
<p><strong><em><code>&lt;1&gt;</code></em></strong> 能够交到很多志同道合的朋友。我自己既写博客，也读别人的博客，在这个时代，对于生活中的绝大多数人来说，拓宽朋友圈子的途径几乎只有一个，通过网络，而如何在网络中寻找到气味相投的朋友，如何判断别人和自己是否有共同语言？显然，通过天天在SNS上碎碎念的那些日记是难以做到的。我佩服的一些朋友几乎全都是长期用博客记录想法的人，因此，和他们即便不打照面，也是心照不宣。即便素未谋面也能坐下来就聊得热火朝天。<br> 为什么博客在结交志同道合的朋友方面的潜力要远胜于原始的交谈方式？很简单，第一，博客无地域限制，整个互联网上从A到B只有一个点击的距离，而传统的建立朋友圈子的方法则受到地域限制。第二，也是更重要的一点，即如果按照以前结交朋友的方式，需要互相聊天，交流观点，然后才逐渐熟悉起来，这需要一个较长的过程，而且更糟糕的是，当你遇到另一个陌生人，又要把整个过程重复一次，表达你已经对老友表达过的那番想法。可博客却做到了“一次表达，无数次阅读”，当我看到一个写了好几年的博客，看完了之后我仿佛和这个人交谈了很久，用程序员们喜欢听的话来说就是，“博客极大地增强了话语的复用性”。</p>
<p>我曾在CSDN上写了近六年的博客，在一年半前建立了一个Google Groups（TopLanguage），由于我的博客的长期阅读者都是互相有共同语言的，因此这个Group一开始就热火朝天，而高质量的技术讨论则进一步吸引了更多的牛人的参与，雪球滚起来之后，就很难停下来了，将近一年半下来，从这个Group的讨论中我获益良多[1]。而对于非程序员朋友，科学松鼠会则是一个很好的例子。</p>
<p><strong><em><code>&lt;2&gt;</code></em></strong> 书写是为了更好的思考。我在《书写是为了更好的思考》里面详细总结了书写的好处，这里就不拷贝粘贴了。有些想法如果不写下来，也就忘掉了，有一个广为流传的《数学牛人们的轶事》（荣耀属于ukim）里面讲了希尔伯特的一个故事：一次在Hilbert的讨论班上，一个年轻人报告，其中用了一个很漂亮的定理，Hilbert说“这真是一个妙不可言（wunderbaschon）的定理呀,是谁发现的？”那个年轻人茫然的站了很久，对Hilbert说：“是你.……”。</p>
<p><strong><em><code>&lt;3&gt;</code></em></strong> “教”是最好的“学”。如果一件事情你不能讲清楚，十有八九你还没有完全理解。绝大多数人应该都知道在程序员行业面试官经常要求你讲解一个东西给他听，他会说他不懂这个东西（他如果真的不懂的话效果其实是最好的），而你的任务则是说到让他理解为止。</p>
<p>为了让一个不明白的人做到明白，你必须要知道从明白到不明白他究竟需要掌握哪些概念，这就迫使我们对我们大脑中整个的知识体系来个寻根究底，把藏在水面之下的那些东西统统挖出来，把大脑中的那些我们知道、但不知道自己知道的潜在概念或假设（assumptions）都挖出来，把它们从内隐记忆拉扯到外显记忆中。因为只有完全知道、并知道自己知道一切来龙去脉的人，才能真正把一件事情讲得通通透透。</p>
<p>但是，你可能会怀疑，那除了能够讲清楚之外，弄清自己到底知道哪些东西还有其他什么好处吗？如果没有其他好处，那我又何必费这个劲呢？我又不当老师。</p>
<p>TopLanguage上的一位朋友sagasw曾经讲了这样一个小故事：据说在某个著名软件公司里，开发组的桌上会放着一只小熊，大家互相问问题之前，先对着小熊把问题说一遍，看能不能把问题描述的清晰，基本上说的比较有条理以后，答案也就随之而来了。当然，你不一定要对小熊说，你可以在大脑中虚构一个听众，一个不懂行的听众，然后你说给他听。这是可行的，我经常在路上用。不过如果你能坐下来，我建议你还是说给实际的听众听——即写下你的思考，因为书写是更好的思考。</p>
<p>我们的绝大多数知识在绝大多数时候都隐藏在潜意识中，其实我们意识的窗口很小，我们的工作记忆只能容纳寥寥数个条目（记得那个“看你能够记住屏幕上同时闪现的多少个数字”的flash小游戏吗？），我们平时所作的推理过程很大部分都是自动的，发生在潜意识中，而我们只能感知到一些中间结论。不信你回忆一下你在和别人讨论问题的时候有多少次觉得“反正就是这样，我感觉得到它是对的，但是你问我，我也说不清到底怎么回事”，对此你不觉得很奇怪吗？如果你都不能从逻辑上支持你的结论，你怎么就能确信它是对的呢？仅仅因为你的直觉强烈地告诉你它是对的？那如果旁边有另一个人，他和你持相反的观念，而他的直觉也强烈地告诉他他是对的。这时候你又怎么想？“他的直觉错了，我的直觉是对的”？难道你这么自信你的直觉是世界上最可靠的？</p>
<p>我自己则是非常珍惜类似这样的机会，即当“我强烈地觉得它是对的，但我却说不出所以然来”，这时候往往是到大脑中翻箱倒柜的时候，弄清来龙去脉的时候，深入反思的时候，纠正一直以来错误的潜在前提假设的时候。另一方面，“我强烈地觉得这个说法有问题，但我却说不清它为什么有问题，到底哪有问题”，这也是一个极有意义的瞬间，它几乎总是意味着你对一个问题的认识有潜在的偏差，肯定是在你自己都没有觉知到的地方引入了一个潜在的假设、偷换了一个重要的概念，等等。而这种时候就是深入反思的时候，当你终于潜到问题的底层，触摸到问题的实质，把水面之下的冰山整体看清了的时候你会有一种通体舒泰的感觉。</p>
<p>为什么说以上这些？因为刚才说的是你必须等待这样的反思机会，但如果你选择经常总结自己的知识体系，并说出来给你的读者听，你就会发现你自己创造了这样的机会。如果我们平时不反思，我们觉得很多事情都是当然的，但结果如果要你一开口说给别人听，常常会发现事情就开始变得不那么明显了，你说着说着，就开始莫名其妙地发现自己需要用到“反正”这个词了。</p>
<p>于是，反思的机会就来了。</p>
<p>一旦你把自己潜意识里面的东西从幕后拉出来，你就有了面对并反思它们的可能，而不是任它们在幕后阴险地左右你的思维。很多时候我们的思路出了问题并不是我们不会反思，而是不知道自己的思维中有那些隐含的假设（assumptions），如果你只感觉到答案，却不知道你大脑得到这个答案之前做了哪些推理，你又怎么知道哪一环可能出了问题呢？另一方面，一旦你弄清了自己到底是怎么想的，离意识到问题就不远了，很简单的道理——如果别人和你争辩的时候总是只摆立场，你就很难和他辩，但如果他把自己的推理过程原原本本暴露给你，批判起来总是容易得多的。（也正因为这个原因有很多人总是把逻辑藏在背后，不敢暴露出来）</p>
<p>绝大多数时候其实我们都会不假思索地得出一些结论，就像上了发条的自动机，但其实我们并不知道这些结论到底怎么来的，在思维的背后到底发生了哪些事情，故而当我们发现我们的结论错了的时候，一头雾水，没法着手寻找到底在哪错了。如果你注意一下很多人的发言（论坛、博客等等），如果你把他们的发言分为“前提”、“假设”、“逻辑”、“结论”这四个部分，你会发现一大堆人只会不停地下结论，摆立场，却见不到这些结论或离场的前提、假设和个中逻辑，倒也不是他们不愿意写出逻辑，而是因为反思自己的思维过程实在是一件困难非常的事情，我们的推理过程很大一部分发生在意识的水面之下，只有当有了重要结论的时候这条逻辑链才会浮出来冒一个泡，让我们的意识捕捉到。更何况绝大多数时候我们用的其实并不是完整严密的逻辑思维，而是思维捷径。</p>
<p>去教一个完全不懂的人，则是一种最最强大和彻底的反思途径——因为他没有任何预备的知识，所以要让他弄懂你所知道的，你就必须彻底反思你的知识体系，弄清这座大厦的根基在什么地方，弄清它的骨架在什么地方，一砖一瓦到底是怎么垒起来的，你不能自己站在11层上，然后假设你的读者站在第10层，指望着只要告诉他第11层有那些内容就让他明白。你的读者站在第一层，你必须知道你脚下踩着的另外10层到底是怎么构造的。这就迫使你对你所掌握的、或之前认为正确的那些东西作彻彻底底的、深刻的反思，你的受众越是不懂，你需要反思得就越深刻。</p>
<p><strong><em><code>&lt;4&gt;</code></em></strong> 讨论是绝佳的反思。另一方面，很多时候我们并不是有机会说给完全不懂的人听，更大的可能性是说给同领域有一定基础的人听，这个时候并不代表就不能促使反思了，实际上，你会发现，如果你公开你的想法，几乎总能看到与你持不同意见的人，然后你通过比较你和他的观念之间的差别，会发现你们在一开始的思路上就存在差异，差异从哪里来的？在进一步讨论中你们就会不断地迫使对方拿出更深层次的理由，这同样也是一种非常有效地促使自己反思的方法，在讨论的过程中双方的理由自然会变得越来越深入，越来越接近问题的本质，一些平时难以注意到的深层面的差异性就会逐渐浮现出来，你也就多了一次难得的机会去审视自己的思维中到底存放了哪些错误的信息。</p>
<p><strong><em><code>&lt;5&gt;</code></em></strong> 激励你去持续学习和思考。如果你没有持续学习和思考的习惯，你的博客很快就会没有内容可写，就只能整点碎碎念或者转载，然后你就会失去读者，然后你就会关掉博客，然后一旦关掉博客之后你也就死了写博客的心，然后就少了一条激励你去思考和总结的途径，然后你变得更不高兴总结和思考，然后…</p>
<p>为了打破这个死循环，不要永久停止更新你的博客，就算你两个月，三个月都不写，只要你每篇都是写自己思考的产物，写有价值的东西，在互联网上，金子的确总是会发光的，因为有无数的信息聚合平台在期待这些有价值的内容，有搜索引擎为你的内容提供海量的潜在读者，有海量的人肉在手动挖掘和转载那些有价值的东西。我们所能做的最差的一个决策莫过于停止做一件没有任何坏处，却有一大堆好处的事情。</p>
<p>为了让你的博客有价值，你必须不断总结自己学习的结果，你必须不断思考，给出比别人深刻、独到的见解。这看起来有点本末倒置，但很快本和末就会正过来。</p>
<p><strong><em><code>&lt;6&gt;</code></em></strong> 学会持之以恒地做一件事情。很多人在生活中容易觉得迷失，不知道想要做什么，是因为没有一件能够持续地做的事情，用俗话来说就是没有主心骨。用积极心理学的话来说就是没有一件能够创造流体验的事情，而书写自己的思想则是一件容易产生流体验的事情，在书写的时候，特别是理性地书写的时候，大脑逐渐进入推理分析模块，一切不愉快的情绪，烦躁感都会逐渐消隐下去。不过前提是你得开始，并且坚持过一开始的困难期，以后的一切便成了习惯成自然。</p>
<p><strong><em><code>&lt;7&gt;</code></em></strong> 一个长期的价值博客是一份很好的简历。这里的“简历”并非是狭义上的求职简历，毕竟现在还没有到价值博客的时代，很多人写博客都是到处转载或者干脆碎碎念，正因此面试官未必拿个人博客当成了解一个人的更可靠窗口。这里的“简历”是指一个让别人了解自己的窗口，虽然我们未必做得到像罗永浩、Keso这样的博客，个人的影响力已经足以支撑出一份事业（牛博和5gme），但至少你会因此而结识更多的人，你的博客价值越高，你结识的人就越牛，跟牛人交流又会让你的眼界得到极大的开阔，打开一扇又一扇你原本不知道的门，于是你就变得更牛… 这是一个良性循环。</p>
<h3 id="怎么做到长期写一个价值博客"><a href="#怎么做到长期写一个价值博客" class="headerlink" title="怎么做到长期写一个价值博客"></a>怎么做到长期写一个价值博客</h3><p>注意到我并没有说“怎么做到长期坚持写一个价值博客”，因为当思考和总结成为习惯之后，诉诸文字以及借助书写来进一步思考就变成了一件自然而然的事情，就变成了一件“因为你在思考和总结从而必须书写下来”的事情，博客就变成了副产品。</p>
<p>一开始的时候你是因为要写博客而去使劲地思考和总结，指望给出令人眼睛一亮的东西，到了后来，就变成了因为你习惯了思考和总结，因为你意识到书写是更好的思考，你就必须使你的想法成为文字。至此本和末就会各归原位，不再颠倒。</p>
<p>怎样做到长期写一个价值博客？也许有人会给出很多有趣有用的小技巧来提供动机和激励，譬如如何做SEO，如何鼓励读者留言等等，但是这些我都不想说，我只想说最最重要的，那就是：</p>
<p>让你自己成为一个持续学习和思考的人，并只写你真正思考和总结之后的产物，其他一切就会随之而来。</p>
<p>就像那句经常被人传阅的话：只做你最感兴趣的事情，钱会随之而来[2]。</p>
<p>这方面的具体例子大家可以留意一下，随处可见，就不一一举了。我想再重复一下的是，千万不要碎碎念，我能理解每个人都想偶尔发发牢骚的冲动，但是现在已经有了一个很好的窗口：twitter，所以立即停止在你的博客上碎碎念，阅读博客的人希望得到信息而非噪音。如果实在忍不住想碎碎念的话不妨换一下位置，这么来告诉自己：如果你看到别人博客来上这么一段，你会有兴趣看吗？</p>
<h3 id="可能出现的问题以及怎样应付"><a href="#可能出现的问题以及怎样应付" class="headerlink" title="可能出现的问题以及怎样应付"></a>可能出现的问题以及怎样应付</h3><p>即便上文给出了N条写博客的理由，但有时候只要一条不写的理由就会让人停止做一件事情。所以我特别加上一节“可能出现的问题以及怎样应付”，《影响力2》[3]第五章雄辩地证明，“Much of Will is Skill”，意志力很大程度上来源于有正确的方法，而非天生。</p>
<p><strong><em><code>&lt;1&gt;</code></em></strong> 担心别人认为没有价值。事实是，你面临过的问题总会有人面临过，你独立思考了，别人没有，你的文章对他们就会有价值。当然，肯定会对某些人没有价值，他们早就知道了，但就算你再厉害，也总是有人比你厉害的，不能说因为这些原因就不记录你自己的想法了，你自己思考了之后理解得最深刻，就算有别人想过了，总有人没有想到的。况且，思考成了习惯，你的思考能力也会越来越强，你的文章也会越来越有价值。重复，无论你面临什么困惑，总会有很多人同样面临过，于是你苦苦思索之后的结果，肯定会对很多人有意义。</p>
<p>或者，你想通了之后觉得其实也很简单于是不愿意或者不好意思写了，但要知道，问题在想通了之后总是简单的，问题的困难程度不在于想通了之后还觉得有多难，而在于从你觉得它难到你觉得它简单需要耗费多少思维体力，你耗费的时间越长，说明有越多的人最终还是没有想明白（路越长走到底的人越少）。</p>
<p>最后，虽然我现在看一年前的文章觉得挺不成熟，但是如果没有那些不成熟的思考，也不会有现在更成熟的思考，我几年后来看现在写的东西，还是会觉得不成熟。</p>
<p><strong><em><code>&lt;2&gt;</code></em></strong> 担心想法太幼稚或有漏洞等等被别人笑话。人非圣贤。正是因为单个人的想法总是有漏洞，才值得拿出来交流（《书写是更好的思考》，讨论是绝佳的反思），被别人指出问题正是改进的空间，藏着掖着的想法永远不可能变得更成熟。</p>
<p>Much of intelligence is knowledge，有这么一个非常发人深省的经典心理学实验[4]：</p>
<p>将孩子们分成两组，通过给他们不同的阅读材料让一组相信智力是天生的，不可在后天改变的，另一组则让他们相信智力其实只是知识和技能的代名词，完全是后天习得的。接下来让他们做一组任务，那些被相信智力天生说的孩子，倾向于回避困难的任务，选择较容易的任务，这里的逻辑想必是这样的：如果做困难的任务，就增大了失败的几率，就在降低了自己在别人和自己心目中的智力的值。为了保护这个智力的值不被降低，应该避免那些有失败风险的项目。而另一组孩子则对于有挑战性的事情跃跃欲试，并且在失败的时候明显没有前者沮丧，因为失败也是学得新的东西，不管怎样都是“智力”的提高。</p>
<p>况且，只会批判乃至嘲笑别人的人是最不知道怎么建设的人，忽略他们。</p>
<p><strong><em><code>&lt;3&gt;</code></em></strong> 得不到激励。这其实是个最无聊的问题了，只有写碎碎念的博客才会面对“激励”的问题。如果写自己的总结，写自己独立的思考，那么书写下来、理解通透，本身就是一个极大的激励。就算放在自己的私密笔记本里面也一样有成就感。况且，如果你真做到了书写价值博客，那么绝对不用担心你的观点得不到传播，也许一开始会耗时长一点，但是这在任何事情上都是必要的初始阶段，Gmail小组的核心人物、FriendFeed创始人Paul Buchheit，和编程界名博Coding Horror的博主Jeff Atwood都曾经感叹过：Overnight success takes a long time （(1)，(2)），不过对于价值博客来说，现在网络上的聚合类服务这么多，机器的、人肉的、半人肉的都有，情况又要好得多了，而且我相信情况还会越来越好。</p>
<p><strong><em><code>&lt;4&gt;</code></em></strong> 写不出来。这个问题也比较无聊，思考本不是一件急于求成的事情。长期订阅我的博客的朋友知道我一般发文频率在一个月三五篇，实际上有不少次我个把月也不发布文章，原因很简单，要么是有手头的事情要处理思考的时间被压缩了，要么是遇到比较大或者比较困难的问题需要长时间的思考和积淀，没有关系，如果没有想清楚就再想想，爱思考的人和不爱思考的人有一个本质的区别，前者在生活中总是挂着几个问题在大脑中，它们时常都会冒出来骚扰你一下，让你琢磨琢磨，不爱思考的则是没事不主动想问题，遇到问题还要先想想是否能找捷径（找人帮忙）解决。</p>
<p>无论如何，不用急于求成，在一个主题上深入下去思考，总能挖到别人挖不到的角落。你能让一个问题在大脑中停留的时间越长，就越是能够发现新的东西，一般来说，我认为有价值的问题我会让他在意识或潜意识中待短则一个星期，长则一个月（视问题大小而定），利用走路吃饭的时间琢磨（我发现很多我佩服的人也都有这个习惯），有时即便已经想通了写下来了发出去了，大脑仍然还是会在回味问题，还没有把它撤出潜意识，然后看到某篇文章或某本书的时候忽然又有所新的感悟。</p>
<p>能够把问题长时间停靠在潜意识中是一种技能，能够带来很大的好处，停留得越长你越琢磨得透彻，比别人看到的就越多。我们必须要带着问题的眼镜看待事物才能发现新的视角，否则就会出现视而不见效应，别的不说，广为人知的例子是阿基米德的“尤里卡！”，如果不是长时间琢磨着一个问题，一直把它放在思维中，是不会从洗澡领悟到“排水测体积”的，否则他洗了那么多年澡怎么不早发现呢？</p>
<p><strong><em><code>&lt;5&gt;</code></em></strong> 所以，如果你习惯了思考问题，就总会有东西写，先有思考，然后有总结，然后在总结中进一步思考。</p>
<p>当然你也可以试试把不成熟的想法写下来，试图整理成条理清晰的文字，然后看看能否在整理的过程中走得更远。这往往是可行的。比如这篇文章在我的简记里面原本其实只有三行字（包含大约十来个备忘关键词），而最初在我的大脑里面其实只有一个走路时冒出来的问题——为什么要写博客？</p>
<p>–</p>
<p>[1] 你可以看一下我收藏的一些精彩主题。</p>
<p>[2] 尽管我并不完全同意这句话本身，但它这种解决问题链上更基本环节的问题的精神是我赞同的。</p>
<p>[3] 《影响力2》这个名字起得很聪明，其实它并不是《影响力》的作者写的。</p>
<p>[4] 我忘了这则实验的出处了，但实验的精神是记忆犹新的，哪位同学记得原始出处的麻烦提醒我一下。</p>
<p>[5] 对于阿基米德这个故事的真实性是有争议的，毕竟几千年久远的事情谁弄得清呢。但是故事的道理是很本质的，我们平时也经常有类似的体验，加上阿基米德的“尤里卡”实在太出名了，所以我相信用用无妨。</p>
<blockquote>
<p>本文转载自刘未鹏的博客 <a href="http://mindhacks.cn/" target="_blank" rel="external">MIND HACKS</a></p>
</blockquote>
<hr>
]]></content>
      
        <categories>
            
            <category> 随想 </category>
            
            <category> 那些鸡汤 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 杂谈 </tag>
            
            <tag> 心语 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Date类型/引用类型深拷贝]]></title>
      <url>http://licao404.com/2016/03/26/Date%E7%B1%BB%E5%9E%8B+%E5%BC%95%E7%94%A8%E7%B1%BB%E5%9E%8B%E6%B7%B1%E6%8B%B7%E8%B4%9D/</url>
      <content type="html"><![CDATA[<blockquote>
<h3 id="【知识点】"><a href="#【知识点】" class="headerlink" title="【知识点】"></a>【知识点】</h3></blockquote>
<h4 id="1-基础类型有哪些？复杂类型有哪些？有什么特征？"><a href="#1-基础类型有哪些？复杂类型有哪些？有什么特征？" class="headerlink" title="1. 基础类型有哪些？复杂类型有哪些？有什么特征？"></a><strong>1. 基础类型有哪些？复杂类型有哪些？有什么特征？</strong></h4><ul>
<li>基础类型：数值、字符串、布尔值、undefined、null；</li>
<li>复杂类型：函数、对象、数组、正则、Date……  </li>
</ul>
<a id="more"></a>  
<blockquote>
<ul>
<li>基本类型的数据是直接保存在栈内存里的，按值访问，操作实实在在保存的值；</li>
<li>引用类型保存在堆内存内,变量保存的是它们所在堆内存中的地址（指针）；</li>
<li>基本类型间的复制是值的复制，一个值发生改变不会影响另一个，如：<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> a = <span class="number">1</span>;</div><div class="line"><span class="keyword">var</span> b = a;<span class="comment">//a复制给b</span></div><div class="line">a = <span class="number">2</span>;<span class="comment">//改变a</span></div><div class="line"><span class="built_in">console</span>.log(<span class="string">"a = "</span>+a);<span class="comment">//a = 2</span></div><div class="line"><span class="built_in">console</span>.log(<span class="string">"b = "</span>+b);<span class="comment">//b = 1 a发生改变 b不会变</span></div></pre></td></tr></table></figure>
</li>
</ul>
</blockquote>
<ul>
<li>正是因为变量保存的是指针，所以变量间复制的是栈内存里的指针，是指向堆中同一个对象，所以其中一个改变必然另外一个也要改变,如下图所示：<br><img src="http://7xr868.com1.z0.glb.clouddn.com/task19%2F%E5%BC%95%E7%94%A8%E7%B1%BB%E5%9E%8B%E5%A4%8D%E5%88%B6.jpg" alt=""></li>
</ul>
<hr>
<blockquote>
<h3 id="【练习】"><a href="#【练习】" class="headerlink" title="【练习】"></a>【练习】</h3></blockquote>
<h4 id="1-写一个函数getIntv，获取从当前时间到指定日期的间隔时间"><a href="#1-写一个函数getIntv，获取从当前时间到指定日期的间隔时间" class="headerlink" title="1.写一个函数getIntv，获取从当前时间到指定日期的间隔时间"></a><strong>1.写一个函数getIntv，获取从当前时间到指定日期的间隔时间</strong></h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">getIntv</span> (<span class="params">date</span>) </span>&#123;</div><div class="line">     <span class="keyword">var</span> allms = <span class="built_in">Date</span>.parse(date) - <span class="built_in">Date</span>.now(); <span class="comment">//当前时间距离目标时间的总毫秒数</span></div><div class="line">     <span class="keyword">var</span> dayms = <span class="number">1000</span>*<span class="number">60</span>*<span class="number">60</span>*<span class="number">24</span>,<span class="comment">//1天</span></div><div class="line">         houms = <span class="number">1000</span>*<span class="number">60</span>*<span class="number">60</span>,<span class="comment">//1小时</span></div><div class="line">         minms = <span class="number">1000</span>*<span class="number">60</span>,<span class="comment">//1分钟</span></div><div class="line">         secms = <span class="number">1000</span>;<span class="comment">//1秒</span></div><div class="line">     <span class="keyword">var</span> day = <span class="built_in">Math</span>.floor(allms/dayms),</div><div class="line">         hou = <span class="built_in">Math</span>.floor((allms%dayms)/houms),</div><div class="line">         min = <span class="built_in">Math</span>.floor(((allms%dayms)%houms)/minms),</div><div class="line">         sec = <span class="built_in">Math</span>.floor((((allms%dayms)%houms)%minms)/secms);</div><div class="line">     <span class="keyword">return</span> <span class="string">"距离除夕还有 "</span>+day+<span class="string">" 天 "</span>+hou+<span class="string">" 小时 "</span>+min+<span class="string">" 分 "</span>+sec+<span class="string">" 秒"</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">var</span> str = getIntv(<span class="string">"2017-01-27"</span>);<span class="comment">//2017年除夕</span></div><div class="line"><span class="built_in">console</span>.log(str);<span class="comment">// 距除夕还有 ？ 天 ？ 小时 ？ 分 ？ 秒</span></div></pre></td></tr></table></figure>
<h4 id="2-把数字日期改成中文日期"><a href="#2-把数字日期改成中文日期" class="headerlink" title="2.把数字日期改成中文日期"></a><strong>2.把数字日期改成中文日期</strong></h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">getChsDate</span> (<span class="params">date</span>) </span>&#123;</div><div class="line">     <span class="keyword">var</span> dateObj = <span class="keyword">new</span> <span class="built_in">Date</span>(date);</div><div class="line">     <span class="keyword">var</span> list = [<span class="string">'零'</span>, <span class="string">'一'</span>,<span class="string">'二'</span>,<span class="string">'三'</span>,<span class="string">'四'</span>,<span class="string">'五'</span>,<span class="string">'六'</span>,<span class="string">'七'</span>,<span class="string">'八'</span>,<span class="string">'九'</span>,<span class="string">'十'</span>,<span class="string">'十一'</span>,<span class="string">'十二'</span>,<span class="string">'十三'</span>,<span class="string">'十四'</span>,<span class="string">'十五'</span>,<span class="string">'十六'</span>,<span class="string">'十七'</span>,<span class="string">'十八'</span>,<span class="string">'十九'</span>,<span class="string">'二十'</span>,<span class="string">'二十一'</span>,<span class="string">'二十二'</span>,<span class="string">'二十三'</span>,<span class="string">'二十四'</span>,<span class="string">'二十五'</span>,<span class="string">'二十六'</span>,<span class="string">'二十七'</span>,<span class="string">'二十八'</span>,<span class="string">'二十九'</span>,<span class="string">'三十'</span>,<span class="string">'三十一'</span>];</div><div class="line">     <span class="keyword">var</span> year = dateObj.getFullYear().toString(),</div><div class="line">         mon = dateObj.getMonth()+<span class="number">1</span>,</div><div class="line">         day = dateObj.getDate();</div><div class="line">     <span class="keyword">return</span> list[year[<span class="number">0</span>]] + list[year[<span class="number">1</span>]] + list[year[<span class="number">2</span>]] + list[year[<span class="number">3</span>]] + <span class="string">' 年 '</span> + list[mon] +<span class="string">' 月 '</span> + list[day] + <span class="string">' 日 '</span>;</div><div class="line">&#125;</div><div class="line"><span class="keyword">var</span> str = getChsDate(<span class="string">'2015/2/19'</span>);</div><div class="line"><span class="built_in">console</span>.log(str);<span class="comment">// 二零一五年二月十九日</span></div></pre></td></tr></table></figure>
<h4 id="3-写一个函数获取n天前的日期"><a href="#3-写一个函数获取n天前的日期" class="headerlink" title="3.写一个函数获取n天前的日期"></a><strong>3.写一个函数获取n天前的日期</strong></h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">getLastNDays</span> (<span class="params">num</span>) </span>&#123;</div><div class="line">      <span class="keyword">var</span> datems = <span class="built_in">Date</span>.now() - num*(<span class="number">24</span> * <span class="number">60</span> * <span class="number">60</span> * <span class="number">1000</span>),</div><div class="line">          date = <span class="keyword">new</span> <span class="built_in">Date</span>(datems),</div><div class="line">          year = date.getFullYear(),</div><div class="line">          mon = date.getMonth()+<span class="number">1</span>,</div><div class="line">          day = date.getDate();</div><div class="line">      <span class="keyword">return</span> year + <span class="string">'-'</span> + mon + <span class="string">'-'</span> + day;</div><div class="line">&#125;</div><div class="line"><span class="keyword">var</span> lastWeek =  getLastNDays(<span class="number">7</span>);</div><div class="line"><span class="built_in">console</span>.log(lastWeek);</div><div class="line"><span class="keyword">var</span> lastMonth = getLastNDays(<span class="number">30</span>);</div><div class="line"><span class="built_in">console</span>.log(lastMonth);</div></pre></td></tr></table></figure>
<h4 id="4-完善如下代码，如："><a href="#4-完善如下代码，如：" class="headerlink" title="4.完善如下代码，如："></a><strong>4.完善如下代码，如：</strong></h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> Runtime = (<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="keyword">var</span> startTime,endTime,doTime;</div><div class="line">    <span class="keyword">return</span> &#123;</div><div class="line">        <span class="attr">start</span>: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">              startTime = <span class="built_in">Date</span>.now();</div><div class="line">              <span class="keyword">return</span> startTime;</div><div class="line">        &#125;,</div><div class="line">        <span class="attr">end</span>: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">              endTime = <span class="built_in">Date</span>.now();</div><div class="line">              <span class="keyword">return</span> endTime;</div><div class="line">        &#125;,</div><div class="line">        <span class="attr">get</span>: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">             doTime = endTime - startTime;</div><div class="line">             <span class="keyword">return</span> <span class="string">'运行时间:'</span>+ doTime + <span class="string">'ms'</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;;</div><div class="line">&#125;());</div><div class="line">Runtime.start();</div><div class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i&lt;<span class="number">10000</span>; i++)&#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="number">1</span>);</div><div class="line">&#125;</div><div class="line">Runtime.end();</div><div class="line"><span class="built_in">console</span>.log(  Runtime.get() );</div></pre></td></tr></table></figure>
<h4 id="5-楼梯有200级，每次走1级或是2级，从底走到顶一共有多少种走法？用代码（递归）实现"><a href="#5-楼梯有200级，每次走1级或是2级，从底走到顶一共有多少种走法？用代码（递归）实现" class="headerlink" title="5.楼梯有200级，每次走1级或是2级，从底走到顶一共有多少种走法？用代码（递归）实现"></a><strong>5.楼梯有200级，每次走1级或是2级，从底走到顶一共有多少种走法？用代码（递归）实现</strong></h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//这应该是一个经典的递归问题，不过200级对于递归来说效率问题就……，试了下算50级在我这渣电脑上运行了6分多钟以上</span></div><div class="line">Runtime.start();</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">walkWay</span>(<span class="params">step</span>) </span>&#123;</div><div class="line">    <span class="keyword">return</span> (step == <span class="number">0</span> || step == <span class="number">1</span>)?<span class="number">1</span>:walkWay(step - <span class="number">1</span>) + walkWay(step - <span class="number">2</span>);</div><div class="line">&#125;</div><div class="line"><span class="built_in">console</span>.log(<span class="string">'总共 '</span> + walkWay(<span class="number">50</span>) + <span class="string">' 走法'</span>);</div><div class="line">Runtime.end();</div><div class="line"><span class="built_in">console</span>.log(  Runtime.get() );</div></pre></td></tr></table></figure>
<h4 id="6-写一个json对象深拷贝的方法，json对象可以多层嵌套，值可以是字符串、数字、布尔、json对象中的任意项"><a href="#6-写一个json对象深拷贝的方法，json对象可以多层嵌套，值可以是字符串、数字、布尔、json对象中的任意项" class="headerlink" title="6.写一个json对象深拷贝的方法，json对象可以多层嵌套，值可以是字符串、数字、布尔、json对象中的任意项"></a><strong>6.写一个json对象深拷贝的方法，json对象可以多层嵌套，值可以是字符串、数字、布尔、json对象中的任意项</strong></h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">jsonCopy</span> (<span class="params">json</span>) </span>&#123;</div><div class="line">     <span class="keyword">var</span> newJson = &#123;&#125;;</div><div class="line">     <span class="keyword">for</span> (<span class="keyword">var</span> k <span class="keyword">in</span> json) &#123;</div><div class="line">        <span class="keyword">if</span>(<span class="keyword">typeof</span> json[k] == <span class="string">"object"</span>)&#123;</div><div class="line">            newJson[k] = jsonCopy(json[k]);</div><div class="line">        &#125;<span class="keyword">else</span> &#123;</div><div class="line">            newJson[k] = json[k];</div><div class="line">        &#125;</div><div class="line">     &#125;</div><div class="line">     <span class="keyword">return</span> newJson;</div><div class="line">&#125;</div><div class="line"><span class="keyword">var</span> studentA = &#123;</div><div class="line">    <span class="string">"name"</span>:<span class="string">"licao"</span>,</div><div class="line">    <span class="string">"age"</span>:<span class="string">"20"</span>,</div><div class="line">    <span class="string">"like"</span>:&#123;</div><div class="line">        <span class="string">"food"</span>:<span class="string">"meat"</span>,</div><div class="line">        <span class="string">"drinking"</span>:<span class="string">"milk"</span></div><div class="line">    &#125;</div><div class="line">&#125;;</div><div class="line"><span class="keyword">var</span> studentB = jsonCopy(studentA);</div><div class="line"><span class="built_in">console</span>.log(studentA);<span class="comment">//Object &#123;name: "licao", age: "20", like: Object&#125;</span></div><div class="line"><span class="built_in">console</span>.log(studentB);<span class="comment">//Object &#123;name: "licao", age: "20", like: Object&#125;</span></div></pre></td></tr></table></figure>
<h4 id="7-写一个数组深拷贝的方法，数组里的值可以是字符串、数字、布尔、数组中的任意项目"><a href="#7-写一个数组深拷贝的方法，数组里的值可以是字符串、数字、布尔、数组中的任意项目" class="headerlink" title="7.写一个数组深拷贝的方法，数组里的值可以是字符串、数字、布尔、数组中的任意项目"></a><strong>7.写一个数组深拷贝的方法，数组里的值可以是字符串、数字、布尔、数组中的任意项目</strong></h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">arrCopy</span> (<span class="params">arr</span>) </span>&#123;</div><div class="line">     <span class="keyword">var</span> newArr = [];</div><div class="line">     <span class="keyword">for</span> (<span class="keyword">var</span> k <span class="keyword">in</span> arr) &#123;</div><div class="line">        <span class="keyword">if</span> (arr[k] <span class="keyword">instanceof</span> <span class="built_in">Array</span>) &#123;</div><div class="line">            newArr[k] = arrCopy(arr[k]);</div><div class="line">        &#125;<span class="keyword">else</span> &#123;</div><div class="line">            newArr[k] = arr[k];</div><div class="line">        &#125;</div><div class="line">      &#125;</div><div class="line">      <span class="keyword">return</span> newArr;</div><div class="line">&#125;</div><div class="line"><span class="keyword">var</span> studentA = [<span class="string">'licao'</span>,<span class="string">'20'</span>,<span class="string">'true'</span>,[<span class="string">'licao'</span>,<span class="string">'20'</span>,<span class="string">'true'</span>]];</div><div class="line"></div><div class="line"><span class="built_in">console</span>.log(studentA);<span class="comment">//["licao", "20", "true", Array[3]]</span></div><div class="line"><span class="built_in">console</span>.log(arrCopy(studentA));<span class="comment">//["licao", "20", "true", Array[3]]</span></div></pre></td></tr></table></figure>
<h4 id="8-写一个深拷贝的方法，拷贝对象以及内部嵌套的值可以是字符串、数字、布尔、数组、json对象中的任意项"><a href="#8-写一个深拷贝的方法，拷贝对象以及内部嵌套的值可以是字符串、数字、布尔、数组、json对象中的任意项" class="headerlink" title="8.写一个深拷贝的方法，拷贝对象以及内部嵌套的值可以是字符串、数字、布尔、数组、json对象中的任意项"></a><strong>8.写一个深拷贝的方法，拷贝对象以及内部嵌套的值可以是字符串、数字、布尔、数组、json对象中的任意项</strong></h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">objectCopy</span> (<span class="params">obj</span>) </span>&#123;</div><div class="line">     <span class="keyword">var</span> newObj = &#123;&#125;;</div><div class="line">     <span class="keyword">for</span> (<span class="keyword">var</span> k <span class="keyword">in</span> obj) &#123;</div><div class="line">        <span class="keyword">if</span> (<span class="keyword">typeof</span> obj[k] == <span class="string">"object"</span>) &#123;</div><div class="line">            newObj[k] = objectCopy(obj[k]);</div><div class="line">        &#125;<span class="keyword">else</span> &#123;</div><div class="line">            newObj[k] = obj[k];</div><div class="line">        &#125;</div><div class="line">      &#125;</div><div class="line">      <span class="keyword">return</span> newObj;</div><div class="line">&#125;</div><div class="line"><span class="keyword">var</span> studentA = &#123;</div><div class="line">    <span class="attr">name</span>:<span class="string">"licao"</span>,</div><div class="line">    <span class="attr">age</span>:<span class="number">20</span>,</div><div class="line">    <span class="attr">man</span>:<span class="literal">true</span>,</div><div class="line">    <span class="attr">other</span>:&#123;</div><div class="line">        <span class="string">"hobby"</span>:<span class="string">"shoot"</span>,</div><div class="line">        <span class="string">"birth"</span>:<span class="number">1995</span></div><div class="line">    &#125;,</div><div class="line">    <span class="attr">arr</span>:[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]</div><div class="line">&#125;;</div><div class="line"><span class="built_in">console</span>.log(studentA);<span class="comment">//Object &#123;name: "licao", age: 20, man: true, other: Object, arr: Array[3]&#125;</span></div><div class="line"><span class="built_in">console</span>.log(objectCopy(studentA));<span class="comment">//Object &#123;name: "licao", age: 20, man: true, other: Object, arr: Array[3]&#125;</span></div></pre></td></tr></table></figure>
<hr>
]]></content>
      
        <categories>
            
            <category> 编程学习 </category>
            
            <category> 前端基础 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> JavaScript </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[狠不趁早]]></title>
      <url>http://licao404.com/2016/03/20/%E7%8B%A0%E4%B8%8D%E8%B6%81%E6%97%A9/</url>
      <content type="html"><![CDATA[<p>人会下意识的去纵容自己的惰性，这惰性，不只于懒惰，也有沉迷！沉迷于本以为对的方向，懒得停下回头，丢了思考的能力，错过很多如花青春。</p>
<hr>
<span itemprop="image" itemscope="" itemtype="http://schema.org/ImageObject"><img itemprop="url image" src="http://7xrvo9.com1.z0.glb.clouddn.com/0320%2F2015-09-27%2009.31.27%201.jpg" class="full-image" alt="alt"><meta itemprop="width" content="auto"><meta itemprop="height" content="auto"></span>
<hr>
<p>然而我们总会醒来，时间逼迫我们重新去思索，审视，谋划我们那所剩不多的“后青春”时代，不负当下，不负时光。</p>
<hr>
]]></content>
      
        <categories>
            
            <category> 随想 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 杂谈 </tag>
            
            <tag> 心语 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[鲜花烂漫时]]></title>
      <url>http://licao404.com/2016/03/20/%E9%B2%9C%E8%8A%B1%E7%83%82%E6%BC%AB%E6%97%B6/</url>
      <content type="html"><![CDATA[<div class="group-picture"><div class="group-picture-container"><div class="group-picture-row"><div class="group-picture-column" style="width: 100%;"><img src="http://7xrvo9.com1.z0.glb.clouddn.com/0320%2F2016-03-20%2012.19.57%201.jpg" alt=""></div></div><div class="group-picture-row"><div class="group-picture-column" style="width: 50%;"><img src="http://7xrvo9.com1.z0.glb.clouddn.com/0320%2F2016-03-20%2012.24.13%201.jpg" alt=""></div><div class="group-picture-column" style="width: 50%;"><img src="http://7xrvo9.com1.z0.glb.clouddn.com/0320%2F2016-03-20%2012.28.55%201.jpg" alt=""></div></div></div></div>
]]></content>
      
        <categories>
            
            <category> 随想 </category>
            
            <category> 摄影 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 杂谈 </tag>
            
            <tag> 看看 </tag>
            
            <tag> 随手拍 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Hexo常用命令收集]]></title>
      <url>http://licao404.com/2016/03/19/Hexo%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4%E7%AC%94%E8%AE%B0/</url>
      <content type="html"><![CDATA[<blockquote class="blockquote-center">此文收集常用Hexo命令，欢迎补充，持续更新…</blockquote>

<a id="more"></a>
<h2 id="Hexo准备"><a href="#Hexo准备" class="headerlink" title="Hexo准备"></a>Hexo准备</h2><blockquote>
<p><code>npm install hexo -g</code> #安装<br><code>npm update hexo -g</code> #升级<br><code>hexo init</code> #初始化  </p>
</blockquote>
<h2 id="简写形式"><a href="#简写形式" class="headerlink" title="简写形式"></a>简写形式</h2><ul>
<li><code>hexo n &quot;我的博客&quot;</code> == <code>hexo new &quot;我的博客&quot;</code> #新建文章</li>
<li><code>hexo p</code> == <code>hexo publish</code></li>
<li><code>hexo g</code> == <code>hexo generate</code>#生成</li>
<li><code>hexo s</code> == <code>hexo server</code> #启动服务预览</li>
<li><code>hexo d</code> == <code>hexo deploy</code>#部署</li>
</ul>
<h2 id="服务器相关"><a href="#服务器相关" class="headerlink" title="服务器相关"></a>服务器相关</h2><ul>
<li><code>hexo clean</code> #清除缓存 网页正常情况下可以忽略此条命令</li>
<li><code>hexo g</code> #生成静态网页</li>
<li><code>hexo server</code> #Hexo 会监视文件变动并自动更新，您无须重启服务器。</li>
<li><code>hexo server -s</code> #静态模式</li>
<li><code>hexo server -p</code> 5000 #更改端口</li>
<li><code>hexo server -i 192.168.1.1</code> #自定义 IP</li>
</ul>
<h2 id="监视文件变动"><a href="#监视文件变动" class="headerlink" title="监视文件变动"></a>监视文件变动</h2><ul>
<li><code>hexo generate</code> #使用 Hexo 生成静态文件快速而且简单</li>
<li><code>hexo generate --watch</code> #监视文件变动</li>
</ul>
<h2 id="完成后部署"><a href="#完成后部署" class="headerlink" title="完成后部署"></a>完成后部署</h2><blockquote>
<p>以下两条命令作用相同：<br> <code>hexo generate --deploy</code><br>   <code>hexo deploy --generate</code></p>
<p>常用复合命令：<br> <code>hexo deploy -g</code><br> <code>hexo server -g</code></p>
</blockquote>
<h2 id="存为草稿"><a href="#存为草稿" class="headerlink" title="存为草稿"></a>存为草稿</h2><ul>
<li><code>hexo publish [layout] &lt;title&gt;</code></li>
</ul>
<h2 id="文章模板"><a href="#文章模板" class="headerlink" title="文章模板"></a>文章模板</h2><ul>
<li><code>hexo n &quot;postName&quot;</code> #新建文章</li>
<li><code>hexo n page &quot;pageName&quot;</code> #新建页面</li>
<li><code>hexo g</code> #生成静态页面至public目录</li>
<li><code>hexo s</code> #开启预览访问端口（默认端口4000，’ctrl + c’关闭server）</li>
<li><p><code>hexo d</code> #将.deploy目录部署到GitHub</p>
</li>
<li><p><code>hexo new [layout] &lt;title&gt;</code> #新建布局名为layout的文章</p>
</li>
<li><code>hexo new photo &quot;My Gallery&quot;</code></li>
<li><code>hexo new &quot;Hello World&quot; --lang tw</code> #设置文章显示语言</li>
</ul>
<h2 id="设置文章摘要"><a href="#设置文章摘要" class="headerlink" title="设置文章摘要"></a>设置文章摘要</h2><blockquote>
<p>以上是文章摘要<br><code>&lt;!--more--&gt;</code><br>以下是余下全文</p>
</blockquote>
<hr>
<blockquote>
<p>参考原文<a href="http://segmentfault.com/a/1190000002632530?utm_source=tuicool&amp;utm_medium=referral" target="_blank" rel="external">http://segmentfault.com/a/1190000002632530</a></p>
</blockquote>
<hr>
]]></content>
      
        <categories>
            
            <category> 技巧分享 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Hexo </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[数组/字符串/数学函数]]></title>
      <url>http://licao404.com/2016/03/19/JavaScript%E6%95%B0%E7%BB%84-%E5%AD%97%E7%AC%A6%E4%B8%B2-%E6%95%B0%E5%AD%A6%E5%87%BD%E6%95%B0/</url>
      <content type="html"><![CDATA[<blockquote>
<h3 id="【知识点】"><a href="#【知识点】" class="headerlink" title="【知识点】"></a>【知识点】</h3></blockquote>
<h4 id="1-数组方法里push、pop、shift、unshift、join、split分别是什么作用？"><a href="#1-数组方法里push、pop、shift、unshift、join、split分别是什么作用？" class="headerlink" title="1. 数组方法里push、pop、shift、unshift、join、split分别是什么作用？"></a><strong>1. 数组方法里<code>push</code>、<code>pop</code>、<code>shift</code>、<code>unshift</code>、<code>join</code>、<code>split</code>分别是什么作用？</strong></h4><a id="more"></a>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//结合push()和pop()方法让JavaScript数组实现了类似栈的操作，后进先出：</span></div><div class="line"><span class="comment">//push():用于向数组的队尾压入任意数量的参数，返回压入后的数组长度</span></div><div class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>];</div><div class="line"><span class="built_in">console</span>.log(arr.push(<span class="number">5</span>,<span class="string">'abc'</span>),arr);</div><div class="line"><span class="comment">//输出结果应为 6 [1, 2, 3, 4, 5, "abc"]</span></div><div class="line"></div><div class="line"><span class="comment">//pop():用于弹出数组的最后一项，返回该项，数组长度减一</span></div><div class="line"><span class="built_in">console</span>.log(arr.pop()); <span class="comment">//应该返回abc,数组此时为[1,2,3,4,5]</span></div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">//shift():压出数组的第一项，返回该项，数组长度减一</span></div><div class="line"><span class="built_in">console</span>.log(arr.shift()); <span class="comment">//应该返回1，数组此时为[2,3,4,5]</span></div><div class="line"><span class="comment">//结合push()和shift()方法可以实现类似数据结构中的队列操作，后进后出</span></div><div class="line"></div><div class="line"><span class="comment">//unshift():用于向数组的队首压入任意数量的参数，返回压入后的数组长度</span></div><div class="line"><span class="built_in">console</span>.log(arr.unshift(<span class="string">'abc'</span>,<span class="number">1</span>)，arr); <span class="comment">//输出结果为 6 ["abc", 1, 2, 3, 4, 5]</span></div><div class="line"><span class="comment">//同理，unshift()结合pop()可以实现队列操作，只是反方向而已</span></div><div class="line"></div><div class="line"><span class="comment">//join(separator):用于把数组中的所有元素连接成一个字符串。separator是连接的符号，可选，默认是逗号</span></div><div class="line">arr.join() <span class="comment">//结果是"abc,1,2,3,4,5</span></div><div class="line">arr.join(<span class="string">''</span>)<span class="comment">//结果是"abc12345"</span></div><div class="line"></div><div class="line"><span class="comment">//split(separator,howmany):用于把一个字符串分割成字符串数组,separator取值为字符串或正则表达式，</span></div><div class="line"><span class="comment">//从这个字符串的地方分割，返回被分割了的字符串组成数组（不包括separator本身）。howmany可选，可指定</span></div><div class="line"><span class="comment">//返回的数组的最大长度。如果设置了该参数，返回的子串不会多于这个参数指定的数组。如果没有设置该参数，整</span></div><div class="line"><span class="comment">//个字符串都会被分割，不考虑它的长度。</span></div></pre></td></tr></table></figure>
<hr>
<blockquote>
<h3 id="【练习】"><a href="#【练习】" class="headerlink" title="【练习】"></a>【练习】</h3><h4 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h4></blockquote>
<h4 id="1-用-splice-实现-push、pop、shift、unshift方法？"><a href="#1-用-splice-实现-push、pop、shift、unshift方法？" class="headerlink" title="1.用 splice 实现 push、pop、shift、unshift方法？"></a><strong>1.用 <code>splice</code> 实现 <code>push</code>、<code>pop</code>、<code>shift</code>、<code>unshift</code>方法？</strong></h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> arr = [<span class="number">2</span>,<span class="number">3</span>,<span class="number">3</span>,<span class="number">4</span>];</div><div class="line"><span class="built_in">console</span>.log(<span class="string">'arr[]='</span>,arr);</div><div class="line"><span class="keyword">var</span> arrpop = arr.splice(arr.length<span class="number">-1</span>,<span class="number">1</span>);<span class="comment">//splice(arr.length-1,1)实现pop()</span></div><div class="line"><span class="built_in">console</span>.log(<span class="string">'arrpop后arr[]='</span>, arr);</div><div class="line"><span class="built_in">console</span>.log(<span class="string">'arrpop返回：'</span>,arrpop);<span class="comment">//splice()</span></div><div class="line"></div><div class="line">arr.push(<span class="number">4</span>);</div><div class="line"><span class="keyword">var</span> arrpush = arr.splice(arr.length,<span class="number">0</span>,<span class="number">5</span>);<span class="comment">//splice(arr.length,0,xx)实现push()</span></div><div class="line"><span class="built_in">console</span>.log(<span class="string">'arrpush后arr[]='</span>, arr)</div><div class="line"></div><div class="line">arr.pop();</div><div class="line"><span class="keyword">var</span> arrshift = arr.splice(<span class="number">0</span>,<span class="number">1</span>);<span class="comment">//实现shift()</span></div><div class="line"><span class="built_in">console</span>.log(<span class="string">'arrshift后arr[]='</span>, arr);</div><div class="line"><span class="built_in">console</span>.log(<span class="string">'arrshift返回：'</span>,arrshift)</div><div class="line"></div><div class="line">arr.unshift(<span class="number">2</span>);</div><div class="line"><span class="keyword">var</span> arrunshift = arr.splice(<span class="number">0</span>,<span class="number">0</span>,<span class="number">5</span>);<span class="comment">//实现unshift()</span></div><div class="line"><span class="built_in">console</span>.log(<span class="string">'arrunshift后arr[]='</span>, arr);</div></pre></td></tr></table></figure>
<h4 id="2-使用数组拼接出如下字符串："><a href="#2-使用数组拼接出如下字符串：" class="headerlink" title="2.使用数组拼接出如下字符串："></a><strong>2.使用数组拼接出如下字符串：</strong></h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">getTplStr</span>(<span class="params">data</span>)</span>&#123;</div><div class="line">	<span class="keyword">var</span> htmls = [];</div><div class="line">	htmls.push(<span class="string">'&lt;dl class="product"&gt;'</span>);</div><div class="line">	htmls.push(<span class="string">'	&lt;dt&gt;'</span>+prod.name+<span class="string">'&lt;/dt&gt;'</span>);</div><div class="line">	<span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; prod.styles.length; i++) &#123;</div><div class="line">		htmls.push(<span class="string">'	&lt;dd&gt;'</span>+prod.styles[i]+<span class="string">'&lt;/dd&gt;'</span>);</div><div class="line">	&#125;</div><div class="line">	htmls.push(<span class="string">'&lt;/dl&gt;'</span>)</div><div class="line">	<span class="keyword">return</span> htmls.join(<span class="string">''</span>);</div><div class="line">&#125;;</div><div class="line"><span class="keyword">var</span> result = getTplStr(prod);</div></pre></td></tr></table></figure>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">dl</span> <span class="attr">class</span>=<span class="string">"product"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">dt</span>&gt;</span>女装<span class="tag">&lt;/<span class="name">dt</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">dd</span>&gt;</span>短款<span class="tag">&lt;/<span class="name">dd</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">dd</span>&gt;</span>冬季<span class="tag">&lt;/<span class="name">dd</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">dd</span>&gt;</span>春装<span class="tag">&lt;/<span class="name">dd</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dl</span>&gt;</span></div></pre></td></tr></table></figure>
<h4 id="3-写一个find函数，实现下面的功能"><a href="#3-写一个find函数，实现下面的功能" class="headerlink" title="3.写一个find函数，实现下面的功能:"></a><strong>3.写一个<code>find</code>函数，实现下面的功能:</strong></h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> arr = [ <span class="string">"test"</span>, <span class="number">2</span>, <span class="number">1.5</span>, <span class="literal">false</span> ]</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">find</span>(<span class="params">arr,x</span>)</span>&#123;</div><div class="line">			<span class="built_in">console</span>.log(arr.indexOf(x));<span class="comment">//使用indexOf()方法返回给定元素能找在数组中找到的第一个索引值，否则返回-1。</span></div><div class="line">		&#125;</div><div class="line">find(arr, <span class="string">"test"</span>) <span class="comment">// 0</span></div><div class="line">find(arr, <span class="number">2</span>) <span class="comment">// 1</span></div><div class="line">find(arr, <span class="number">0</span>) <span class="comment">// -1</span></div></pre></td></tr></table></figure>
<h4 id="4-写一个函数filterNumeric，实现如下功能"><a href="#4-写一个函数filterNumeric，实现如下功能" class="headerlink" title="4.写一个函数filterNumeric，实现如下功能"></a><strong>4.写一个函数<code>filterNumeric</code>，实现如下功能</strong></h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">arr = [<span class="string">"a"</span>, <span class="number">1</span>, <span class="string">"b"</span>, <span class="number">2</span>];</div><div class="line">arr = filterNumeric(arr);  <span class="comment">//   [1,2]</span></div><div class="line"></div><div class="line"><span class="comment">//****************函数如下**********************</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">filterNumeric</span>(<span class="params">arr</span>)</span>&#123;</div><div class="line">		<span class="function"><span class="keyword">function</span> <span class="title">filterNumeric</span>(<span class="params">arr</span>)</span>&#123;</div><div class="line">		<span class="built_in">console</span>.log(arr.filter(<span class="function"><span class="keyword">function</span>(<span class="params">x</span>)</span>&#123;<span class="keyword">return</span> <span class="keyword">typeof</span> x === <span class="string">"number"</span>&#125;));</div><div class="line">		&#125;</div></pre></td></tr></table></figure>
<h4 id="5-对象obj有个className属性，里面的值为的是空格分割的字符串-和html元素的class特性类似-，写addClass、removeClass函数，有如下功能："><a href="#5-对象obj有个className属性，里面的值为的是空格分割的字符串-和html元素的class特性类似-，写addClass、removeClass函数，有如下功能：" class="headerlink" title="5.对象obj有个className属性，里面的值为的是空格分割的字符串(和html元素的class特性类似)，写addClass、removeClass函数，有如下功能："></a><strong>5.对象obj有个className属性，里面的值为的是空格分割的字符串(和html元素的class特性类似)，写<code>addClass</code>、<code>removeClass</code>函数，有如下功能：</strong></h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> obj = &#123;</div><div class="line">  <span class="attr">className</span>: <span class="string">'open menu'</span></div><div class="line">&#125;</div><div class="line">addClass(obj, <span class="string">'new'</span>) <span class="comment">// obj.className='open menu new'</span></div><div class="line">addClass(obj, <span class="string">'open'</span>)  <span class="comment">// 因为open已经存在，此操作无任何办法</span></div><div class="line">addClass(obj, <span class="string">'me'</span>) <span class="comment">// obj.className='open menu new me'</span></div><div class="line"><span class="built_in">console</span>.log(obj.className)  <span class="comment">// "open menu new me"</span></div><div class="line"></div><div class="line">removeClass(obj, <span class="string">'open'</span>) <span class="comment">// obj.className='menu new me'</span></div><div class="line">removeClass(obj, <span class="string">'blabla'</span>)  <span class="comment">// 不变</span></div><div class="line"></div><div class="line"><span class="comment">//****************addClass函数如下************************</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">addClass</span>(<span class="params">obj,str</span>)</span>&#123;</div><div class="line">	<span class="keyword">var</span> arr = obj.className.split(<span class="string">' '</span>);</div><div class="line">	<span class="keyword">if</span> (arr.indexOf(str) == <span class="number">-1</span>) &#123;</div><div class="line">		arr.push(str);</div><div class="line">	&#125;</div><div class="line">	obj.className = arr.join(<span class="string">' '</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//****************removeClass函数如下**********************</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">removeClass</span>(<span class="params">obj,str</span>)</span>&#123;</div><div class="line">	<span class="keyword">var</span> arr = obj.className.split(<span class="string">' '</span>);</div><div class="line">	<span class="keyword">if</span> (arr.indexOf(str) != <span class="number">-1</span>) &#123;</div><div class="line">		arr.splice(arr.indexOf(str),<span class="number">1</span>);</div><div class="line">	&#125;</div><div class="line">	obj.className = arr.join(<span class="string">' '</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="6-写一个camelize函数，把my-short-string形式的字符串转化成myShortString形式的字符串，如："><a href="#6-写一个camelize函数，把my-short-string形式的字符串转化成myShortString形式的字符串，如：" class="headerlink" title="6.写一个camelize函数，把my-short-string形式的字符串转化成myShortString形式的字符串，如："></a><strong>6.写一个<code>camelize</code>函数，把my-short-string形式的字符串转化成myShortString形式的字符串，如：</strong></h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">console</span>.log(camelize(<span class="string">"background-color"</span>));  <span class="comment">//== 'backgroundColor'</span></div><div class="line"><span class="built_in">console</span>.log(camelize(<span class="string">"list-style-image"</span>));  <span class="comment">//== 'listStyleImage'</span></div><div class="line"></div><div class="line"><span class="comment">//****************函数如下**********************</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">camelize</span>(<span class="params">str</span>)</span>&#123;</div><div class="line">	<span class="keyword">var</span> x = str.split(<span class="string">'-'</span>);</div><div class="line">	<span class="keyword">var</span> sum = x[<span class="number">0</span>];</div><div class="line">	<span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">1</span>;i&lt;x.length;i++)&#123;</div><div class="line">		sum += x[i].slice(<span class="number">0</span>,<span class="number">1</span>).toUpperCase()+x[i].slice(<span class="number">1</span>);</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">return</span> sum;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="7-下面代码的输出是-为什么"><a href="#7-下面代码的输出是-为什么" class="headerlink" title="7.下面代码的输出是? 为什么?"></a><strong>7.下面代码的输出是? 为什么?</strong></h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">arr = [<span class="string">"a"</span>, <span class="string">"b"</span>];</div><div class="line">arr.push( <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123; alert(<span class="keyword">this</span>) &#125; );<span class="comment">//push将一个匿名函数压从尾部入数组arr</span></div><div class="line"><span class="comment">//数组arr此时为["a","b",function anonymous()]</span></div><div class="line">arr[arr.length<span class="number">-1</span>]()<span class="comment">//将[arr.length-1]位置上的functio()变为立即执行函数，</span></div><div class="line"><span class="comment">//alert(this)输出当前数组，结果是a,b,function()&#123;alert(this)&#125;</span></div></pre></td></tr></table></figure>
<h4 id="8-写一个函数filterNumericInPlace，过滤数组中的数字，删除非数字"><a href="#8-写一个函数filterNumericInPlace，过滤数组中的数字，删除非数字" class="headerlink" title="8.写一个函数filterNumericInPlace，过滤数组中的数字，删除非数字"></a><strong>8.写一个函数<code>filterNumericInPlace</code>，过滤数组中的数字，删除非数字</strong></h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">arr = [<span class="string">"a"</span>, <span class="number">1</span>, <span class="string">"b"</span>, <span class="number">2</span>];</div><div class="line">filterNumericInPlace(arr);</div><div class="line"><span class="built_in">console</span>.log(arr)  <span class="comment">// [1,2]</span></div><div class="line"></div><div class="line"><span class="comment">//****************函数如下**********************</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">filterNumericInPlace</span>(<span class="params">arr</span>)</span>&#123;</div><div class="line">	<span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; arr.length; i++) &#123;</div><div class="line">		<span class="keyword">if</span> (<span class="keyword">typeof</span>(arr[i] != <span class="string">"number"</span>)) &#123;</div><div class="line">			arr.splice(i, <span class="number">1</span>);</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="9-写一个ageSort函数实现如下功能："><a href="#9-写一个ageSort函数实现如下功能：" class="headerlink" title="9.写一个ageSort函数实现如下功能："></a><strong>9.写一个<code>ageSort</code>函数实现如下功能：</strong></h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> john = &#123; <span class="attr">name</span>: <span class="string">"John Smith"</span>, <span class="attr">age</span>: <span class="number">23</span> &#125;</div><div class="line"><span class="keyword">var</span> mary = &#123; <span class="attr">name</span>: <span class="string">"Mary Key"</span>, <span class="attr">age</span>: <span class="number">18</span> &#125;</div><div class="line"><span class="keyword">var</span> bob = &#123; <span class="attr">name</span>: <span class="string">"Bob-small"</span>, <span class="attr">age</span>: <span class="number">6</span> &#125;</div><div class="line"><span class="keyword">var</span> people = [ john, mary, bob ]</div><div class="line">ageSort(people) <span class="comment">// [ bob, mary, john ]</span></div><div class="line"></div><div class="line"><span class="comment">//****************函数如下**********************</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">ageSort</span> (<span class="params">arr</span>) </span>&#123;</div><div class="line">	<span class="keyword">return</span> arr.sort(<span class="function"><span class="keyword">function</span>(<span class="params">a,b</span>)</span>&#123;</div><div class="line">		<span class="keyword">return</span> b - a;</div><div class="line">	&#125;)</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="10-写一个filter-arr-func-函数用于过滤数组，接受两个参数，第一个是要处理的数组，第二个参数是回调函数-回调函数遍历接受每一个数组元素，当函数返回true时保留该元素，否则删除该元素-。实现如下功能："><a href="#10-写一个filter-arr-func-函数用于过滤数组，接受两个参数，第一个是要处理的数组，第二个参数是回调函数-回调函数遍历接受每一个数组元素，当函数返回true时保留该元素，否则删除该元素-。实现如下功能：" class="headerlink" title="10.写一个filter(arr, func) 函数用于过滤数组，接受两个参数，第一个是要处理的数组，第二个参数是回调函数(回调函数遍历接受每一个数组元素，当函数返回true时保留该元素，否则删除该元素)。实现如下功能："></a><strong>10.写一个<code>filter(arr, func)</code> 函数用于过滤数组，接受两个参数，第一个是要处理的数组，第二个参数是回调函数(回调函数遍历接受每一个数组元素，当函数返回true时保留该元素，否则删除该元素)。实现如下功能：</strong></h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">isNumeric</span> (<span class="params">el</span>)</span>&#123;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">typeof</span> el === <span class="string">'number'</span>;</div><div class="line">&#125;</div><div class="line">arr = [<span class="string">"a"</span>, <span class="number">-1</span>, <span class="number">2</span>, <span class="string">"b"</span>]</div><div class="line"></div><div class="line">arr = filter(arr, isNumeric) ; <span class="comment">// arr = [-1, 2],  过滤出数字</span></div><div class="line">arr = filter(arr, <span class="function"><span class="keyword">function</span>(<span class="params">val</span>) </span>&#123; <span class="keyword">return</span> val &gt; <span class="number">0</span> &#125;);  <span class="comment">// arr = [2] 过滤出大于0的整数</span></div><div class="line"></div><div class="line"><span class="comment">//****************函数如下**********************</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">filter</span>(<span class="params">arr,func</span>)</span>&#123;</div><div class="line">			<span class="keyword">return</span> arr.filter(func);</div><div class="line">		&#125;</div></pre></td></tr></table></figure>
<blockquote>
<h4 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h4></blockquote>
<h4 id="1-写一个ucFirst函数，返回第一个字母为大写的字符"><a href="#1-写一个ucFirst函数，返回第一个字母为大写的字符" class="headerlink" title="1.写一个ucFirst函数，返回第一个字母为大写的字符"></a><strong>1.写一个<code>ucFirst</code>函数，返回第一个字母为大写的字符</strong></h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//ucFirst("gardon") == "Gardon"</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">ucFirst</span> (<span class="params">str</span>) </span>&#123;</div><div class="line">	 <span class="keyword">return</span> str.slice(<span class="number">0</span>,<span class="number">1</span>).toUpperCase() + str.slice(<span class="number">1</span>);</div><div class="line">&#125;</div><div class="line"><span class="built_in">console</span>.log(ucFirst(<span class="string">"gardon"</span>));</div></pre></td></tr></table></figure>
<h4 id="2-写一个函数truncate-str-maxlength-如果str的长度大于maxlength，会把str截断到maxlength长，并加上…，如："><a href="#2-写一个函数truncate-str-maxlength-如果str的长度大于maxlength，会把str截断到maxlength长，并加上…，如：" class="headerlink" title="2.写一个函数truncate(str, maxlength), 如果str的长度大于maxlength，会把str截断到maxlength长，并加上…，如："></a><strong>2.写一个函数<code>truncate(str, maxlength)</code>, 如果str的长度大于maxlength，会把str截断到maxlength长，并加上…，如：</strong></h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// truncate("hello, this is gardon valley,", 10) == "hello, thi...";</span></div><div class="line"><span class="comment">// truncate("hello world", 20) == "hello world"</span></div><div class="line"></div><div class="line"><span class="comment">//****************函数如下**********************</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">truncate</span> (<span class="params">str,maxlength</span>) </span>&#123;</div><div class="line">	 <span class="keyword">if</span>(str.length &gt; maxlength)&#123;</div><div class="line">		<span class="keyword">return</span>(str.slice(<span class="number">0</span>,maxlength) + <span class="string">"..."</span>);</div><div class="line">	 &#125;</div><div class="line">	 <span class="keyword">return</span> str;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="built_in">console</span>.log(truncate(<span class="string">"hello, this is gardon valley,"</span>, <span class="number">10</span>));</div><div class="line"><span class="built_in">console</span>.log(truncate(<span class="string">"hello world"</span>, <span class="number">20</span>));</div></pre></td></tr></table></figure>
<blockquote>
<h4 id="数学函数"><a href="#数学函数" class="headerlink" title="数学函数"></a>数学函数</h4></blockquote>
<h4 id="1-写一个函数limit2，保留数字小数点后两位，四舍五入，-如"><a href="#1-写一个函数limit2，保留数字小数点后两位，四舍五入，-如" class="headerlink" title="1.写一个函数limit2，保留数字小数点后两位，四舍五入， 如:"></a><strong>1.写一个函数<code>limit2</code>，保留数字小数点后两位，四舍五入， 如:</strong></h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// var num1 = 3.456</span></div><div class="line"><span class="comment">// limit2( num1 );  //3.46</span></div><div class="line"><span class="comment">// limit2( 2.42 );    //2.42</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">limit2</span> (<span class="params">num</span>) </span>&#123;</div><div class="line">	 <span class="keyword">return</span> (<span class="built_in">Math</span>.round(num*<span class="number">100</span>))/<span class="number">100</span>;</div><div class="line">&#125;</div><div class="line"><span class="keyword">var</span> num1 = <span class="number">3.456</span></div><div class="line"><span class="built_in">console</span>.log(limit2(num1));  <span class="comment">//3.46</span></div><div class="line"><span class="built_in">console</span>.log(limit2(<span class="number">2.42</span>));    <span class="comment">//2.42</span></div></pre></td></tr></table></figure>
<h4 id="2-写一个函数，获取从min到max之间的随机数，包括min不包括max"><a href="#2-写一个函数，获取从min到max之间的随机数，包括min不包括max" class="headerlink" title="2.写一个函数，获取从min到max之间的随机数，包括min不包括max"></a><strong>2.写一个函数，获取从min到max之间的随机数，包括min不包括max</strong></h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">myRandom</span> (<span class="params">min,max</span>) </span>&#123;</div><div class="line">	 <span class="keyword">return</span> <span class="built_in">Math</span>.floor(<span class="built_in">Math</span>.random()*(max-min)+min);</div><div class="line">&#125;</div><div class="line"><span class="built_in">console</span>.log(myRandom(<span class="number">2</span>,<span class="number">8</span>));</div></pre></td></tr></table></figure>
<h4 id="3-写一个函数，获取从min都max之间的随机整数，包括min包括max"><a href="#3-写一个函数，获取从min都max之间的随机整数，包括min包括max" class="headerlink" title="3.写一个函数，获取从min都max之间的随机整数，包括min包括max"></a><strong>3.写一个函数，获取从min都max之间的随机整数，包括min包括max</strong></h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">myRandom</span> (<span class="params">min,max</span>) </span>&#123;</div><div class="line">	 <span class="keyword">return</span> <span class="built_in">Math</span>.floor(<span class="built_in">Math</span>.random()*(max-min+<span class="number">1</span>)+min);</div><div class="line">&#125;</div><div class="line"><span class="built_in">console</span>.log(myRandom(<span class="number">2</span>,<span class="number">8</span>));</div></pre></td></tr></table></figure>
<h4 id="4-写一个函数，获取一个随机数组，数组中元素为长度为len，最小值为min，最大值为max-包括-的随机数"><a href="#4-写一个函数，获取一个随机数组，数组中元素为长度为len，最小值为min，最大值为max-包括-的随机数" class="headerlink" title="4.写一个函数，获取一个随机数组，数组中元素为长度为len，最小值为min，最大值为max(包括)的随机数"></a><strong>4.写一个函数，获取一个随机数组，数组中元素为长度为len，最小值为min，最大值为max(包括)的随机数</strong></h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">numArray</span> (<span class="params">len,min,max</span>) </span>&#123;</div><div class="line">	 <span class="keyword">var</span> arr = [];</div><div class="line">	 <span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>;i&lt;len;i++)&#123;</div><div class="line">		arr.push(<span class="built_in">Math</span>.floor(<span class="built_in">Math</span>.random()*(max-min+<span class="number">1</span>)+min))</div><div class="line">	 &#125;</div><div class="line">	 <span class="keyword">return</span> arr;</div><div class="line">&#125;</div><div class="line"><span class="keyword">var</span> arr1 = numArray(<span class="number">10</span>,<span class="number">11</span>,<span class="number">100</span>);</div><div class="line"></div><div class="line"><span class="built_in">console</span>.log(arr1);</div><div class="line"><span class="built_in">console</span>.log(numArray(<span class="number">6</span>,<span class="number">2</span>,<span class="number">3</span>));</div></pre></td></tr></table></figure>
<hr>
]]></content>
      
        <categories>
            
            <category> 编程学习 </category>
            
            <category> 前端基础 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> JavaScript </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[自实现C语言字符串相关函数]]></title>
      <url>http://licao404.com/2016/03/18/%E8%87%AA%E5%AE%9E%E7%8E%B0C%E8%AF%AD%E8%A8%80%E5%AD%97%E7%AC%A6%E4%B8%B2%E7%9B%B8%E5%85%B3%E5%87%BD%E6%95%B0/</url>
      <content type="html"><![CDATA[<h3 id="1-编写函数实现strlen-："><a href="#1-编写函数实现strlen-：" class="headerlink" title="1. 编写函数实现strlen()："></a>1. 编写函数实现<code>strlen()</code>：</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">strlen</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span> <span class="built_in">string</span>[])</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">int</span> i=<span class="number">0</span>;</div><div class="line">    <span class="keyword">while</span>(<span class="built_in">string</span>[i])</div><div class="line">        i++;</div><div class="line">    <span class="keyword">return</span> i;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line">&#123;   </div><div class="line">	<span class="keyword">char</span> str[<span class="number">100</span>];</div><div class="line"></div><div class="line">	<span class="built_in">printf</span>(<span class="string">"亲输入字符串："</span>);</div><div class="line">    <span class="built_in">scanf</span>(<span class="string">"%s"</span>,str);</div><div class="line"></div><div class="line">    <span class="built_in">printf</span>(<span class="string">"字符串长度：%d\n"</span>,<span class="built_in">strlen</span>(str));</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<a id="more"></a>
<p><img src="http://7xrvo9.com1.z0.glb.clouddn.com/0318c%2Fresult-strlen.png" alt="strlen"></p>
<h3 id="2-编写函数实现strcmp-："><a href="#2-编写函数实现strcmp-：" class="headerlink" title="2. 编写函数实现strcmp()："></a>2. 编写函数实现<code>strcmp()</code>：</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> N 30</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">strcmp</span><span class="params">(<span class="keyword">char</span> *p1, <span class="keyword">char</span> *p2)</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">int</span> result = <span class="number">0</span>;</div><div class="line">    <span class="keyword">while</span> (*p1 &amp;&amp; *p2)&#123;</div><div class="line">          <span class="keyword">if</span> (*p1 == *p2)&#123;</div><div class="line">             p1++;</div><div class="line">             p2++;</div><div class="line">             <span class="keyword">continue</span>;</div><div class="line">          			&#125;</div><div class="line">          <span class="keyword">else</span>&#123;</div><div class="line">              result = *p1 - *p2;</div><div class="line">              <span class="keyword">break</span>;</div><div class="line">          			&#125;</div><div class="line">    		&#125;</div><div class="line">    <span class="keyword">return</span> result;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc,<span class="keyword">char</span> *argv[])</span></span></div><div class="line">&#123;</div><div class="line"></div><div class="line">    <span class="keyword">char</span> ch1[N],ch2[N];</div><div class="line">    <span class="keyword">char</span> *p_ch1,*p_ch2;</div><div class="line">    <span class="keyword">int</span> result;</div><div class="line">    p_ch1 = ch1;</div><div class="line">    p_ch2 = ch2;</div><div class="line"></div><div class="line">    <span class="built_in">printf</span>(<span class="string">"亲输入字符串1:\n"</span>);</div><div class="line">    gets(ch1);</div><div class="line"></div><div class="line">    <span class="built_in">printf</span>(<span class="string">"亲输入字符串2:\n"</span>);</div><div class="line">    gets(ch2);</div><div class="line"></div><div class="line">    result = <span class="built_in">strcmp</span>(p_ch1,p_ch2);</div><div class="line"></div><div class="line">    <span class="built_in">printf</span>(<span class="string">"strcmp('%s','%s') = %d\n"</span>,ch1,ch2,result);</div><div class="line"></div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><img src="http://7xrvo9.com1.z0.glb.clouddn.com/0318c%2Fresult-strcmp.png" alt="strcmp"></p>
<h3 id="3-编写函数实现strcpy-："><a href="#3-编写函数实现strcpy-：" class="headerlink" title="3. 编写函数实现strcpy()："></a>3. 编写函数实现<code>strcpy()</code>：</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">strcopy</span><span class="params">(<span class="keyword">char</span> *p,<span class="keyword">char</span> *q)</span></span></div><div class="line">&#123;</div><div class="line">	<span class="keyword">int</span> i;</div><div class="line">	<span class="keyword">for</span>(i=<span class="number">0</span>;p[i]&amp;&amp;q[i];i++)</div><div class="line">	p[i]=q[i];</div><div class="line">	p[i]=<span class="string">'\0'</span>;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line">	<span class="keyword">char</span> a[<span class="number">10</span>],b[<span class="number">10</span>];</div><div class="line"></div><div class="line">	<span class="built_in">printf</span>(<span class="string">"请输入源字符串:"</span>);</div><div class="line">	<span class="built_in">scanf</span>(<span class="string">"%s"</span>,a);</div><div class="line"></div><div class="line">	strcopy(b,a);<span class="comment">//b是目的字符串，a复制给b</span></div><div class="line"></div><div class="line">	<span class="built_in">printf</span>(<span class="string">"您输入的字符串：%s\n"</span>,a);</div><div class="line">	<span class="built_in">printf</span>(<span class="string">"复制给另一个字串结果：b=%s\n"</span>,b);</div><div class="line">	<span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><img src="http://7xrvo9.com1.z0.glb.clouddn.com/0318c%2Fresult-strcpy.png" alt="strcpy"></p>
<h3 id="4-编写函数实现strcat-："><a href="#4-编写函数实现strcat-：" class="headerlink" title="4. 编写函数实现strcat()："></a>4. 编写函数实现<code>strcat()</code>：</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> N 100</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">char</span>* <span class="title">strcat</span><span class="params">(<span class="keyword">char</span> s1[],<span class="keyword">char</span> s2[])</span></span></div><div class="line">&#123;</div><div class="line">	<span class="keyword">int</span> i,j;</div><div class="line">	<span class="keyword">for</span>(i=<span class="number">0</span>;s1[i]!=<span class="number">0</span>;i++)</div><div class="line">	;</div><div class="line">	<span class="keyword">for</span>(j=<span class="number">0</span>;s2[j]!=<span class="number">0</span>;i++,j++)</div><div class="line">	s1[i]=s2[j];</div><div class="line"></div><div class="line">	s1[i]=<span class="number">0</span>;</div><div class="line">	<span class="keyword">return</span> s1;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line">	<span class="keyword">char</span> s1[N],s2[N],*s;</div><div class="line"></div><div class="line">	<span class="built_in">printf</span>(<span class="string">"亲输入字符串1："</span>);</div><div class="line">	<span class="built_in">scanf</span>(<span class="string">"%s"</span>,s1);</div><div class="line">	<span class="built_in">printf</span>(<span class="string">"亲输入字符串2："</span>);</div><div class="line">	<span class="built_in">scanf</span>(<span class="string">"%s"</span>,s2);</div><div class="line"></div><div class="line">	s=<span class="built_in">strcat</span>(s1,s2);</div><div class="line">	<span class="built_in">printf</span>(<span class="string">"连接后的字符串：%s\n"</span>,s);</div><div class="line"></div><div class="line">	<span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><img src="http://7xrvo9.com1.z0.glb.clouddn.com/0318c%2Fresult-strcat.png" alt="strcat"></p>
<hr>
]]></content>
      
        <categories>
            
            <category> 编程学习 </category>
            
            <category> 计算机基础 </category>
            
            <category> Linux_C </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Linux_C </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[理解JavaScript函数]]></title>
      <url>http://licao404.com/2016/03/16/%E7%90%86%E8%A7%A3JavaScript%E5%87%BD%E6%95%B0/</url>
      <content type="html"><![CDATA[<blockquote>
<h3 id="【知识点】"><a href="#【知识点】" class="headerlink" title="【知识点】"></a>【知识点】</h3></blockquote>
<h4 id="1-函数声明和函数表达式有什么区别？"><a href="#1-函数声明和函数表达式有什么区别？" class="headerlink" title="1. 函数声明和函数表达式有什么区别？"></a><strong>1. 函数声明和函数表达式有什么区别？</strong></h4><a id="more"></a>
<blockquote>
<p>先自我回忆一下编程语言中函数的广泛<code>概念</code>：函数是指可以将一系列语句组成一个整体（<code>打包</code>在一个代码段中），以执行某一特定任务。如果在不同的地方有些任务要重复执行，则可以<code>重用函数</code>。</p>
</blockquote>
<ul>
<li><code>函数声明</code>：为了让函数能够被其他位置的代码调用，必须给他指定一个名称，也就是命名函数；函数的定义是提前的，也就意味着函数可以在被声明之前的位置被调用。例如声明一个名为<code>area()</code>的函数：</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> size = area(<span class="number">10</span>,<span class="number">15</span>);</div><div class="line"><span class="built_in">console</span>.log(size);<span class="comment">//输出150，调用成功</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">area</span>(<span class="params">w,h</span>)</span>&#123;</div><div class="line">	<span class="keyword">return</span> w*h;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li><code>函数表达式</code>： 如果将函数放在表达式的位置，那他就看作为表达式。函数表达式中经常省略函数名，即匿名函数；在函数表达式之前是不能调用此函数的，上面的例子改为如下，情况就有所不同了：</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">console</span>.log(size);<span class="comment">//输出Undefined，未能调用</span></div><div class="line"></div><div class="line"><span class="keyword">var</span> size = <span class="function"><span class="keyword">function</span>(<span class="params">w,h</span>)</span>&#123;</div><div class="line">   	<span class="keyword">return</span> w*h;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<h4 id="2-什么是变量的声明前置？什么是函数的声明前置？"><a href="#2-什么是变量的声明前置？什么是函数的声明前置？" class="headerlink" title="2. 什么是变量的声明前置？什么是函数的声明前置？"></a><strong>2. 什么是变量的声明前置？什么是函数的声明前置？</strong></h4><ul>
<li><code>变量的声明前置</code>：<ul>
<li>JavaScript的变量声明具有hoisting机制，JavaScript引擎在执行的时候，会把所有变量的声明都提升到<code>当前作用域</code>的最前面，先于其他代码首先被执行。</li>
<li>使用var关键词声明变量的作用域是当前的执行上下文，有可能是外围函数，或者，当变量声明在函数体之外时，则为全局变量；未声明的变量总是全局的。</li>
</ul>
</li>
<li><code>函数的声明前置</code>：<ul>
<li>如上一问中的函数声明的例子，函数声明并不仅仅是函数名“被提前”了，整个函数的定义也“被提前”了，所以我们可以在任何位置调用函数；但是对于函数表达式就如同变量声明前置一样；同一个标示符，先后用<code>var</code>和<code>function</code>声明它,<code>var</code>的优先级高于<code>function</code>。</li>
</ul>
</li>
</ul>
<h4 id="3-arguments-是什么？"><a href="#3-arguments-是什么？" class="headerlink" title="3. arguments 是什么？"></a><strong>3. arguments 是什么？</strong></h4><blockquote>
<p><code>arguments</code>是函数的<code>类数组对象</code>，是当前函数的一个内置属性:</p>
</blockquote>
<ul>
<li><code>ECMAScript</code>函数的参数在内部是用一个数组来表示的，在函数体内可以通过<code>arguments</code>对象来访问这个数组,从而获得传入函数的每一个参数。例如<code>arguments[0]</code>是传入的第一个参数；</li>
<li><code>arguments</code>对象的长度是由实参个数而不是形参个数决定的,就是说使用<code>length</code>属性来确定传入的参数的个数。</li>
</ul>
<h4 id="4-函数的重载怎样实现？"><a href="#4-函数的重载怎样实现？" class="headerlink" title="4. 函数的重载怎样实现？"></a><strong>4. 函数的重载怎样实现？</strong></h4><blockquote>
<p>函数重载其他面向对象语言实现多态的手段之一，我们可以为一个函数编写两个定义，前提是只要这两个函数签名不同（参数、类型或顺序不同），就可以实现函数重载。然而<code>JavaScript</code>函数从语言角度来说是没有重载的，这一点从前面的函数声明和调用特性可以看出。</p>
</blockquote>
<ul>
<li><p>难道说JavaScript注定和重载无缘了？莫急…JavaScript可以通过自身的属性去模拟函数重载,法宝一：<code>if</code>+<code>arguments.length</code>:</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">calculate</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="keyword">if</span> (<span class="built_in">arguments</span>.length == <span class="number">2</span>) &#123;</div><div class="line">      <span class="keyword">return</span> <span class="built_in">arguments</span>[<span class="number">0</span>] + <span class="built_in">arguments</span>[<span class="number">1</span>];</div><div class="line">  &#125;</div><div class="line">  <span class="keyword">if</span> (<span class="built_in">arguments</span>.length == <span class="number">3</span>) &#123;</div><div class="line">      <span class="keyword">return</span> <span class="built_in">arguments</span>[<span class="number">0</span>] * <span class="built_in">arguments</span>[<span class="number">1</span>] * <span class="built_in">arguments</span>[<span class="number">2</span>];</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">alert(calculate(<span class="number">1</span>, <span class="number">3</span>))<span class="comment">//4</span></div></pre></td></tr></table></figure>
</li>
<li><p>更多法宝持续更新……</p>
</li>
</ul>
<h4 id="5-立即执行函数表达式是什么？有什么作用"><a href="#5-立即执行函数表达式是什么？有什么作用" class="headerlink" title="5. 立即执行函数表达式是什么？有什么作用?"></a><strong>5. 立即执行函数表达式是什么？有什么作用?</strong></h4><blockquote>
<p>两种常见立即执行函数的写法:</p>
</blockquote>
  <figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"> (<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line"><span class="comment">//函数体</span></div><div class="line"> &#125;)()</div><div class="line"></div><div class="line"> <span class="comment">//或者：</span></div><div class="line"> (<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line"><span class="comment">//函数体</span></div><div class="line"> &#125;())</div></pre></td></tr></table></figure>
<ul>
<li>作用：<ol>
<li>封装一段代码而不会引起而不会遗留任何全局变量，定义的变量都是立即执行函数的局部变量;</li>
<li>将独立的功能封装在自包含模块中(self-contained modules);</li>
<li>挡页面是稳定的并且在没有JavaScript情况下能正常工作，然后本着逐步加强的想法，需要一些代码加强页面某个方面，可以将这些代码封装进一个立即执行函数中，并且确保页面没有它的情况下也能正常工作;</li>
</ol>
</li>
</ul>
<h4 id="6-什么是函数的作用域链"><a href="#6-什么是函数的作用域链" class="headerlink" title="6. 什么是函数的作用域链?"></a><strong>6. 什么是函数的作用域链?</strong></h4><blockquote>
<p>作用域就是变量和函数的可访问<code>范围</code>，控制着变量和函数的可见性与<code>生命周期</code>，JavaScript并没有块及的作用域，只有函数作用域：变量在声明它们的函数体及其子函数内是可见的。</p>
</blockquote>
<ul>
<li>变量没有在函数内声明或者声明的时候没有带<code>var</code>就是全局变量，拥有全局作用域;</li>
<li>函数内部声明并且以<code>var</code>修饰的变量就是局部变量，只能在函数体内使用，函数的参数虽然没有使用var但仍然是局部变量。</li>
</ul>
<hr>
<blockquote>
<h3 id="【练习】"><a href="#【练习】" class="headerlink" title="【练习】"></a>【练习】</h3></blockquote>
<h4 id="1-以下代码输出什么？"><a href="#1-以下代码输出什么？" class="headerlink" title="1.以下代码输出什么？"></a><strong>1.以下代码输出什么？</strong></h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">getInfo</span>(<span class="params">name, age, sex</span>)</span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">'name:'</span>,name);</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">'age:'</span>, age);</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">'sex:'</span>, sex);</div><div class="line">    <span class="built_in">console</span>.log(<span class="built_in">arguments</span>);</div><div class="line">    <span class="built_in">arguments</span>[<span class="number">0</span>] = <span class="string">'valley'</span>;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">'name'</span>, name);</div><div class="line">&#125;</div><div class="line"></div><div class="line">getInfo(<span class="string">'gardon'</span>, <span class="number">20</span>, <span class="string">'男'</span>);<span class="comment">//name:gardon age:20 sex:男 ["gardon",20,"男"]</span></div><div class="line">getInfo(<span class="string">'gardon'</span>, <span class="number">20</span>);<span class="comment">//name:gardon age:20 sex:undefined ["gardon",20]</span></div><div class="line">getInfo(<span class="string">'男'</span>);<span class="comment">//name:男 age:undefined sex:undefined ["男"]</span></div></pre></td></tr></table></figure>
<h4 id="2-写一个函数，返回参数的平方和？如"><a href="#2-写一个函数，返回参数的平方和？如" class="headerlink" title="2.写一个函数，返回参数的平方和？如:"></a><strong>2.写一个函数，返回参数的平方和？如:</strong></h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">sumOfSquares</span>(<span class="params"></span>)</span>&#123;</div><div class="line">		<span class="keyword">var</span> sum = <span class="number">0</span>;</div><div class="line">		<span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>;i&lt;<span class="built_in">arguments</span>.length;i++)&#123;</div><div class="line">			sum += <span class="built_in">arguments</span>[i]*<span class="built_in">arguments</span>[i]</div><div class="line">		&#125;</div><div class="line">		<span class="built_in">console</span>.log(sum);</div><div class="line">&#125;</div><div class="line">sumOfSquares(<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>);   <span class="comment">// 29</span></div><div class="line">sumOfSquares(<span class="number">1</span>,<span class="number">3</span>);   <span class="comment">// 10</span></div></pre></td></tr></table></figure>
<h4 id="3-如下代码的输出？为什么"><a href="#3-如下代码的输出？为什么" class="headerlink" title="3..如下代码的输出？为什么?"></a><strong>3..如下代码的输出？为什么?</strong></h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">console</span>.log(a);<span class="comment">//输出undefined</span></div><div class="line"><span class="keyword">var</span> a = <span class="number">1</span>;</div><div class="line"><span class="built_in">console</span>.log(b);<span class="comment">//会报未有声明的错</span></div></pre></td></tr></table></figure>
<blockquote>
<p>根据变量声明提前，将以上函数改写为以下形式，声明了<code>a</code>并未赋值，<code>console.log(a)</code>为<code>defined</code>,<code>b</code>没有声明。</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> a;</div><div class="line"><span class="built_in">console</span>.log(a);</div><div class="line">a = <span class="number">1</span>;</div><div class="line"><span class="built_in">console</span>.log(b);</div></pre></td></tr></table></figure>
<h4 id="4-如下代码的输出？为什么"><a href="#4-如下代码的输出？为什么" class="headerlink" title="4.如下代码的输出？为什么?"></a><strong>4.如下代码的输出？为什么?</strong></h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">sayName(<span class="string">'world'</span>);</div><div class="line">sayAge(<span class="number">10</span>);</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">sayName</span>(<span class="params">name</span>)</span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">'hello '</span>, name);<span class="comment">//hello world</span></div><div class="line">&#125;</div><div class="line"><span class="keyword">var</span> sayAge = <span class="function"><span class="keyword">function</span>(<span class="params">age</span>)</span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(age);<span class="comment">//会报`sayAge`不是函数的错</span></div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<blockquote>
<p>根据变量声明前置，函数整体前置，函数表达式声明前置，将以上函数改写为以下形式: sayName(‘world’)成功调用函数;</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> sayAge;<span class="comment">//sayAge是一个变量</span></div><div class="line">   <span class="function"><span class="keyword">function</span> <span class="title">sayName</span>(<span class="params">name</span>)</span>&#123;</div><div class="line">       <span class="built_in">console</span>.log(<span class="string">'hello '</span>, name);<span class="comment">//hello world</span></div><div class="line">   &#125;</div><div class="line"></div><div class="line">   sayName(<span class="string">'world'</span>);</div><div class="line">   sayAge(<span class="number">10</span>);<span class="comment">//函数表达式在他下面，sayAge不能解析为函数</span></div><div class="line">   sayAge = <span class="function"><span class="keyword">function</span>(<span class="params">age</span>)</span>&#123;</div><div class="line">       <span class="built_in">console</span>.log(age);</div><div class="line">   &#125;;</div></pre></td></tr></table></figure>
<h4 id="5-如下代码的输出？为什么"><a href="#5-如下代码的输出？为什么" class="headerlink" title="5.如下代码的输出？为什么?"></a><strong>5.如下代码的输出？为什么?</strong></h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">    <span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params"></span>)</span>&#123;&#125;</div><div class="line">    <span class="keyword">var</span> fn = <span class="number">3</span>;</div><div class="line">    <span class="built_in">console</span>.log(fn);<span class="comment">//输出3</span></div><div class="line"></div><div class="line"><span class="comment">//*************输出结果及分析***************    </span></div><div class="line"><span class="comment">//可以改写为：</span></div><div class="line">	<span class="keyword">var</span> fn;<span class="comment">//变量声明提前，优先级高于函数，所以fn是一个变量</span></div><div class="line">	<span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params"></span>)</span>&#123;&#125;</div><div class="line">	fn = <span class="number">3</span>;<span class="comment">//将变量fn赋值为3</span></div><div class="line">	<span class="built_in">console</span>.log(fn);</div></pre></td></tr></table></figure>
<h4 id="6-下面代码的输出是-为什么"><a href="#6-下面代码的输出是-为什么" class="headerlink" title="6.下面代码的输出是? 为什么?"></a><strong>6.下面代码的输出是? 为什么?</strong></h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line">    <span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params">fn2</span>)</span>&#123;</div><div class="line">       <span class="built_in">console</span>.log(fn2);</div><div class="line">       <span class="keyword">var</span> fn2 = <span class="number">3</span>;</div><div class="line">       <span class="built_in">console</span>.log(fn2);</div><div class="line">       <span class="built_in">console</span>.log(fn);</div><div class="line">       <span class="function"><span class="keyword">function</span> <span class="title">fn2</span>(<span class="params"></span>)</span>&#123;</div><div class="line">            <span class="built_in">console</span>.log(<span class="string">'fnnn2'</span>);</div><div class="line">        &#125;</div><div class="line">     &#125;</div><div class="line">    fn(<span class="number">10</span>);</div><div class="line"></div><div class="line"><span class="comment">//*************输出结果及分析***************  </span></div><div class="line">    <span class="comment">//1.首先输出：</span></div><div class="line">    <span class="function"><span class="keyword">function</span> <span class="title">fn2</span>(<span class="params"></span>)</span>&#123;</div><div class="line">            <span class="built_in">console</span>.log(<span class="string">'fnnn2'</span>);</div><div class="line">        &#125; <span class="comment">//先声明了变量fn2，并给他赋值为函数，输出fn2也就是输出函数fn2</span></div><div class="line">   	<span class="comment">//2.然后对fn2进行了覆盖赋值，输出3</span></div><div class="line">   	<span class="comment">//3.最后向上一级级查询到函数fn()，输出：</span></div><div class="line">   	<span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params">fn2</span>)</span>&#123;</div><div class="line">       <span class="built_in">console</span>.log(fn2);</div><div class="line">       <span class="keyword">var</span> fn2 = <span class="number">3</span>;</div><div class="line">       <span class="built_in">console</span>.log(fn2);</div><div class="line">       <span class="built_in">console</span>.log(fn);</div><div class="line">       <span class="function"><span class="keyword">function</span> <span class="title">fn2</span>(<span class="params"></span>)</span>&#123;</div><div class="line">            <span class="built_in">console</span>.log(<span class="string">'fnnn2'</span>);</div><div class="line">        &#125;</div><div class="line">     &#125;</div></pre></td></tr></table></figure>
<h4 id="7-下面代码的输出是-为什么"><a href="#7-下面代码的输出是-为什么" class="headerlink" title="7.下面代码的输出是? 为什么?"></a><strong>7.下面代码的输出是? 为什么?</strong></h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">    <span class="keyword">var</span> fn = <span class="number">1</span>;</div><div class="line">    <span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params">fn</span>)</span>&#123;</div><div class="line">         <span class="built_in">console</span>.log(fn);</div><div class="line">    &#125;</div><div class="line">    <span class="built_in">console</span>.log(fn(fn));</div><div class="line"></div><div class="line"><span class="comment">//*************输出结果及分析***************</span></div><div class="line"><span class="comment">//给变量fn赋值为1，fn是number类型，再输出fn(fn),会报错！fn当然不是一个函数</span></div></pre></td></tr></table></figure>
<h4 id="8-下面代码的输出是-为什么"><a href="#8-下面代码的输出是-为什么" class="headerlink" title="8.下面代码的输出是? 为什么?"></a><strong>8.下面代码的输出是? 为什么?</strong></h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//作用域</span></div><div class="line"><span class="built_in">console</span>.log(j);<span class="comment">//undefined for循环里面声明的变量是全局变量，未赋值</span></div><div class="line"><span class="built_in">console</span>.log(i);<span class="comment">//undefined 同上</span></div><div class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>; i&lt;<span class="number">10</span>; i++)&#123;</div><div class="line">    <span class="keyword">var</span> j = <span class="number">100</span>;</div><div class="line">&#125;</div><div class="line"><span class="built_in">console</span>.log(i);<span class="comment">//10 执行循环后i的值</span></div><div class="line"><span class="built_in">console</span>.log(j);<span class="comment">//100 同上</span></div></pre></td></tr></table></figure>
<h4 id="9-下面代码的输出是-为什么"><a href="#9-下面代码的输出是-为什么" class="headerlink" title="9.下面代码的输出是? 为什么?"></a><strong>9.下面代码的输出是? 为什么?</strong></h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line">    fn();</div><div class="line">    <span class="keyword">var</span> i = <span class="number">10</span>;</div><div class="line">    <span class="keyword">var</span> fn = <span class="number">20</span>;</div><div class="line">    <span class="built_in">console</span>.log(i);</div><div class="line">    <span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params"></span>)</span>&#123;</div><div class="line">        <span class="built_in">console</span>.log(i);</div><div class="line">        <span class="keyword">var</span> i = <span class="number">99</span>;</div><div class="line">        fn2();</div><div class="line">        <span class="built_in">console</span>.log(i);</div><div class="line">        <span class="function"><span class="keyword">function</span> <span class="title">fn2</span>(<span class="params"></span>)</span>&#123;</div><div class="line">            i = <span class="number">100</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line"><span class="comment">//*************输出结果及分析***************</span></div><div class="line"><span class="comment">//老办法，改写为：</span></div><div class="line">	<span class="keyword">var</span> i,fn;</div><div class="line">	<span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params"></span>)</span>&#123;</div><div class="line">		<span class="keyword">var</span> i</div><div class="line">		<span class="function"><span class="keyword">function</span> <span class="title">fn2</span>(<span class="params"></span>)</span>&#123;</div><div class="line">            i = <span class="number">100</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="built_in">console</span>.log(i);<span class="comment">//输出undefined,在函数fn()内声明了局部变量i但是没有赋值</span></div><div class="line">        i = <span class="number">99</span>;</div><div class="line">        fn2();<span class="comment">//调用函数fn2()，i赋值为100</span></div><div class="line">        <span class="built_in">console</span>.log(i);</div><div class="line">    &#125;</div><div class="line">    fn();</div><div class="line">    i = <span class="number">10</span>;<span class="comment">//最后i赋值为10</span></div><div class="line">    fn = <span class="number">20</span>;</div><div class="line">    <span class="built_in">console</span>.log(i);</div></pre></td></tr></table></figure>
<h4 id="10-下面代码的输出是-为什么"><a href="#10-下面代码的输出是-为什么" class="headerlink" title="10.下面代码的输出是? 为什么?"></a><strong>10.下面代码的输出是? 为什么?</strong></h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">    <span class="keyword">var</span> say = <span class="number">0</span>;</div><div class="line">    (<span class="function"><span class="keyword">function</span> <span class="title">say</span>(<span class="params">n</span>)</span>&#123;</div><div class="line">        <span class="built_in">console</span>.log(n);</div><div class="line">        <span class="keyword">if</span>(n&lt;<span class="number">3</span>) <span class="keyword">return</span>;</div><div class="line">        say(n<span class="number">-1</span>);</div><div class="line">    &#125;( <span class="number">10</span> ));</div><div class="line">    <span class="built_in">console</span>.log(say);</div><div class="line"></div><div class="line"><span class="comment">//*************输出结果及分析***************</span></div><div class="line">    <span class="comment">//依次输出10 9 8 7 6 5 4 3 2 0</span></div><div class="line">    <span class="comment">//立即执行函数域链只在内部，不影响立即执行函数之外的变量，所以console.log(say)输出0</span></div></pre></td></tr></table></figure>
<hr>
<blockquote>
<p>参考：</p>
<ul>
<li><a href="http://www.jb51.net/article/57888.htm" target="_blank" rel="external">JavaScript变量声明详解</a></li>
<li><a href="http://www.cnblogs.com/silentjesse/p/4024536.html" target="_blank" rel="external">javascript变量声明提升(hoisting)</a></li>
<li><a href="http://www.bootcss.com/article/variable-and-function-hoisting-in-javascript/" target="_blank" rel="external">Bootstrap中文网</a></li>
<li><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Functions/arguments" target="_blank" rel="external">JavaScript|MDN</a></li>
<li><a href="http://www.cnblogs.com/bluedream2009/archive/2011/01/05/1925963.html" target="_blank" rel="external">javascript函数重载</a></li>
<li><a href="http://blog.csdn.net/qq838419230/article/details/8030078" target="_blank" rel="external">立即执行函数</a></li>
<li><a href="http://www.cnblogs.com/ziyunfei/archive/2012/11/17/2768967.html" target="_blank" rel="external">JavaScript:函数的作用域链</a></li>
</ul>
</blockquote>
<hr>
]]></content>
      
        <categories>
            
            <category> 编程学习 </category>
            
            <category> 前端基础 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> JavaScript </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[JavaScript基本语法要点]]></title>
      <url>http://licao404.com/2016/03/16/JavaScript%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95/</url>
      <content type="html"><![CDATA[<div class="group-picture"><div class="group-picture-container"><div class="group-picture-row"><div class="group-picture-column" style="width: 50%;"><img src="http://7xrvo9.com1.z0.glb.clouddn.com/0316%2Fportfolio-1.jpg" alt=""></div><div class="group-picture-column" style="width: 50%;"><img src="http://7xrvo9.com1.z0.glb.clouddn.com/0316%2Fportfolio-2.jpg" alt=""></div></div><div class="group-picture-row"><div class="group-picture-column" style="width: 100%;"><img src="http://7xrvo9.com1.z0.glb.clouddn.com/0316%2Fportfolio-3.jpg" alt=""></div></div></div></div>
<a id="more"></a>
<blockquote>
<h3 id="【基础知识点】"><a href="#【基础知识点】" class="headerlink" title="【基础知识点】"></a>【基础知识点】</h3></blockquote>
<h4 id="1-CSS和JS在网页中的放置顺序是怎样的？"><a href="#1-CSS和JS在网页中的放置顺序是怎样的？" class="headerlink" title="1. CSS和JS在网页中的放置顺序是怎样的？"></a><strong>1. CSS和JS在网页中的放置顺序是怎样的？</strong></h4><ul>
<li>一般而言<code>CSS</code>放在<code>&lt;head&gt;</code>头部而<code>JS</code>放在<code>&lt;body&gt;</code>底部。</li>
</ul>
<h4 id="2-解释白屏和FOUC？"><a href="#2-解释白屏和FOUC？" class="headerlink" title="2. 解释白屏和FOUC？"></a><strong>2. 解释白屏和<code>FOUC</code>？</strong></h4><ul>
<li><p><code>白屏</code>：</p>
<ul>
<li>当样式表放在页面底部时，一些浏览器（IE浏览器）会等待加载完html和css后才进行页面渲染，这样就造成页面内容不会逐步出现，而是有空白等待的时间；注意<code>@import</code>加载样式时即使放在<code>link</code>里也会造成白屏；</li>
<li><code>JS</code>是阻塞加载，放在头部时会禁止并发加载，等js加载完成后再继续加载，也会造成白屏；</li>
</ul>
</li>
<li><p><code>FOUC</code>（无样式内容闪烁）是因为另外一些浏览器每解析一个标签就渲染一步，如果样式表放在后面，会在最后加载完成css后再进行一次渲染，造成闪烁,<code>Firfox</code>是一直<code>Fouc</code>;</p>
</li>
</ul>
<h4 id="3-async和defer的作用是什么？有什么区别？"><a href="#3-async和defer的作用是什么？有什么区别？" class="headerlink" title="3. async和defer的作用是什么？有什么区别？"></a><strong>3. async和defer的作用是什么？有什么区别？</strong></h4><ul>
<li>作用：都是让<code>JS</code>的加载和后续文档元素的加载渲染并行执行（异步）；</li>
<li>区别:<code>defer</code>只是异步加载而不会立即执行,等待页面后续内容全部加载完成后才执行；<code>async</code>则是加载<code>js</code>后立即执行;</li>
</ul>
<h4 id="4-简述网页的渲染机制？"><a href="#4-简述网页的渲染机制？" class="headerlink" title="4. 简述网页的渲染机制？"></a><strong>4. 简述网页的渲染机制？</strong></h4><ol>
<li>浏览器根据用户输入的域名去获取对应的网页资源；</li>
<li>解析<code>html</code>标签构建<code>DOM</code>树;</li>
<li>解析<code>CSS</code> 标签构建<code>CSSOM</code>树;</li>
<li>把<code>DOM</code>和<code>CSSOM</code>组合成为渲染树;</li>
<li>精确计算每个DOM节点的位置（<code>layout</code>和<code>reflow</code>过程）；</li>
<li>最后通过调用操作系统<code>Native GUI</code>的<code>API</code>绘制;</li>
<li>更加详细深入借鉴<a href="http://www.zhihu.com/question/20117417" target="_blank" rel="external">知乎</a>；</li>
</ol>
<h4 id="5-JavaScript-定义了几种数据类型-哪些是简单类型-哪些是复杂类型"><a href="#5-JavaScript-定义了几种数据类型-哪些是简单类型-哪些是复杂类型" class="headerlink" title="5. JavaScript 定义了几种数据类型? 哪些是简单类型?哪些是复杂类型?"></a><strong>5. <code>JavaScript</code> 定义了几种数据类型? 哪些是简单类型?哪些是复杂类型?</strong></h4><blockquote>
<p><code>JavaScript</code>定义了 6 种数据类型</p>
</blockquote>
<ul>
<li>简单类型<ul>
<li><code>NULL</code>空数据类型</li>
<li><code>Undefined</code>未定义的数据类型</li>
<li><code>String</code>字符串类型：由0个或多个字符组成，被包含在引号里，字符包括字母，数字，标点符号和空格；</li>
<li><code>Number</code>数值类型：支持整数，浮点数，负数，</li>
<li><code>布尔值</code>：<code>true</code>/<code>false</code></li>
</ul>
</li>
<li>复杂类型：<ul>
<li><code>Object</code>对象</li>
</ul>
</li>
</ul>
<h4 id="6-NaN、undefined、null分别代表什么"><a href="#6-NaN、undefined、null分别代表什么" class="headerlink" title="6. NaN、undefined、null分别代表什么?"></a><strong>6. <code>NaN</code>、<code>undefined</code>、<code>null</code>分别代表什么?</strong></h4><ul>
<li><code>NaN</code>:<code>NaN</code>属性顾名思义<code>not a number</code>，表示非数字值，并不是合法的数字；但是数据类型是<code>Number</code>;不等于任何值包括自己；</li>
<li><code>undefined</code>：表示未定义的值；<code>typeof</code>一个没有值得变量会返回<code>undefined</code>;</li>
<li><code>null</code>：空数据类型，表示一个空对象的引用，只有一个值的特殊类型;<code>typeof</code>检测<code>null</code>返回<code>object</code>;</li>
</ul>
<h4 id="7-typeof和instanceof的作用和区别"><a href="#7-typeof和instanceof的作用和区别" class="headerlink" title="7. typeof和instanceof的作用和区别?"></a><strong>7. <code>typeof</code>和<code>instanceof</code>的作用和区别?</strong></h4><ul>
<li><code>typeof</code>可以用来检测<code>Function</code>，<code>Number</code>，<code>Undefined</code>，<code>String</code>等这几种基本类型，但对于数组和正则只能返回<code>object</code>;</li>
<li><code>instanceof</code>用来判断某个对象的实例，返回布尔值</li>
</ul>
<hr>
<blockquote>
<h3 id="【基本语法演示】"><a href="#【基本语法演示】" class="headerlink" title="【基本语法演示】"></a>【基本语法演示】</h3></blockquote>
<h4 id="1-完成如下代码判断一个变量是否是数字、字符串、布尔、函数"><a href="#1-完成如下代码判断一个变量是否是数字、字符串、布尔、函数" class="headerlink" title="1.完成如下代码判断一个变量是否是数字、字符串、布尔、函数"></a><strong>1.完成如下代码判断一个变量是否是数字、字符串、布尔、函数</strong></h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">isNumber</span>(<span class="params">el</span>)</span>&#123;</div><div class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span>(el)===<span class="string">"number"</span>) &#123;</div><div class="line">    	<span class="keyword">return</span> <span class="literal">true</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">isString</span>(<span class="params">el</span>)</span>&#123;</div><div class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span>(el)===<span class="string">"string"</span>) &#123;</div><div class="line">    	<span class="keyword">return</span> <span class="literal">true</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">isBoolean</span>(<span class="params">el</span>)</span>&#123;</div><div class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span>(el)===<span class="string">"boolean"</span>) &#123;</div><div class="line">    	<span class="keyword">return</span> <span class="literal">true</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">isFunction</span>(<span class="params">el</span>)</span>&#123;</div><div class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span>(el)===<span class="string">"function"</span>) &#123;</div><div class="line">    	<span class="keyword">return</span> <span class="literal">true</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"><span class="keyword">var</span> a = <span class="number">2</span>,</div><div class="line">    b = <span class="string">"jirengu"</span>,</div><div class="line">	c = <span class="literal">false</span>;</div><div class="line">	alert( isNumber(a) );  <span class="comment">//true</span></div><div class="line">	alert( isString(a) );  <span class="comment">//false</span></div><div class="line">	alert( isString(b) );  <span class="comment">//true</span></div><div class="line">	alert( isBoolean(c) ); <span class="comment">//true</span></div><div class="line">	alert( isFunction(a)); <span class="comment">//false</span></div><div class="line">	alert( isFunction( isNumber ) ); <span class="comment">//true</span></div></pre></td></tr></table></figure>
<h4 id="2-以下代码的输出结果是"><a href="#2-以下代码的输出结果是" class="headerlink" title="2.以下代码的输出结果是?"></a><strong>2.以下代码的输出结果是?</strong></h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">console</span>.log(<span class="number">1</span>+<span class="number">1</span>);			<span class="comment">//2</span></div><div class="line"><span class="built_in">console</span>.log(<span class="string">"2"</span>+<span class="string">"4"</span>);		<span class="comment">//24 两个字符串连接</span></div><div class="line"><span class="built_in">console</span>.log(<span class="number">2</span>+<span class="string">"4"</span>); 		<span class="comment">//24 2转换为字符</span></div><div class="line"><span class="built_in">console</span>.log(+<span class="keyword">new</span> <span class="built_in">Date</span>());	<span class="comment">//1458035114537</span></div><div class="line"><span class="built_in">console</span>.log(+<span class="string">"4"</span>);			<span class="comment">//4</span></div></pre></td></tr></table></figure>
<h4 id="3-以下代码的输出结果是"><a href="#3-以下代码的输出结果是" class="headerlink" title="3.以下代码的输出结果是?"></a><strong>3.以下代码的输出结果是?</strong></h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> a = <span class="number">1</span>;</div><div class="line">a+++a;</div><div class="line"></div><div class="line"><span class="keyword">typeof</span> a+<span class="number">2</span>;<span class="comment">//number2</span></div></pre></td></tr></table></figure>
<h4 id="4-遍历数组，把数组里的打印数组每一项的平方"><a href="#4-遍历数组，把数组里的打印数组每一项的平方" class="headerlink" title="4.遍历数组，把数组里的打印数组每一项的平方?"></a><strong>4.遍历数组，把数组里的打印数组每一项的平方?</strong></h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> arr = [<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>]</div><div class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>;i&lt;arr.length;i++)&#123;</div><div class="line">	<span class="built_in">console</span>.log(arr[i]*arr[i]);</div><div class="line">&#125;</div><div class="line"><span class="comment">// 输出 9, 16, 25</span></div></pre></td></tr></table></figure>
<h4 id="5-遍历-JSON-打印里面的值"><a href="#5-遍历-JSON-打印里面的值" class="headerlink" title="5.遍历 JSON, 打印里面的值?"></a><strong>5.遍历 <code>JSON</code>, 打印里面的值?</strong></h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> obj = &#123;</div><div class="line">  <span class="attr">name</span>: <span class="string">'hunger'</span>,</div><div class="line">  <span class="attr">sex</span>: <span class="string">'male'</span>,</div><div class="line">  <span class="attr">age</span>: <span class="number">28</span></div><div class="line">&#125;</div><div class="line"><span class="keyword">for</span>(<span class="keyword">var</span> k <span class="keyword">in</span> obj)&#123;</div><div class="line">	<span class="built_in">console</span>.log(k+<span class="string">": "</span>+obj[k]);</div><div class="line">&#125;</div><div class="line"><span class="comment">// 输出 name: hunger, sex: male, age:28</span></div></pre></td></tr></table></figure>
<h4 id="6-下面代码的输出是-为什么"><a href="#6-下面代码的输出是-为什么" class="headerlink" title="6.下面代码的输出是? 为什么?"></a><strong>6.下面代码的输出是? 为什么?</strong></h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">console</span>.log(a);<span class="comment">//Undefined,声明了变量并进行了变量提升，未有赋值</span></div><div class="line"><span class="keyword">var</span> a = <span class="number">1</span>;</div><div class="line"><span class="built_in">console</span>.log(a);<span class="comment">//1</span></div><div class="line"><span class="built_in">console</span>.log(b);<span class="comment">//报错，b没有被声明</span></div></pre></td></tr></table></figure>
<hr>
]]></content>
      
        <categories>
            
            <category> 编程学习 </category>
            
            <category> 前端基础 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> JavaScript </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[CSS浏览器兼容]]></title>
      <url>http://licao404.com/2016/03/01/CSS%E6%B5%8F%E8%A7%88%E5%99%A8%E5%85%BC%E5%AE%B9/</url>
      <content type="html"><![CDATA[<blockquote>
<h3 id="【知识点】"><a href="#【知识点】" class="headerlink" title="【知识点】"></a>【知识点】</h3></blockquote>
<h4 id="1-如何调试-IE-浏览器"><a href="#1-如何调试-IE-浏览器" class="headerlink" title="1. 如何调试 IE 浏览器?"></a><strong>1. 如何调试 IE 浏览器?</strong></h4><blockquote>
<p>1.通过高版本IE浏览器的开发者工具，可以仿真其之前版本IE浏览器的运行环境，基本上可以临时快速调试各版本IE浏览器：<img src="http://7xr868.com1.z0.glb.clouddn.com/task13IE%E5%BC%80%E5%8F%91%E8%80%85.png" alt="IE调试01"><br><a id="more"></a><br>2.用虚拟机运行xp等系统，用原生ie6浏览器调试；<br>3.如果有条件，远程到一台有相应版本浏览器的机器（服务器）上，进行调试；<br>4.使用第三方调试工具（<code>IETester</code>等）模拟各种版本浏览器，不过存在一些未知的问题，毕竟是模拟的；</p>
</blockquote>
<h4 id="2-什么是CSS-hack？在-CSS-和-HTML里如何写-hack？在-CSS-中-ie6、ie7的-hack-方式？"><a href="#2-什么是CSS-hack？在-CSS-和-HTML里如何写-hack？在-CSS-中-ie6、ie7的-hack-方式？" class="headerlink" title="2. 什么是CSS hack？在 CSS 和 HTML里如何写 hack？在 CSS 中 ie6、ie7的 hack 方式？"></a><strong>2. 什么是<code>CSS hack</code>？在 CSS 和 HTML里如何写 <code>hack</code>？在 CSS 中 ie6、ie7的 <code>hack</code> 方式？</strong></h4><blockquote>
<p>由于不同浏览器和某浏览器的不同版本，特别是一些老浏览器，如IE6,7等，对CSS的支持、解析不一致，因此会导致页面的显示效果不一样，而<code>CSS hack</code>是利用浏览器漏洞来让不同浏览器显示效果一致，我们把针对不同的浏览器/不同版本写相应的<code>CSS code</code>的过程，叫做<code>CSS hack</code>；</p>
</blockquote>
<ul>
<li><p><code>CSS hack</code>基本上有4种方式：</p>
<ul>
<li>IE条件注释法（IE专有的hack方式，Microsoft官方推荐）</li>
</ul>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">只在IE下生效</div><div class="line"><span class="comment">&lt;!--[if IE]&gt;</span></div><div class="line">  &lt;link rel="stylesheet" type="text/css" href="ie.css"&gt;</div><div class="line">&lt;![endif]--&gt;</div><div class="line"></div><div class="line">只在IE6下生效</div><div class="line"><span class="comment">&lt;!--[if IE6]&gt;</span></div><div class="line">  &lt;link rel="stylesheet" type="text/css" href="ie6.css"&gt;</div><div class="line">&lt;![endif]--&gt;</div><div class="line"></div><div class="line">只在IE6以上版本生效</div><div class="line"><span class="comment">&lt;!--[if gte IE]&gt;</span></div><div class="line">  &lt;link rel="stylesheet" type="text/css" href="ie.css"&gt;</div><div class="line">&lt;![endif]--&gt;</div><div class="line"></div><div class="line">非IE浏览器生效</div><div class="line"><span class="comment">&lt;!--[if ！IE]&gt;</span></div><div class="line">  &lt;link rel="stylesheet" type="text/css" href="ie.css"&gt;</div><div class="line">&lt;![endif]--&gt;</div></pre></td></tr></table></figure>
<ul>
<li><p>属性前缀法：</p>
<ol>
<li><code>_</code>和<code>-</code>只对<code>ie6</code>有效；</li>
<li><code>*</code>对<code>ie6,7</code>有效；</li>
<li><code>\9</code>对<code>ie11</code>以下所有ie有效；</li>
<li><code>\0</code>对<code>ie8,9,10</code>有效；</li>
<li><code>\9\0</code>只对<code>ie9,10</code>有效；</li>
<li><code>\0\9</code>只对<code>ie8,9</code>有效；</li>
<li>… …</li>
</ol>
</li>
<li><p>选择器前缀法：</p>
<ol>
<li><code>* 前缀</code>只对IE6有效；</li>
<li><code>*+ 前缀</code>只对IE7有效；</li>
<li>更多可以参考<a href="http://browserhacks.com/" target="_blank" rel="external">browserhacks</a>；</li>
</ol>
</li>
<li><p>用<code>JavaScript</code>判断<code>ie</code>版本：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 是否小于等于ie8</span></div><div class="line">    <span class="keyword">var</span> isIE = <span class="string">'\v'</span>==<span class="string">'v'</span>;</div><div class="line"></div><div class="line"><span class="comment">// 判断ie版本</span></div><div class="line">    <span class="keyword">var</span> ieVersion = (<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123; <span class="keyword">if</span> (<span class="keyword">new</span> <span class="built_in">RegExp</span>(<span class="string">"MSIE     ([0-9]&#123;1,&#125;[\.0-9]&#123;0,&#125;)"</span>).exec(navigator.userAgent) != <span class="literal">null</span>) &#123; <span class="keyword">return</span> <span class="built_in">parseFloat</span>( <span class="built_in">RegExp</span>.$<span class="number">1</span> ); &#125; <span class="keyword">else</span> &#123; <span class="keyword">return</span> <span class="literal">false</span>; &#125; &#125;)();</div></pre></td></tr></table></figure>
</li>
</ul>
<h4 id="3-列举几种-浏览器兼容问题"><a href="#3-列举几种-浏览器兼容问题" class="headerlink" title="3. 列举几种 浏览器兼容问题"></a><strong>3. 列举几种 浏览器兼容问题</strong></h4><blockquote>
<p>1.不同浏览器对标签默认的内外边距不一致，最常见的兼容性问题，解决方式：在<code>css</code>开头用通配选择器将所有元素重置<code>*{margin:0;padding:0;}</code>;<br>2.块属性标签float后，又有横行的margin情况下，在IE6显示margin比设置的大,常见的问题体现是ie6中最后一块被顶到下面一行，解决方法：在float的标签样式控制中加入 display:inline;将其转化为行内属性；<br>3.图片默认有间距，几个img标签放在一起的时候，有些浏览器会有默认的间距，加了问题一中提到的通配符也不起作用；解决方法：用<code>float</code>为图片布局；<br>4…. …更多兼容性问题参考<a href="http://blog.csdn.net/chuyuqing/article/details/37561313" target="_blank" rel="external">chuyuqing的专栏</a>，<a href="http://wenku.baidu.com/link?url=ysYAKTQTyuudp9fU8sLvVr-VlGdJvCrHFWRpN8RcJSo0hxw-XnBJ_zhiHVudTy7Mq3AQSM6TEmCMDFaS4CNrS2NXGkokWmvU9gKGFaqxVYe" target="_blank" rel="external">文库</a></p>
</blockquote>
</li>
</ul>
<h4 id="4-针对兼容、多浏览器覆盖有什么看法？渐进增强和优雅降级是什么意思？"><a href="#4-针对兼容、多浏览器覆盖有什么看法？渐进增强和优雅降级是什么意思？" class="headerlink" title="4. 针对兼容、多浏览器覆盖有什么看法？渐进增强和优雅降级是什么意思？"></a><strong>4. 针对兼容、多浏览器覆盖有什么看法？渐进增强和优雅降级是什么意思？</strong></h4><blockquote>
<p>1.首先考虑产品的受众，设计师，是否需要兼容老版本的浏览器，比如说该产品用户大多不用IE浏览器，则不需要考虑兼容ie的老版本；<br>2.看你的<code>leader</code>或者审阅产品的人在用什么浏览器,考虑兼容；<br>3.做到几乎全部的兼容覆盖并不现实，必须结合现有资源，用户实际需求，项目时间的综合考虑是否要做或做什么浏览器的兼容；<br>4.渐进增强：项目一开始就考虑低版本浏览器的兼容性，保证最基本的功能，再对高级浏览器进行效果改进。<br>5.优雅降级：一开始就构建完整的功能，完成后再进行低版本浏览器兼容；</p>
</blockquote>
<h4 id="5-reset-css和normalize-css分别是做什么的？为什么推荐使用-nomalize-css"><a href="#5-reset-css和normalize-css分别是做什么的？为什么推荐使用-nomalize-css" class="headerlink" title="5. reset.css和normalize.css分别是做什么的？为什么推荐使用 nomalize.css?"></a><strong>5. <code>reset.css</code>和<code>normalize.css</code>分别是做什么的？为什么推荐使用 nomalize.css?</strong></h4><blockquote>
<p>1.<code>reset.css</code>是全局样式重置，html标签在不同浏览器的默认样式存在差异，<code>reset.css</code>一开始就将浏览器的默认样式全部暴力覆盖掉；<br>2.<code>normalize.css</code>保留浏览器的原来样式并且做到每个浏览显示一致；<br>3.<code>Normalize</code>相对<code>平和</code>，注重通用的方案，重置掉该重置的样式，保留有用的<code>user agent</code>样式，同时进行一些 bug 的修复，这点是 reset 所缺乏的,所以通用性和可维护性高；</p>
</blockquote>
<hr>
<blockquote>
<h3 id="【操作】"><a href="#【操作】" class="headerlink" title="【操作】"></a>【操作】</h3></blockquote>
<h4 id="1-安装-VirtualBox-下载-安装虚拟机"><a href="#1-安装-VirtualBox-下载-安装虚拟机" class="headerlink" title="1.安装 VirtualBox , 下载 安装虚拟机"></a>1.安装 VirtualBox , 下载 安装虚拟机</h4><p><img src="http://7xr868.com1.z0.glb.clouddn.com/task13Win_XP.png" alt="虚拟机"></p>
<blockquote>
<h4 id="2-在-ie-6-7-8中展示-盒模型、inline-block、max-width的区别"><a href="#2-在-ie-6-7-8中展示-盒模型、inline-block、max-width的区别" class="headerlink" title="2.在 ie 6, 7, 8中展示 盒模型、inline-block、max-width的区别"></a>2.在 ie 6, 7, 8中展示 <code>盒模型</code>、<code>inline-block</code>、<code>max-width</code>的区别</h4></blockquote>
<ul>
<li>测试代码：<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line">  <span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">"text/css"</span>&gt;</span><span class="css"></span></div><div class="line">  *&#123;</div><div class="line">  	<span class="attribute">padding</span>: <span class="number">0</span>;</div><div class="line">  	<span class="attribute">margin</span>: <span class="number">0</span>;</div><div class="line">  &#125;</div><div class="line">    <span class="selector-class">.box</span>&#123;</div><div class="line">      <span class="attribute">display</span>: inline-block;</div><div class="line">      <span class="attribute">height</span>:<span class="number">100px</span>;</div><div class="line">      <span class="attribute">width</span>:<span class="number">100px</span>;</div><div class="line">      <span class="attribute">border</span>:<span class="number">20px</span> solid red;</div><div class="line">      <span class="attribute">padding</span>:<span class="number">30px</span>;</div><div class="line">      <span class="attribute">margin</span>: <span class="number">40px</span>;</div><div class="line">      &#125;</div><div class="line">      <span class="selector-class">.box2</span>&#123;</div><div class="line">      <span class="attribute">display</span>: inline-block;</div><div class="line">      <span class="attribute">height</span>:<span class="number">100px</span>;</div><div class="line">      <span class="attribute">width</span>:<span class="number">100px</span>;</div><div class="line">      <span class="attribute">max-width</span>: <span class="number">50px</span>;</div><div class="line">      <span class="attribute">border</span>:<span class="number">20px</span> solid blue;</div><div class="line">      <span class="attribute">padding</span>:<span class="number">30px</span>;</div><div class="line">      <span class="attribute">margin</span>: <span class="number">40px</span>;</div><div class="line">      &#125;</div><div class="line">  <span class="tag">&lt;/<span class="name">style</span>&gt;</span></div><div class="line"></div><div class="line"><span class="comment">&lt;!--****************************************************--&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line"> <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"box"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"box2"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div></pre></td></tr></table></figure>
</li>
</ul>
<p>1.在标准模式下的盒模型如下图所示，<code>盒子总宽度/高度=width/height+padding+border+margin</code>;<img src="http://7xr868.com1.z0.glb.clouddn.com/task13ie8%E6%A0%87%E5%87%86%E5%92%8C%E6%A8%A1%E5%9E%8B.png" alt="标准盒子模型"><br>在<code>ie6,7</code>怪异模式下,<code>盒子总宽度/高度=width/height + margin = 内容区宽度/高度 + padding + border + margin</code>;<br>2.<code>inline-block</code>只有ie8支持，<code>max-width</code>ie7,8支持（存在bug具体看<a href="http://caniuse.com/#search=max-width" target="_blank" rel="external">caniuse</a>）：</p>
<hr>
<p>IE8</p>
<h2 id=""><a href="#" class="headerlink" title=""></a><img src="http://7xr868.com1.z0.glb.clouddn.com/task13inline-block-ie8.png" alt="ie8"></h2><p>IE7</p>
<h2 id="-1"><a href="#-1" class="headerlink" title=""></a><img src="http://7xr868.com1.z0.glb.clouddn.com/task13inline-block-ie7.png" alt="ie7"></h2><p>IE6<br><img src="http://7xr868.com1.z0.glb.clouddn.com/task13ie6.png" alt="ie6"></p>
<hr>
]]></content>
      
        <categories>
            
            <category> 编程学习 </category>
            
            <category> 前端基础 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> CSS </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[圣杯布局+双飞翼布局]]></title>
      <url>http://licao404.com/2016/02/29/%E5%9C%A3%E6%9D%AF%E5%B8%83%E5%B1%80-%E5%8F%8C%E9%A3%9E%E7%BF%BC%E5%B8%83%E5%B1%80/</url>
      <content type="html"><![CDATA[<blockquote>
<h3 id="【基础知识】"><a href="#【基础知识】" class="headerlink" title="【基础知识】"></a>【基础知识】</h3></blockquote>
<h4 id="1-负边距在让元素产生偏移时和position-relative有什么区别"><a href="#1-负边距在让元素产生偏移时和position-relative有什么区别" class="headerlink" title="1. 负边距在让元素产生偏移时和position: relative有什么区别?"></a><strong>1. 负边距在让元素产生偏移时和<code>position: relative</code>有什么区别?</strong></h4><blockquote>
<p>最大的区别是负margin让元素移动时改变了文档流，同时可能影响其他元素排列；而<code>position:relative</code>并未让元素脱离文档流，只是让元素相对于本来的位置进行定位，对其他元素的排列不会造成影响。</p>
</blockquote>
<a id="more"></a>
<h4 id="2-使用负-margin-形成三栏布局有什么条件"><a href="#2-使用负-margin-形成三栏布局有什么条件" class="headerlink" title="2. 使用负 margin 形成三栏布局有什么条件?"></a><strong>2. 使用负 margin 形成三栏布局有什么条件?</strong></h4><blockquote>
<p>1.<code>HTML</code>代码中，中间主块要写在文档流的最前面让浏览器优先渲染，然后是左右边栏；<br>2.父容器内三个块必须都是浮动的;<br>3.且主块的宽度必须撑满父容器的宽度（<code>width:100%</code>）</p>
</blockquote>
<h4 id="3-圣杯布局的原理是怎样的-简述实现圣杯布局的步骤？"><a href="#3-圣杯布局的原理是怎样的-简述实现圣杯布局的步骤？" class="headerlink" title="3. 圣杯布局的原理是怎样的? 简述实现圣杯布局的步骤？"></a><strong>3. 圣杯布局的原理是怎样的? 简述实现圣杯布局的步骤？</strong></h4><blockquote>
<p>1.三栏浮动<code>float:left</code>,相对定位<code>position:relative</code>;<br>2.主块设置<code>width:100%</code>占满宽度；<br>3.左块使用<code>margin-left:-100%</code>拉到最左边，右块使用<code>margin-left:npx</code>，n为右块的宽度；<br>4.父容器设置左右padding宽度能容纳下左右块；<br>5.左块用相对定位拉到父容器在左边空出的位置，右块同理；</p>
</blockquote>
<h4 id="4-双飞翼布局的原理-实现步骤"><a href="#4-双飞翼布局的原理-实现步骤" class="headerlink" title="4. 双飞翼布局的原理? 实现步骤?"></a><strong>4. 双飞翼布局的原理? 实现步骤?</strong></h4><blockquote>
<p>1.三栏浮动<code>float:left</code>,相对定位<code>position:relative</code>;<br>2.主块设置<code>width:100%</code>占满宽度；<br>3.左块使用<code>margin-left:-100%</code>拉到最左边，右块使用<code>margin-left:npx</code>，n为右块的宽度；<br>4.主块嵌套一个新块，设置该块左右<code>margin</code></p>
</blockquote>
<hr>
<blockquote>
<h3 id="【代码】"><a href="#【代码】" class="headerlink" title="【代码】"></a>【代码】</h3><h4 id="task-12-1"><a href="#task-12-1" class="headerlink" title="task-12-1"></a><a href="https://github.com/licao404/landemo/blob/master/task12/task-12-1.html" target="_blank" rel="external">task-12-1</a></h4><h4 id="task-12-2"><a href="#task-12-2" class="headerlink" title="task-12-2"></a><a href="https://github.com/licao404/landemo/blob/master/task12/task-12-2.html" target="_blank" rel="external">task-12-2</a></h4><h4 id="task-12-3"><a href="#task-12-3" class="headerlink" title="task-12-3"></a><a href="https://github.com/licao404/landemo/blob/master/task12/task-12-3.html" target="_blank" rel="external">task-12-3</a></h4><h4 id="task-12-4"><a href="#task-12-4" class="headerlink" title="task-12-4"></a><a href="https://github.com/licao404/landemo/blob/master/task12/task-12-4.html" target="_blank" rel="external">task-12-4</a></h4></blockquote>
<hr>
]]></content>
      
        <categories>
            
            <category> 编程学习 </category>
            
            <category> 前端基础 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> CSS </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[BFC]]></title>
      <url>http://licao404.com/2016/02/28/BFC/</url>
      <content type="html"><![CDATA[<blockquote>
<h3 id="【基础知识】"><a href="#【基础知识】" class="headerlink" title="【基础知识】"></a>【基础知识】</h3></blockquote>
<h4 id="1-在什么场景下会出现外边距合并？如何合并？如何不让相邻元素外边距合并？"><a href="#1-在什么场景下会出现外边距合并？如何合并？如何不让相邻元素外边距合并？" class="headerlink" title="1. 在什么场景下会出现外边距合并？如何合并？如何不让相邻元素外边距合并？"></a><strong>1. 在什么场景下会出现外边距合并？如何合并？如何不让相邻元素外边距合并？</strong></h4><blockquote>
<ol>
<li>相邻块盒子的垂直外边距合并只有他们是在同一BFC，且没有padding与border将外边距隔开才会发生；</li>
<li>垂直相邻元素，子元素和父元素会发生合并，合并后的外边距的高度等于两个发生合并的外边距的高度中的较大者。</li>
<li>创建另外一个BFC，让不想发生外边距合并的元素处于不同的BFC。</li>
</ol>
</blockquote>
<a id="more"></a>
<h4 id="2-去除inline-block内缝隙有哪几种常见方法"><a href="#2-去除inline-block内缝隙有哪几种常见方法" class="headerlink" title="2. 去除inline-block内缝隙有哪几种常见方法?"></a><strong>2. 去除<code>inline-block</code>内缝隙有哪几种常见方法?</strong></h4><ul>
<li><p>1.修改<code>li</code>的代码书写格式：</p>
<ul>
<li><p><img src="http://7xr868.com1.z0.glb.clouddn.com/task11%E5%8E%BB%E7%BC%9D%E9%9A%99li.gif" alt="li书写1"></p>
</li>
<li><p><img src="http://7xr868.com1.z0.glb.clouddn.com/task11%E5%8E%BB%E7%BC%9D%E9%9A%99li2.gif" alt="li书写2"></p>
</li>
</ul>
</li>
</ul>
<ul>
<li>2.用<code>负margin</code>：<ul>
<li><img src="http://7xr868.com1.z0.glb.clouddn.com/task11%E5%8E%BB%E7%BC%9D%E9%9A%99%E8%B4%9Fmargin.gif" alt="-margin"></li>
</ul>
</li>
</ul>
<ul>
<li>3.用浮动并在父元素用<code>overflow:auto</code>清除浮动：<ul>
<li><img src="http://7xr868.com1.z0.glb.clouddn.com/task11%E5%8E%BB%E7%BC%9D%E9%9A%99%E6%B8%85%E9%99%A4%E6%B5%AE%E5%8A%A8.gif" alt="float"></li>
</ul>
</li>
</ul>
<ul>
<li>设置父元素的<code>font-size</code>为<code>0</code>,子元素再给一个<code>font-size</code>:<ul>
<li><img src="http://7xr868.com1.z0.glb.clouddn.com/task11%E5%8E%BB%E7%BC%9D%E9%9A%99fontsize.gif" alt="父font-size"></li>
</ul>
</li>
</ul>
<ul>
<li>适配IE8以下加hack语句<a href="http://js.jirengu.com/quvohojade/2/edit" target="_blank" rel="external"><code>*display:inline</code></a></li>
</ul>
<h4 id="3-父容器使用overflow-auto-hidden撑开高度的原理是什么？"><a href="#3-父容器使用overflow-auto-hidden撑开高度的原理是什么？" class="headerlink" title="3. 父容器使用overflow: auto| hidden撑开高度的原理是什么？"></a><strong>3. 父容器使用<code>overflow: auto| hidden</code>撑开高度的原理是什么？</strong></h4><blockquote>
<p>给父容器添加<code>overflow: auto| hidden</code>样式即触发了BFC，这时如果父容器内只有浮动元素，则会撑开父容器高度。</p>
</blockquote>
<h4 id="4-BFC是什么？如何形成BFC，有什么作用"><a href="#4-BFC是什么？如何形成BFC，有什么作用" class="headerlink" title="4. BFC是什么？如何形成BFC，有什么作用?"></a><strong>4. BFC是什么？如何形成BFC，有什么作用?</strong></h4><blockquote>
<ol>
<li>定义：浮动元素和绝对定位元素，非块级盒子的块级容器（例如 inline-block, table-cells, 和 table-captions），以及overflow值不为“visiable”的块级盒子，都会为他们的内容创建新的BFC（块级格式上下文）。</li>
<li>如何形成：可以通过给父容器添加一个触发BFC的样式即可。例如<code>float:left</code>,<code>position:absolute</code>,<code>overflow:hidde</code>,<code>display:inline-block</code>等；（用来清除浮动可能带来一些副作用，一般使用<code>overflow:auto</code>）</li>
<li><ul>
<li>用于<code>包含浮动</code>。如果父容器内存在浮动元素，则父容器没有高度，它的浮动孩子将会脱离文档流，影响到其他元素的排列。这时可以创建新的BFC，撑开父容器的高度可以包含子元素；</li>
</ul>
</li>
</ol>
<ul>
<li>用于<code>防止边距合并</code>，实质上外边距合并是由BFC导致的（<a href="http://www.w3cplus.com/css/understanding-block-formatting-contexts-in-css.html" target="_blank" rel="external">详细</a>），毗邻块盒子的垂直外边距折叠只有他们是在同一BFC时才会发生，如果他们属于不同的BFC，他们之间的外边距将不会折叠。所以通过创建一个新的BFC我们可以防止外边距折叠；</li>
<li>用于<code>防止文字环绕</code>；</li>
<li>用于<code>多列布局</code>；当我们设计一个多列布局占满宽度时，最后一列被挤到下一行，在其中一个列的布局中建立了一个新的BFC，它将会在前一列填充完之后的后面占据所剩余的空间。</li>
</ul>
</blockquote>
<h4 id="5-浮动导致的父容器高度塌陷指什么？为什么会产生？有几种解决方法"><a href="#5-浮动导致的父容器高度塌陷指什么？为什么会产生？有几种解决方法" class="headerlink" title="5. 浮动导致的父容器高度塌陷指什么？为什么会产生？有几种解决方法"></a><strong>5. 浮动导致的父容器高度塌陷指什么？为什么会产生？有几种解决方法</strong></h4><blockquote>
<p>概念：没有设置父容器的高度或者设置了<code>auto</code>，容器内只含有浮动元素，则他们的父容器会没有高度属性，之后的元素会“挤上来”，造成“高度塌陷”。</p>
<ul>
<li>解决：</li>
</ul>
<ol>
<li>给父容器添加<code>overflow: auto| hidden</code>等样式触发BFC，撑开父容器高度。</li>
<li>使用伪类<code>:after</code>,父容器通过<code>:after</code>来为其内容末尾添加一个内容为空的块框，利用这个块框来清除浮动（需要hack兼容IE），<code>常常用这种方法</code>!</li>
<li>给父容器后添加一个新标签，用这个新标签来清除浮动撑开高度，兼容性好，但是无语义；</li>
</ol>
</blockquote>
<h4 id="6-以下代码每一行的作用是什么？-为什么会产生作用？-和BFC撑开空间有什么区别？"><a href="#6-以下代码每一行的作用是什么？-为什么会产生作用？-和BFC撑开空间有什么区别？" class="headerlink" title="6. 以下代码每一行的作用是什么？ 为什么会产生作用？ 和BFC撑开空间有什么区别？"></a><strong>6. 以下代码每一行的作用是什么？ 为什么会产生作用？ 和BFC撑开空间有什么区别？</strong></h4><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">  .clearfix:after&#123;      /*添加`:after`伪类*/</div><div class="line">    content: '';        /*内容是空的*/</div><div class="line">    display: block;     /*空的内容生成块框*/</div><div class="line">    clear: both;    /*清除两边浮动*/</div><div class="line">&#125;</div><div class="line">.clearfix&#123;</div><div class="line">    *zoom: 1;   /*IE的hack语句，为了兼容IE6,7，触发IE的hasLayout特有属性，但不会影响页面的显示效果*/</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<blockquote>
<p>作用：在容器内部最后一个元素创建了一个空的块框，而该块框两则清除了浮动，容器外的其他元素就无法向上挤占了；</p>
</blockquote>
<p>区别：BFC是包含容器内的浮动元素，形成一个封闭的小宇宙，不受外界干扰挤占；而这种方法是通过添加空块来清除浮动，不让其他元素上来，二者的实现思路是完全不一样的；</p>
<hr>
<blockquote>
<h3 id="【代码】"><a href="#【代码】" class="headerlink" title="【代码】"></a>【代码】</h3><h4 id="task-11-1"><a href="#task-11-1" class="headerlink" title="task-11-1"></a><a href="https://github.com/licao404/landemo/blob/master/task11/task-11-1.html" target="_blank" rel="external">task-11-1</a></h4><h4 id="task-11-2"><a href="#task-11-2" class="headerlink" title="task-11-2"></a><a href="https://github.com/licao404/landemo/blob/master/task11/task-11-2.html" target="_blank" rel="external">task-11-2</a></h4></blockquote>
<hr>
]]></content>
      
        <categories>
            
            <category> 编程学习 </category>
            
            <category> 前端基础 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> CSS </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[定位+浮动]]></title>
      <url>http://licao404.com/2016/02/27/%E5%AE%9A%E4%BD%8D-%E6%B5%AE%E5%8A%A8/</url>
      <content type="html"><![CDATA[<blockquote>
<h3 id="【基础知识】"><a href="#【基础知识】" class="headerlink" title="【基础知识】"></a>【基础知识】</h3></blockquote>
<h4 id="1-文档流的概念指什么？有哪种方式可以让元素脱离文档流"><a href="#1-文档流的概念指什么？有哪种方式可以让元素脱离文档流" class="headerlink" title="1. 文档流的概念指什么？有哪种方式可以让元素脱离文档流?"></a><strong>1. 文档流的概念指什么？有哪种方式可以让元素脱离文档流?</strong></h4><ul>
<li>文档流是将窗体自上而下分成一行行，每行按照自左向右的顺序排列元素，从头到尾按照文档的顺序，该在什么位置就在什么位置；网页中大部分对象默认是占用文档流，也有一些对象是不占文档流的，比如表单中隐藏域。</li>
<li>有3种方式可以让元素脱离文档流而存在：浮动（<code>float</code>）、固定定位（<code>position:fixed</code>）、绝对定位（<code>position:absolute</code>）<ul>
<li>浮动元素不占用任何正常文档流空间，而他的定位仍是基于正常文档流；</li>
<li>绝对定位是完全脱离文档流，在文档流中的其他元素将忽略该元素并且填补他原先的位置；</li>
</ul>
</li>
</ul>
<a id="more"></a>
<h4 id="2-有几种定位方式，分别是如何实现定位的，使用场景如何？"><a href="#2-有几种定位方式，分别是如何实现定位的，使用场景如何？" class="headerlink" title="2. 有几种定位方式，分别是如何实现定位的，使用场景如何？"></a><strong>2. 有几种定位方式，分别是如何实现定位的，使用场景如何？</strong></h4><ul>
<li><code>position:static;</code>：静态定位（缺省值）。元素出现在正常的文档流中，忽略<code>top,buttom,left,right,z-index</code>声明；可以用于覆盖之前对position的定义；</li>
<li><code>position:fixed</code>：固定定位，让元素完全脱离文档流，固定在浏览器窗口中某一位置，位置不随页面移动而发生变化。用在一些不想移动的导航栏，固定的广告，信息提醒，咨询联系按钮等<ul>
<li><img src="http://7xr868.com1.z0.glb.clouddn.com/task10fixed.png" alt="fixed"></li>
</ul>
</li>
<li><code>position:relative</code>：相对定位，相对于自己原来在文档流中的位置进行定位，不改变布局（在该元素原来位置留下空白）</li>
<li><code>position:absolute</code>：绝对对定位，相对于与他最近的非static定位的祖先元素来定位，完全脱离文档流，其他文档流中的元素会忽略他的存在</li>
</ul>
<h4 id="3-absolute-relative-fixed-偏移的参考点分别是什么"><a href="#3-absolute-relative-fixed-偏移的参考点分别是什么" class="headerlink" title="3. absolute, relative, fixed 偏移的参考点分别是什么?"></a><strong>3. <code>absolute</code>, <code>relative</code>, <code>fixed</code> 偏移的参考点分别是什么?</strong></h4><blockquote>
<p><code>absolute</code>: 相对于与他最近的非static定位的祖先元素来定位，如果都没有的话就向上对；<br><code>relative</code>：相对于自己原来在文档流中的位置进行定位；<br><code>fixed</code>：相对于浏览器窗口；  </p>
</blockquote>
<h4 id="4-z-index-有什么作用-如何使用"><a href="#4-z-index-有什么作用-如何使用" class="headerlink" title="4. z-index 有什么作用? 如何使用?"></a><strong>4. <code>z-index</code> 有什么作用? 如何使用?</strong></h4><blockquote>
<p>可以设置<code>定位元素</code>显示层级，值越大越在外层。当没有指定z-index的时候， 所有元素都在会被渲染在默认层(0层)；</p>
</blockquote>
<h4 id="5-position-relative和负margin都可以使元素位置发生偏移-二者有什么区别"><a href="#5-position-relative和负margin都可以使元素位置发生偏移-二者有什么区别" class="headerlink" title="5. position:relative和负margin都可以使元素位置发生偏移?二者有什么区别"></a><strong>5. <code>position:relative</code>和负<code>margin</code>都可以使元素位置发生偏移?二者有什么区别</strong></h4><blockquote>
<p><code>position:relative</code>使元素位置发生偏移不会对后来的元素产生影响，他的文档流占位还是之前的位置；显然使用<code>margin</code>偏移有可能影响到其他元素的位置；</p>
</blockquote>
<h4 id="6-如何让一个固定宽高的元素在页面上垂直水平居中"><a href="#6-如何让一个固定宽高的元素在页面上垂直水平居中" class="headerlink" title="6. 如何让一个固定宽高的元素在页面上垂直水平居中?"></a><strong>6. 如何让一个固定宽高的元素在页面上垂直水平居中?</strong></h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">  &lt;style&gt;</div><div class="line">    body&#123;</div><div class="line">      background:gray;</div><div class="line">    &#125;</div><div class="line">    div&#123;</div><div class="line">      position:absolute;</div><div class="line">      top:50%;</div><div class="line">      right:50%;</div><div class="line">      margin:-50px;</div><div class="line">      width:100px;</div><div class="line">      height:100px;</div><div class="line">      background-color:yellow;</div><div class="line">    &#125;</div><div class="line">  &lt;/style&gt;</div><div class="line"></div><div class="line">&lt;body&gt;</div><div class="line">  &lt;div&gt;&lt;/div&gt;</div><div class="line">&lt;/body&gt;</div></pre></td></tr></table></figure>
<p><a href="http://js.jirengu.com/dupahagojo/1/edit" target="_blank" rel="external">&gt;&gt;效果演示</a></p>
<h4 id="7-浮动元素有什么特征？对其他浮动元素、普通元素、文字分别有什么影响"><a href="#7-浮动元素有什么特征？对其他浮动元素、普通元素、文字分别有什么影响" class="headerlink" title="7. 浮动元素有什么特征？对其他浮动元素、普通元素、文字分别有什么影响?"></a><strong>7. 浮动元素有什么特征？对其他浮动元素、普通元素、文字分别有什么影响?</strong></h4><blockquote>
<ol>
<li>浮动的框可以向左向右移动，直到它的外边缘碰到包含框或另一个浮动框的边框为止；</li>
<li>对其他浮动元素会按照渲染顺序显示，对其他普通元素则会覆盖在表层，文字会环绕浮动元素；</li>
</ol>
</blockquote>
<h4 id="8-清除浮动指什么-如何清除浮动"><a href="#8-清除浮动指什么-如何清除浮动" class="headerlink" title="8. 清除浮动指什么? 如何清除浮动?"></a><strong>8. 清除浮动指什么? 如何清除浮动?</strong></h4><blockquote>
<p>元素浮动之后，周围的元素会重新排列，为了避免这种情况，需要清除浮动；</p>
</blockquote>
<ul>
<li>如何清除浮动：</li>
</ul>
<ol>
<li>直接对受影响的元素使用<code>clear</code>属性；</li>
<li>对父亲</li>
</ol>
<hr>
<blockquote>
<h3 id="【代码】"><a href="#【代码】" class="headerlink" title="【代码】"></a>【代码】</h3><h4 id="task-10-1"><a href="#task-10-1" class="headerlink" title="task-10-1"></a><a href="https://github.com/licao404/landemo/blob/master/task10/task-10-1.html" target="_blank" rel="external">task-10-1</a></h4><h4 id="task-10-2"><a href="#task-10-2" class="headerlink" title="task-10-2"></a><a href="https://github.com/licao404/landemo/blob/master/task10/task-10-2.html" target="_blank" rel="external">task-10-2</a></h4></blockquote>
<hr>
]]></content>
      
        <categories>
            
            <category> 编程学习 </category>
            
            <category> 前端基础 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> CSS </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[CSS Sprite/background]]></title>
      <url>http://licao404.com/2016/02/26/CSS_Sprite+background/</url>
      <content type="html"><![CDATA[<blockquote>
<h3 id="【知识点】"><a href="#【知识点】" class="headerlink" title="【知识点】"></a>【知识点】</h3></blockquote>
<h4 id="1-CSS-Sprite-雪碧图-指什么-有什么作用？"><a href="#1-CSS-Sprite-雪碧图-指什么-有什么作用？" class="headerlink" title="1. CSS Sprite(雪碧图)指什么? 有什么作用？"></a><strong>1. CSS Sprite(雪碧图)指什么? 有什么作用？</strong></h4><ul>
<li><code>CSS Sprite</code>又名<code>CSS精灵</code>，一种将零星的小图片合并成一张大图的网络图像应用处理方式，再利用<code>CSS</code>的<code>background-image</code>,<code>background-repeat</code>,<code>background-position</code>进行精确定位所需的小图位置;</li>
</ul>
<a id="more"></a>
<ul>
<li>主要作用：<ul>
<li>可以大量减少页面的http请求，提升页面性能，因为如果是每一张图片都去请求一次，浪费的网络资源是不可想象的；</li>
<li>减少图片的字节；</li>
<li>其他作用和弊端见<a href="http://baike.baidu.com/link?url=WNMBLXrej-HoKJ4OspqtsJdTfgc5_jTRO6a3rcthEVyyKfv2M2jGG4lKlOw69NK1KTjHAPmJb4NttvAhzroB6q" target="_blank" rel="external">度娘百科</a>。</li>
</ul>
</li>
</ul>
<h4 id="2-img标签和CSS背景使用图片在使用场景上有何区别"><a href="#2-img标签和CSS背景使用图片在使用场景上有何区别" class="headerlink" title="2. img标签和CSS背景使用图片在使用场景上有何区别?"></a><strong>2. img标签和CSS背景使用图片在使用场景上有何区别?</strong></h4><blockquote>
<ul>
<li>如果内容（对每个访问者）是恒定不变的，如icon，logo，等，则选择css背景图：<br><img src="http://7xr868.com1.z0.glb.clouddn.com/task9%E8%83%8C%E6%99%AF%E5%9B%BE2.png" alt="icon"><br><img src="http://7xr868.com1.z0.glb.clouddn.com/task9%E8%83%8C%E6%99%AF%E5%9B%BE1.png" alt="logo"></li>
</ul>
</blockquote>
<hr>
<blockquote>
<ul>
<li>如果是变化的内容，比如电商网页上的商品广告（基本上直观理解的图片）都是img标签，还有头像等，他们都是外链到数据库的，可能发生改变：<br><img src="http://7xr868.com1.z0.glb.clouddn.com/task9img.png" alt="img1"><br><img src="http://7xr868.com1.z0.glb.clouddn.com/task9img2.png" alt="img2"></li>
</ul>
</blockquote>
<h4 id="3-title-和-alt属性分别有什么作用"><a href="#3-title-和-alt属性分别有什么作用" class="headerlink" title="3. title 和 alt属性分别有什么作用?"></a><strong>3. title 和 alt属性分别有什么作用?</strong></h4><ul>
<li><code>alt属性</code>是在你的图片因为某种原因不能加载时在页面显示的提示信息(临时代替图片的作用)，它会直接输出在原本加载图片的地方；</li>
<li><code>title属性</code>是在你鼠标悬停在该图片上时显示一个小提示，鼠标离开就没有了，HTML的绝大多数标签都支持<code>title属性</code>，<code>title属性</code>就是专门做提示信息的，比如：<img src="http://7xr868.com1.z0.glb.clouddn.com/task9title.png" alt="title"></li>
</ul>
<h4 id="4-background-url-abc-png-0-0-no-repeat-这句话是什么意思"><a href="#4-background-url-abc-png-0-0-no-repeat-这句话是什么意思" class="headerlink" title="4. background: url(abc.png) 0 0 no-repeat;这句话是什么意思"></a><strong>4. <code>background: url(abc.png) 0 0 no-repeat;</code>这句话是什么意思</strong></h4><blockquote>
<p>设置背景图片为<code>abc.png</code>,要显示位置是水平0，垂直0，重复方式是不重复</p>
</blockquote>
<h4 id="5-background-size有什么作用-兼容性如何-常用的值是"><a href="#5-background-size有什么作用-兼容性如何-常用的值是" class="headerlink" title="5. background-size有什么作用? 兼容性如何? 常用的值是?"></a><strong>5. background-size有什么作用? 兼容性如何? 常用的值是?</strong></h4><ul>
<li><code>background-size</code>可以设置css背景图片的大小，以长度值和百分比显示；也可以根据背景原点位置<code>background-origin</code>设置图片的覆盖范围。</li>
<li><p>在<a href="http://caniuse.com/#search=background-size" target="_blank" rel="external">Caniuse</a>上查到兼容性为：</p>
<ul>
<li><img src="http://7xr868.com1.z0.glb.clouddn.com/task9background-size%E5%85%BC%E5%AE%B9%E6%80%A7.png" alt="background-size兼容性"></li>
<li>让<code>IE6,7,8</code>兼容<code>background-size</code>的方法：使用IE的滤镜<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">&lt;style&gt;</div><div class="line">.background &#123;</div><div class="line">    background-image:url('http://7xr868.com1.z0.glb.clouddn.com/task6inline-block%E6%94%AF%E6%8C%81.png');</div><div class="line">    background-size: cover;</div><div class="line">    filter: progid:DXImageTransform.Microsoft.AlphaImageLoader(</div><div class="line">    src='http://7xr868.com1.z0.glb.clouddn.com/task6inline-block%E6%94%AF%E6%8C%81.png',</div><div class="line">    sizingMethod='scale');</div><div class="line">&#125;</div><div class="line">&lt;/style&gt;</div></pre></td></tr></table></figure>
</li>
</ul>
</li>
<li><p>常用的值:</p>
<ul>
<li><code>auto</code>：默认值，不改变背景图片的原始高度和宽度；</li>
<li><code>length</code>：第一个值为设置图片宽度，第二个值为图片的高度；但是不管是用什么值，都不能为负值。假如只给定一个值，那么第二个自动的为 <code>auto</code>；</li>
<li><code>percentage</code>：以父元素的百分比来设置背景图像的宽度和高度。设置一个值，同上；</li>
<li><code>cover</code>： 将图片等比例缩放来填满整个容器，加入容器不足以包含背景图片，则一些部分不会显示在容器中；</li>
<li><code>contain</code>：按比例调整背景图片，使得其图片宽高比自适应整个元素容器的宽高比，因此假如指定的图片尺寸过大，而容器的整体宽高不能恰好包含背景图片的话，那么其容器某些区域可能会有空白。</li>
</ul>
</li>
</ul>
<h4 id="6-如何让一个div水平居中？如何让图片水平居中"><a href="#6-如何让一个div水平居中？如何让图片水平居中" class="headerlink" title="6. 如何让一个div水平居中？如何让图片水平居中?"></a><strong>6. 如何让一个div水平居中？如何让图片水平居中?</strong></h4><ol>
<li>设置div的左右<code>margin-left</code>,<code>margin-right</code>值为<code>auto</code> &gt;&gt;<a href="http://js.jirengu.com/laziqaqaki/3/edit" target="_blank" rel="external">代码演示</a>；<br>2.<ul>
<li>给图片加一个父容器，设置容器样式<code>text-align:center</code>&gt;&gt;<a href="http://js.jirengu.com/yudajuveye/2/edit" target="_blank" rel="external">代码演示</a>；</li>
<li>将img用<code>display:block</code>变为块级元素，然后设置<code>左右margin</code>值为<code>auto</code>，类似于1中设置<code>div</code>水平居中&gt;&gt;<a href="http://js.jirengu.com/vuyuliseni/1/edit" target="_blank" rel="external">代码演示</a>；</li>
</ul>
</li>
</ol>
<h4 id="7-如何设置元素透明-兼容性？"><a href="#7-如何设置元素透明-兼容性？" class="headerlink" title="7. 如何设置元素透明? 兼容性？"></a><strong>7. 如何设置元素透明? 兼容性？</strong></h4><blockquote>
<ol>
<li><code>opacity：number</code>属性(CSS3属性)指定了一个元素的透明度,默认<code>number</code>是1（不透明），0是完全透明，<a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/opacity" target="_blank" rel="external">（更多）</a>。兼容性：<img src="http://7xr868.com1.z0.glb.clouddn.com/task9opacity%E5%85%BC%E5%AE%B9%E6%80%A7.png" alt="opacity兼容性"></li>
<li><code>filter:alpha(opacity=number);</code>是专门给IE设定的属性，<code>number</code>取值的范围在<code>0-100</code>之间；兼容性：（一般用在IE8及以下）<img src="http://7xr868.com1.z0.glb.clouddn.com/task9filter%E5%85%BC%E5%AE%B9%E6%80%A7.png" alt="filter兼容性"></li>
<li>一段常用代码设置元素透明度：</li>
</ol>
</blockquote>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">.transparent_class &#123;</div><div class="line">      filter:alpha(opacity=50);</div><div class="line">      -moz-opacity:0.5;/*-moz-opacity是为了兼容一些老版本的Mozilla浏览器*/</div><div class="line">      -khtml-opacity: 0.5;/*-khtml-opacity是为了兼容一些老版本的Safari浏览器*/</div><div class="line">      opacity: 0.5;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<blockquote>
<p>4.<a href="http://www.jb51.net/css/24765.html" target="_blank" rel="external">更详细的实现方案</a></p>
</blockquote>
<h4 id="8-opacity-和-rgba都能设置透明，有什么区别"><a href="#8-opacity-和-rgba都能设置透明，有什么区别" class="headerlink" title="8. opacity 和 rgba都能设置透明，有什么区别?"></a><strong>8. opacity 和 rgba都能设置透明，有什么区别?</strong></h4><blockquote>
<p><code>opacity</code>作用于<code>元素</code>，以及元素内的所有<code>内容</code>的透明度，而<code>rgba()</code>只作用于元素的<code>颜色</code>或其<code>背景色</code>。</p>
</blockquote>
<hr>
<blockquote>
<h3 id="【代码】"><a href="#【代码】" class="headerlink" title="【代码】"></a>【代码】</h3><h4 id="task-9-1"><a href="#task-9-1" class="headerlink" title="task-9-1"></a><a href="https://github.com/licao404/landemo/blob/master/task9/task-9-1.html" target="_blank" rel="external">task-9-1</a></h4><h4 id="task-9-2"><a href="#task-9-2" class="headerlink" title="task-9-2"></a><a href="https://github.com/licao404/landemo/blob/master/task9/task-9-2.html" target="_blank" rel="external">task-9-2</a></h4><h4 id="task-9-3"><a href="#task-9-3" class="headerlink" title="task-9-3"></a><a href="https://github.com/licao404/landemo/blob/master/task9/task-9-1.html" target="_blank" rel="external">task-9-3</a></h4></blockquote>
<hr>
]]></content>
      
        <categories>
            
            <category> 编程学习 </category>
            
            <category> 前端基础 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> CSS </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[CSS选择器]]></title>
      <url>http://licao404.com/2016/02/25/CSS%E9%80%89%E6%8B%A9%E5%99%A8/</url>
      <content type="html"><![CDATA[<blockquote>
<h3 id="【基础知识】"><a href="#【基础知识】" class="headerlink" title="【基础知识】"></a>【基础知识】</h3></blockquote>
<h4 id="1-CSS选择器常见的有几种"><a href="#1-CSS选择器常见的有几种" class="headerlink" title="1. CSS选择器常见的有几种?"></a><strong>1. CSS选择器常见的有几种?</strong></h4><blockquote>
<p>通配选择器(<code>*</code>)、标签选择器(<code>element</code>)、id选择器(<code>#id</code>)、类选择器(<code>.class</code>)、伪类选择器(<code>E:hover</code>等)、属性选择器(<code>E[atter=value]</code>等)、组合选择器(<code>E&gt;F</code>等)、伪元素选择器(<code>E::first-letter</code>等)</p>
</blockquote>
<a id="more"></a>
<h4 id="2-选择器的优先级是怎样的"><a href="#2-选择器的优先级是怎样的" class="headerlink" title="2. 选择器的优先级是怎样的?"></a><strong>2. 选择器的优先级是怎样的?</strong></h4><blockquote>
<p>一般而言，选择器越特殊，它的优先级越高。也就是选择器指向的越准确，它的优先级就越高。</p>
</blockquote>
<ul>
<li>常见选择器优先级排序（从高到低）：<ol>
<li>在属性后面使用 <code>!important</code> 会覆盖页面内任何位置定义的元素样式；</li>
<li>作为style属性写在元素标签上的内联样式；</li>
<li>id选择器；</li>
<li>类选择器；</li>
<li>伪类选择器；</li>
<li>属性选择器；</li>
<li>标签选择器；</li>
<li>通配选择器；</li>
<li>浏览器自定义</li>
</ol>
</li>
</ul>
<ul>
<li>CSS规则由多个选择器组成,通常我们用1表示标签名选择器的优先级，用10表示类选择 器的优先级，用100标示ID选择器的优先级。比如<code>.polaris span {color:red;}</code>的选择器优先级是 10 + 1 也就是11；而 <code>.polaris</code>的优先级是10；浏览器自然会显示红色的字。</li>
<li>如果两个选择器规权值就是一样,后面的覆盖前面的！如下<code>div</code>文案的颜色为<code>#666</code>  <figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">div</span> &#123;<span class="attribute">color</span>: <span class="number">#333</span>;&#125;</div><div class="line">....</div><div class="line"><span class="selector-tag">div</span> &#123;<span class="attribute">color</span>: <span class="number">#666</span>;&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
<h4 id="3-class-和-id-的使用场景"><a href="#3-class-和-id-的使用场景" class="headerlink" title="3. class 和 id 的使用场景?"></a><strong>3. class 和 id 的使用场景?</strong></h4><blockquote>
<ul>
<li>在对页面排版进行结构化布局时（比如说通常一个页面都是由一个页眉，一个报头<masthead>，一个内容区域<code>content</code>和一个页脚<code>footer</code>等组成），一般使用id比较理想，因为一个id在一个文档中只能被使用一次。而这些元素在同一页面中 很少会出现大于一次的情况。</masthead></li>
<li>class更多的被应用到文字版块以及页面修饰等方面</li>
</ul>
</blockquote>
<h4 id="4-使用CSS选择器时为什么要划定适当的命名空间？"><a href="#4-使用CSS选择器时为什么要划定适当的命名空间？" class="headerlink" title="4. 使用CSS选择器时为什么要划定适当的命名空间？"></a><strong>4. 使用CSS选择器时为什么要划定适当的命名空间？</strong></h4><ul>
<li>使用适当的命名空间可以让选择器只对所选的命名空间有效，避免与其他元素冲突。</li>
</ul>
<h4 id="5-以下选择器分别是什么意思"><a href="#5-以下选择器分别是什么意思" class="headerlink" title="5. 以下选择器分别是什么意思?"></a><strong>5. 以下选择器分别是什么意思?</strong></h4><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="selector-id">#header</span>&#123;        <span class="comment">/*定位id为header的元素*/</span></div><div class="line">&#125;</div><div class="line"><span class="selector-class">.header</span>&#123;        <span class="comment">/*定位class为header的元素*/</span></div><div class="line">&#125;</div><div class="line"><span class="selector-class">.header</span> <span class="selector-class">.logo</span>&#123;</div><div class="line">&#125;               <span class="comment">/*定位class为header元素的后代中所有class为logo的元素*/</span></div><div class="line"><span class="selector-class">.header</span><span class="selector-class">.mobile</span>&#123; <span class="comment">/*同时定位class为header的元素和class为mobile的元素*/</span></div><div class="line">&#125;</div><div class="line"><span class="selector-class">.header</span> <span class="selector-tag">p</span>, <span class="selector-class">.header</span> <span class="selector-tag">h3</span>&#123;<span class="comment">/*同时定位class为header元素下所有的p元素和h3元素*/</span></div><div class="line">&#125;</div><div class="line"><span class="selector-id">#header</span> <span class="selector-class">.nav</span>&gt;<span class="selector-tag">li</span>&#123; <span class="comment">/*id为header的元素后代中class为nav元素的直接li元素*/</span></div><div class="line">&#125;</div><div class="line"><span class="selector-id">#header</span> <span class="selector-tag">a</span><span class="selector-pseudo">:hover</span>&#123; <span class="comment">/*id为header元素的后代中所有a标签的hover状态*/</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="6-列出你知道的伪类选择器"><a href="#6-列出你知道的伪类选择器" class="headerlink" title="6. 列出你知道的伪类选择器"></a><strong>6. 列出你知道的伪类选择器</strong></h4><ul>
<li><code>E:hover</code>鼠标悬浮在上的元素</li>
<li><code>a:link</code>鼠标未被点击的链接</li>
<li><code>E:active</code>鼠标按住的元素</li>
<li><code>a:visited</code>鼠标已点击的链接</li>
<li><code>E:focus</code>获得焦点的</li>
<li><code>E:first-child</code>E的父元素的第一个子元素</li>
<li><code>E:nth-child(n)</code>E的父元素下第n个子元素</li>
<li><code>E:first-of-type</code>E的父元素下使用同种标签的第一个元素</li>
<li><code>E:nth-of-type</code>E的父元素下使用同种标签的第n个元素  </li>
</ul>
<h4 id="7-first-child和-first-of-type的作用和区别"><a href="#7-first-child和-first-of-type的作用和区别" class="headerlink" title="7. :first-child和:first-of-type的作用和区别?"></a><strong>7. <code>:first-child</code>和<code>:first-of-type</code>的作用和区别?</strong></h4><blockquote>
<p><code>:first-child</code>定位的是其父的第一个子元素；<br><code>:first-of-type</code>定位的是其父下同种标签的第一个子元素；<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">&lt;body&gt;</div><div class="line">    &lt;h3&gt;我是h3&lt;/h3&gt;</div><div class="line">	&lt;p&gt;我是p1&lt;/p&gt;</div><div class="line">	&lt;div class=&quot;div1&quot;&gt;</div><div class="line">		&lt;p&gt;我是p3&lt;/p&gt;</div><div class="line">		&lt;p&gt;我是p4&lt;/p&gt;</div><div class="line">		&lt;p&gt;我是p5&lt;/p&gt;</div><div class="line">	&lt;/div&gt;</div><div class="line">&lt;/body&gt;</div></pre></td></tr></table></figure></p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">p:first-child &#123;border: 1px solid red;&#125;</div><div class="line">/*此时定位的只是p3而没有p1*/</div><div class="line">p:first-of-type &#123;border: 1px solid red;&#125;</div><div class="line">/*此时定位的是p1，p3*/</div></pre></td></tr></table></figure>
<h4 id="8-运行如下代码，解析下输出样式的原因。"><a href="#8-运行如下代码，解析下输出样式的原因。" class="headerlink" title="8. 运行如下代码，解析下输出样式的原因。"></a><strong>8. 运行如下代码，解析下输出样式的原因。</strong></h4><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>first-child  vs first-of-child<span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="css"></span></div><div class="line">    <span class="comment">/*选中.item1,该元素是它父亲的第一个孩子*/</span></div><div class="line">    <span class="selector-class">.item1</span><span class="selector-pseudo">:first-of-type</span>&#123;</div><div class="line">      <span class="attribute">background</span>: red;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/*选中.item1,该元素是它父亲所有的 .item1孩子中的第一个*/</span></div><div class="line">    <span class="selector-class">.item1</span><span class="selector-pseudo">:first-child</span>&#123;</div><div class="line">      <span class="attribute">color</span>: blue;</div><div class="line">    &#125;</div><div class="line">  <span class="tag">&lt;/<span class="name">style</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line"></div><div class="line"> <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"item1"</span>&gt;</span>item1<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"> <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"ct"</span>&gt;</span></div><div class="line">   <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"item2"</span>&gt;</span>ct-item2<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">   <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"item1"</span>&gt;</span>ct-item1<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">   <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"item1"</span>&gt;</span>ct-itmm1<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">   <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"item2"</span>&gt;</span></div><div class="line">     <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"item1"</span>&gt;</span>ct-item2-item1<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">   <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"> <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>
<blockquote>
<ul>
<li><code>.item1:first-child{color: blue;}</code>定位的是class为item1元素的父元素的第一个子元素，所以<code>item1</code>、<br><code>ct-item2-item1</code>有效,文本为蓝色;</li>
<li><code>.item1:first-of-type{background: red;</code> 定位clss为<code>item1</code>且为父亲的第一个子元素，则只有<code>item1</code>、<br><code>ct-item2-item1</code>有效，背景为红色</li>
</ul>
</blockquote>
<h4 id="9-text-align-center的作用是什么，作用在什么元素上？能让什么元素水平居中"><a href="#9-text-align-center的作用是什么，作用在什么元素上？能让什么元素水平居中" class="headerlink" title="9. text-align: center的作用是什么，作用在什么元素上？能让什么元素水平居中"></a><strong>9. <code>text-align: center</code>的作用是什么，作用在什么元素上？能让什么元素水平居中</strong></h4><blockquote>
<ul>
<li>让元素水平居中</li>
<li>作用在块级元素上</li>
<li>让块级元素内的行内元素水平居中</li>
</ul>
</blockquote>
<h4 id="10-如果遇到一个属性想知道兼容性，在哪查看"><a href="#10-如果遇到一个属性想知道兼容性，在哪查看" class="headerlink" title="10. 如果遇到一个属性想知道兼容性，在哪查看?"></a><strong>10. 如果遇到一个属性想知道兼容性，在哪查看?</strong></h4><blockquote>
<p>可以在网站<a href="http://caniuse.com" target="_blank" rel="external">Caniuse</a>查询浏览器兼容性！</p>
</blockquote>
<hr>
<blockquote>
<h3 id="【代码】"><a href="#【代码】" class="headerlink" title="【代码】"></a>【代码】</h3><h4 id="task-8-1"><a href="#task-8-1" class="headerlink" title="task-8-1"></a><a href="https://github.com/licao404/landemo/blob/master/task8/task-8-1.html" target="_blank" rel="external">task-8-1</a></h4><h4 id="task-8-2"><a href="#task-8-2" class="headerlink" title="task-8-2"></a><a href="https://github.com/licao404/landemo/blob/master/task8/task-8-2.html" target="_blank" rel="external">task-8-2</a></h4></blockquote>
<hr>
]]></content>
      
        <categories>
            
            <category> 编程学习 </category>
            
            <category> 前端基础 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> CSS </tag>
            
        </tags>
        
    </entry>
    
  
  
</search>
