<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>LanLan&#39;s Notes</title>
  <subtitle>Daily notes</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://licao404.com/"/>
  <updated>2017-02-25T18:17:26.680Z</updated>
  <id>http://licao404.com/</id>
  
  <author>
    <name>蓝岚</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>三亚看海</title>
    <link href="http://licao404.com/2017/01/14/%E4%B8%89%E4%BA%9A%E7%9C%8B%E6%B5%B7/"/>
    <id>http://licao404.com/2017/01/14/三亚看海/</id>
    <published>2017-01-13T16:23:12.000Z</published>
    <updated>2017-02-25T18:17:26.680Z</updated>
    
    <content type="html"><![CDATA[<div class="group-picture"><div class="group-picture-container"><div class="group-picture-row"><div class="group-picture-column" style="width: 100%;"><img src="http://7xrvo9.com1.z0.glb.clouddn.com/2017sanyaYDXJ0964_puzzle_36715x2.jpg" alt=""></div></div><div class="group-picture-row"><div class="group-picture-column" style="width: 50%;"><img src="http://7xrvo9.com1.z0.glb.clouddn.com/2017sanyaYDXJ1170_puzzle_17948x0.jpg" alt=""></div><div class="group-picture-column" style="width: 50%;"><img src="http://7xrvo9.com1.z0.glb.clouddn.com/2017sanyaYDXJ0963_puzzle_16157x0.jpg" alt=""></div></div></div></div>
<a id="more"></a>
<blockquote class="blockquote-center">分界洲岛</blockquote>

<iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width="330" height="86" src="//music.163.com/outchain/player?type=2&id=28700964&auto=0&height=66"></iframe>

<p><img src="http://7xrvo9.com1.z0.glb.clouddn.com/2017sanyaYDXJ0947_puzzle_49788x3.jpg" alt=""></p>
<blockquote>
<p>漂亮的小海岛，想起后会无期</p>
</blockquote>
<p>公司Outing，冲绳、岘港、济州岛、三亚等可选，选择去的三亚（主要是没护照）。<br>行程第二天下午到分界洲岛，阳光大好，第一次看海。</p>
<p><img src="http://7xrvo9.com1.z0.glb.clouddn.com/2017sanyaYDXJ1010_puzzle_73374x3.jpg" alt=""></p>
<blockquote>
<p>一月份气温20℃左右，衬衫一件，舒适宜人</p>
</blockquote>
<p><img src="http://7xrvo9.com1.z0.glb.clouddn.com/2017sanyaIMG_20170214_230826.jpg" alt=""></p>
<blockquote>
<p>白色细沙滩，宝石蓝绿的海水，婚纱照圣地</p>
</blockquote>
<blockquote class="blockquote-center">大小洞天等</blockquote>

<p><img src="http://7xrvo9.com1.z0.glb.clouddn.com/2017sanyaYDXJ1180_pic_edit_20170212220335.jpg" alt=""></p>
<blockquote>
<p>葛优躺在礁石上晒咸鱼，年轻人会变懒</p>
</blockquote>
<p><img src="http://7xrvo9.com1.z0.glb.clouddn.com/2017sanyaYDXJ1170_puzzle_61619x1.jpg" alt=""></p>
<blockquote>
<p>这一带都是礁石滩，视野相当宽阔，海平面分明</p>
</blockquote>
<p><img src="http://7xrvo9.com1.z0.glb.clouddn.com/2017sanyaYDXJ1198_puzzle_75431x2.jpg" alt=""></p>
<blockquote>
<p>可以下海摸鱼，借用下灿灿的背影</p>
</blockquote>
<p><img src="http://7xrvo9.com1.z0.glb.clouddn.com/2017sanyaYDXJ1218_puzzle_21492x3.jpg" alt=""></p>
<hr>
]]></content>
    
    <summary type="html">
    
      &lt;div class=&quot;group-picture&quot;&gt;&lt;div class=&quot;group-picture-container&quot;&gt;&lt;div class=&quot;group-picture-row&quot;&gt;&lt;div class=&quot;group-picture-column&quot;  style=&quot;width: 100%;&quot;&gt;&lt;img src=&quot;http://7xrvo9.com1.z0.glb.clouddn.com/2017sanyaYDXJ0964_puzzle_36715x2.jpg&quot; alt=&quot;&quot;&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;group-picture-row&quot;&gt;&lt;div class=&quot;group-picture-column&quot;  style=&quot;width: 50%;&quot;&gt;&lt;img src=&quot;http://7xrvo9.com1.z0.glb.clouddn.com/2017sanyaYDXJ1170_puzzle_17948x0.jpg&quot; alt=&quot;&quot;&gt;&lt;/div&gt;&lt;div class=&quot;group-picture-column&quot;  style=&quot;width: 50%;&quot;&gt;&lt;img src=&quot;http://7xrvo9.com1.z0.glb.clouddn.com/2017sanyaYDXJ0963_puzzle_16157x0.jpg&quot; alt=&quot;&quot;&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;
    
    </summary>
    
      <category term="随想" scheme="http://licao404.com/categories/%E9%9A%8F%E6%83%B3/"/>
    
      <category term="摄影" scheme="http://licao404.com/categories/%E9%9A%8F%E6%83%B3/%E6%91%84%E5%BD%B1/"/>
    
    
      <category term="杂谈" scheme="http://licao404.com/tags/%E6%9D%82%E8%B0%88/"/>
    
      <category term="看看" scheme="http://licao404.com/tags/%E7%9C%8B%E7%9C%8B/"/>
    
      <category term="随手拍" scheme="http://licao404.com/tags/%E9%9A%8F%E6%89%8B%E6%8B%8D/"/>
    
  </entry>
  
  <entry>
    <title>能做喜欢做的-就很好</title>
    <link href="http://licao404.com/2016/07/17/%E8%83%BD%E5%81%9A%E5%96%9C%E6%AC%A2%E5%81%9A%E7%9A%84-%E5%B0%B1%E5%BE%88%E5%A5%BD/"/>
    <id>http://licao404.com/2016/07/17/能做喜欢做的-就很好/</id>
    <published>2016-07-17T15:58:04.000Z</published>
    <updated>2016-08-02T15:45:27.102Z</updated>
    
    <content type="html"><![CDATA[<span itemprop="image" itemscope="" itemtype="http://schema.org/ImageObject"><img itemprop="url image" src="http://7xrvo9.com1.z0.glb.clouddn.com/20160716/%E8%8D%B7%E8%8A%B1.jpg" class="full-image"><meta itemprop="width" content="auto"><meta itemprop="height" content="auto"></span>
<blockquote class="blockquote-center">想来已然是好久没有更新过博客了。六月底匆忙结束了学校的事情，七月出头从南京赶赴杭州，开启一段全新的历程（蓄谋已久），其中的酸爽体验都让我差点忘了还有本站点，哭瞎-。- 不一样的感觉、不一样的环境、不一样的一群人，两个礼拜下来都有新的体验，技术也好，思考方式也罢，一切都还是入坑的开始…</blockquote>

<a id="more"></a>
<blockquote>
<p>首图为杭州西湖夏荷</p>
</blockquote>
<embed src="http://music.163.com/style/swf/widget.swf?sid=405677015&type=0&auto=0&width=310&height=90" width="330" height="110" allownetworking="all">

<hr>
<p>一直想把自己这一年多来的想法和经历写写，关于技术，关于诗和远方…然而一直搁浅到现在，觉得时候未到，即便现在也是不太成熟。过了暑假就是大四，所以归根结底还是一名学生，大部分见识和想法都不及业内前辈全面且深入，在大部分事情上都秉着求知若渴的谦卑态度。很庆幸现在做着自己喜欢的事情，在当初选择的领域上保持着满血的激情。</p>
<h3 id="我的故事"><a href="#我的故事" class="headerlink" title="# 我的故事"></a># 我的故事</h3><p>这是个普通而忧伤的故事（BGM）。</p>
<p>事情是这样的，本屌丝码农（以前是屌丝，现在是码农…依旧屌丝）去年暑假在软件大道实习（干的是产品+运营+测试，握草…小公司太压榨人了-。-）后，接触到前端开发这类猿，开始YY在咖啡厅，一台Mac、一行js代码能改变世界的惬意工作（事实很伤感X1），遂抱着誓死不干屌丝“电子”（偏硬）的决心，决定跳出电子专业的坑（当年图样图森破，泪…），开始苦逼的前端自学。</p>
<p>从菜鸟开始干，不求人生巅峰，但求干点合心意的事，事实很伤感X2，只是从一个坑跳入另外一个更大更深的坑，不同的是乐在其中。期间经历坑坑洼洼一年有余，和大部分过来人的经历无异，白天拼命看视频和刷书、翻阅文档、敲代码熬到半夜(用的是青轴，室友没打死我也是含泪感激)、凌晨打鸡血写博客、积累代码、参与团队项目,开发简单的上线产品、每天看点微信公众号、现在收藏夹里一大堆大牛的博客，线上也认识了不少前端战友、大牛工程师，给予我许多帮助，一起交流技术、经历，分享经验，相互鼓励。享受前端带来的开放和平等，享受成果孕育而出的成就感。</p>
<p><img src="http://7xrvo9.com1.z0.glb.clouddn.com/20160716/%E5%85%AC%E5%8F%B8.jpg" alt=""></p>
<blockquote>
<p>公司一角</p>
</blockquote>
<p>六月份的时候按照自己的计划拿到了不算差的实习offer，并决定来杭州，进了现在的公司（深感属于浙大系）。（广告插播,可忽略-&gt;）目前一切甚好，简单、专注、开放的价值观，有激情的小伙伴，大牛云集，技术氛围浓厚，CEO、CTO工位和普通员工一样，多样化的业务，逼格爆满的办公地点和环境，福利待遇行业靠上（有钱），正极速地持续拓展中（预计一年内会达到500人），目前一直招人（实习、应届都没问题），有意向的小伙伴可以发简历到我邮箱（邮箱见左边站点概览），不限前端，后端、算法、设计、交互等，详细想了解的细节可以在文章下面评论框提问（&lt;-广告插播完毕，HR姐姐会感谢我的）。</p>
<h3 id="说说前端"><a href="#说说前端" class="headerlink" title="# 说说前端"></a># 说说前端</h3><h4 id="1-系统且扎实"><a href="#1-系统且扎实" class="headerlink" title="1.系统且扎实"></a>1.系统且扎实</h4><p>前端正式成为一个岗位发展起来的时间还是很短的，初级前端的入门是不太高的，基本上看几天 <code>W3CSchool</code> 掌握了基本的HTML、CSS和切图知识就能写出静态页面了，满足大部分公司日常的运营页面、活动页面需求，这也是我来公司这两个礼拜刚开始做的工作，写了几个活动页面，基本上纯静态页面，最多有一个表单验证（很简单的接口），这种工作也是俗称的切图仔，谁不是这样过来呢。静态页面出效果简单，但合理的页面布局，合乎规范，语义化的标签使用、命名是区别新人和老司机的标杆，这一切很基础也很重要，关乎SEO和性能，所以在一些大公司会有一些专门做页面重构的部门，一般都是精通HTML、CSS、W3C规范的妹纸。</p>
<p>在前面的基础之上最后的效果是像素级还原设计稿（真TM是1像素都不放过，人道呢），让UI满意。这还不够，如果用户用的是IE8甚至版本更低的浏览器，也要保证你的页面是OK的，检验方式可以是将不同浏览器上的效果截图放入<code>Photoshop</code>与设计图做重合度对比验证，听起来对新人很变态，但这就是基本功。这需要你深入理解各个元素属性以及他们在不同浏览器上的兼容情况，并熟练浏览器兼容解决方法，尽可能减少因浏览器版本不同带来的体验差异，但也要考虑业务的实际情况。其实一个全面兼顾的静态页面也不太简单，当然随着浏览器的升级换代兼容性处理的能力也逐步弱化，大多数情况下不会遇到苛刻的兼容性要求。</p>
<p>深入理解每一个知识点、每一个元素、每一个属性，以及但他们组合在一起时候的化学反应，相互影响一般是初学者会忽视的地方，这基本上无可避免（做的不够多，实践一次积累一次）。随着入行工作时间的增长和经验加持一般都是会不断的再学习，逐渐加深理解，当达到手速快到不加思考就能秒出符合以上要求的静态页，这样静态页的功底算是炉火纯青了。网上优秀的代码规范很多，也许你刚开始按照规范写，以为自己会写规范化代码，简历上也牛逼的写着，然而这几年前端大牛还是那几个，前端初学者一大堆，入门门槛依然比较低。这是机会也是该看清的，踏实学习比每天追求新技术来的靠谱，当然使用新技术不是什么坏事，不过一切都得建立在你喜欢的基础上，为之付出精力是值得的，学习总是有好处的。</p>
<h4 id="2-深入再深入"><a href="#2-深入再深入" class="headerlink" title="2.深入再深入"></a>2.深入再深入</h4><p><img src="http://7xrvo9.com1.z0.glb.clouddn.com/20160716/post-bg-js-version.jpg" alt=""></p>
<p>我想前端基础有意思的部分可能是深入理解原生JavaScript、DOM、BOM，在此基础上熟练使用jQuery等js库，你会发现你是个造物者，利用DOM操作页面上的一切，利用ajax交互数据让你的页面活络起来。这里你会愈加深切的体悟到你就是个彻头彻尾的屌丝程序猿，每天花大量时间在调试程序上，因为会一直遇到问题。做一些可复用组件、通用jQuery插件来提高效率，实现一些炫酷的js动画，可以开始沉淀自己的代码仓库，这时候可以胜任一般的前端业务，这段时期需要大量代码来练手，不断写就是了，特别要注意采用一些设计模式来写代码，注重代码可复用性，封装性，模块化的思想，程序员面向对象编程是必须的（据说有面向工资的，是B厂员工么）。</p>
<p>学习并且实践完js的一些核心概念后才基本对前端有了一个大致清晰的认识,尝试做一些有意思的项目，有机会参与开源项目更好。参与团队协作的项目，了解互联网项目开发流程，如何做到和队友不互相伤害（然并卵…），过程并且会用到一些高效工具，例如<code>less</code>或<code>sass</code>等css预处理工具、<code>requireJS</code>模块化、<code>Gulp</code>自动化流程（当然会有更高级的<code>Webpack</code>）、<code>NPM</code>等,前端工具太多了，要用就去看文档吧；有兴趣的话可以阅读下<code>jQuery</code>以及<code>Bootstrap</code>的源码，相信这比自己作死敲代码来得更爽快，并且能更深入理解技术原理，来龙去脉熟稔于心。</p>
<h4 id="3-想学啥就学吧"><a href="#3-想学啥就学吧" class="headerlink" title="3.想学啥就学吧"></a>3.想学啥就学吧</h4><p>上面的基础如果打点妥当，可以关注并学习下前端新动向。例如<code>ECMA2015</code>的新特性新语法，据说之后<code>ECMAScript</code>会步入每年规范化的道路，这意味着这门语言会更加强大，更新周期也会缩短，关注下新标准有恃无恐，毕竟是吃饭的家伙。同时，如果你对服务器后端感兴趣，<code>NoodJs</code>会成为你轻易涉足的利器，利用<code>Express</code>搭建个博客也是入门的不错选择，<code>NoodJs</code>是个好东西，大前端不是梦。之后，便可以看新技术啦，轻量的<code>MVVM</code>框架<code>Vue</code>,近年来如火如荼的<code>Angular</code>和<code>React</code>，包括最新的<code>React Native</code>,不过不太建议一股脑学习，根据个人喜好和项目需要进行学习使用方是良策。</p>
<p><img src="http://7xrvo9.com1.z0.glb.clouddn.com/20160527/post-bg-re-vs-ng2.jpg" alt=""></p>
<p>至于移动端，现在叫无线前端，或者说是具有中国特色的<code>H5</code>工程师，看个人兴趣吧，掌握最新的HTML标准，目前而言能用CSS3做出炫酷的动画基本上也能胜任。数学好，会<code>canvas</code>,还可以利用一些插件或动画库做一些小游戏（出现了很火很专业很强大的H5游戏引擎），也是加分项，撩妹杀手锏呀，就冲这点值了（表白，生日，纪念啥的，开始YY）。</p>
<p>前端体系看似多而杂，好用的工具一箩筐，新技术层出不穷，开源库和框架挑花眼，今天又出了个没听过的词汇，好项目遍地走…. 个人而言握住基本功是关键，这是上手新东西的有力保障，千变万变离不开一些本质的东西。</p>
<h3 id="诗和远方"><a href="#诗和远方" class="headerlink" title="# 诗和远方"></a># 诗和远方</h3><p>前端就像个大坑，而且越挖越大，很多不明不白的往里面跳，挖了一会不见有水，便四处拓宽挖掘面积，以为别处有水。如此一来坑只会变成洼地，不会有井。前端大部分是没有科班出身，高校目前也没有设置前端专业，前端行业的从业人员大部分是所谓野路子出身，一切手法都是自己摸索出来的。我个人也不是纯计算机专业出身，学的电子，应该还算计算机相关专业，粗略学过一些C/C++,数据结构，操作系统，计算机网络等，然而随着你想深入挖掘这个行业，这些东西会逐渐显现出他们的支撑作用，解决问题的思维，技术背后的原理。我想如果想挖到水，想持续深耕这个领域，或者应对未知的变化，这些东西势必是要深入补一补，毕竟努力的人总不会得不到眷顾，这也是很多小伙伴们的顾虑。</p>
<p><img src="http://7xrvo9.com1.z0.glb.clouddn.com/20160716/wallhaven-216757.jpg" alt=""></p>
<p>对于前端，我还是个初入行业的新人，要向小伙伴们学习的太多太多，我渴望开放的交流，付出我的努力，推动行业发展，至今仍YY一行js代码改变世界，貌似最近看到了知乎上有相关话题了。</p>
<p>对于当时的决定，我还是暗暗感激自己的，起码换坑以来一直是在做喜欢做的事情，并且有底气去遐想诗和远方。昨晚和老爸打电话，聊到后面，问：“你一个人在杭州会不会感到孤独？”，我：“……（难得酸涩，沉默了）”。沉默并不是真的孤独，而是这么久了，似乎没想过他们是不是会孤独，诗和远方该有他们。</p>
<p>深夜码完这些想说很久的话，依旧鸡血加持，恍惚一切才开始…</p>
<hr>
]]></content>
    
    <summary type="html">
    
      &lt;span itemprop=&quot;image&quot; itemscope itemtype=&quot;http://schema.org/ImageObject&quot;&gt;&lt;img itemprop=&quot;url image&quot; src=&quot;http://7xrvo9.com1.z0.glb.clouddn.com/20160716/%E8%8D%B7%E8%8A%B1.jpg&quot; class=&quot;full-image&quot; /&gt;&lt;meta itemprop=&quot;width&quot; content=&quot;auto&quot;&gt;&lt;meta itemprop=&quot;height&quot; content=&quot;auto&quot;&gt;&lt;/span&gt;
&lt;blockquote class = &quot;blockquote-center&quot;&gt;想来已然是好久没有更新过博客了。六月底匆忙结束了学校的事情，七月出头从南京赶赴杭州，开启一段全新的历程（蓄谋已久），其中的酸爽体验都让我差点忘了还有本站点，哭瞎-。- 不一样的感觉、不一样的环境、不一样的一群人，两个礼拜下来都有新的体验，技术也好，思考方式也罢，一切都还是入坑的开始…&lt;/blockquote&gt;
    
    </summary>
    
      <category term="随想" scheme="http://licao404.com/categories/%E9%9A%8F%E6%83%B3/"/>
    
    
      <category term="杂谈" scheme="http://licao404.com/tags/%E6%9D%82%E8%B0%88/"/>
    
  </entry>
  
  <entry>
    <title>浅析几种设计模式</title>
    <link href="http://licao404.com/2016/06/24/%E6%B5%85%E6%9E%90%E5%87%A0%E7%A7%8D%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    <id>http://licao404.com/2016/06/24/浅析几种设计模式/</id>
    <published>2016-06-24T14:43:36.000Z</published>
    <updated>2016-07-01T17:02:44.066Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://7xrvo9.com1.z0.glb.clouddn.com/20160624/code211360.jpg" alt=""></p>
<blockquote class="blockquote-center">设计模式是前辈总结下来的一套经验和心血，学习设计模式，让我们代码的更加具备可重用性、可靠性，是工程化编程必不可缺的基石。不过遗憾的是，限于本人目前水平，这篇博文谈的不是涵盖所有23种传统设计模式，而是想说明平时在编写JavaScript中经常会用到的几种设计模式，有 <strong>单例模式</strong>、<strong>工厂模式</strong>、<strong>构造函数模式</strong>、<strong>混合模式</strong>、<strong>模块模式</strong>、<strong>发布订阅模式</strong>，以及具体编写JavaScript代码的一些小实践，使用设计模式编程是一种好习惯，了解其形成的原理更是我们关注的重点，好了，让我们开始吧！</blockquote>

<a id="more"></a>
<h3 id="单例模式"><a href="#单例模式" class="headerlink" title="单例模式"></a>单例模式</h3><p>从需求出发，什么情况下我们会用到单例模式呢？遇到过这样的场景：点击登录按钮时，页面弹出登录浮窗、或者点击操作按钮后，弹出确认弹窗，这里的登录窗和确认窗都是唯一的，无论点击多少次，这些弹窗只会被创建一次，这时候比较适合用单例模式来创建。</p>
<p>传统的单例模式是用一个定义一个变量来标志是否已经创建过某个类的实例，判断之后，如果创建过则直接返回之前创建的实例。仔细看下面的demo，当监听到按钮点击事件后，创建 <code>createDialog</code> 的唯一实例，并让此实例的 <code>css</code> 属性发生改变：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> createDialog = (<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">     <span class="keyword">var</span> div;</div><div class="line">     <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">        <span class="keyword">if</span> (!div) &#123;</div><div class="line">             div = <span class="built_in">document</span>.createElement(<span class="string">'div'</span>);</div><div class="line">             div.innerHTML = <span class="string">"&lt;h1&gt;I'm GardonLee&lt;/h1&gt;"</span>;</div><div class="line">             div.style.display = <span class="string">'none'</span>;</div><div class="line">             <span class="built_in">document</span>.body.appendChild(div);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> div;</div><div class="line">     &#125;</div><div class="line">&#125;)();</div><div class="line"></div><div class="line"><span class="built_in">document</span>.getElementById(<span class="string">'loginBtn'</span>).onclick = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">     <span class="keyword">var</span> loginDialog = createDialog();  </div><div class="line">     loginDialog.style.display = <span class="string">'block'</span>;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<h3 id="工厂（方法）模式"><a href="#工厂（方法）模式" class="headerlink" title="工厂（方法）模式"></a>工厂（方法）模式</h3><p>工厂模式抽象了创建具体对象的过程，定义一个用于<strong>创建对象的接口</strong>，让子类决定实例化哪个类。由于在JavaScript中没有类的概念，我们使用一种函数（工厂方法）来封装以<strong>特定接口</strong>创建对象的细节，让这个方法来决定需要创建哪个类的实例，</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">createCompany</span>(<span class="params">position,obj</span>)</span>&#123;</div><div class="line">    <span class="keyword">var</span> F2E = <span class="function"><span class="keyword">function</span> (<span class="params">name,age,sex</span>) </span>&#123;</div><div class="line">        <span class="keyword">this</span>.name = name;</div><div class="line">        <span class="keyword">this</span>.age = age;</div><div class="line">        <span class="keyword">this</span>.sex = sex;</div><div class="line">        <span class="keyword">this</span>.saySkills = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">            <span class="built_in">console</span>.log(<span class="string">"HTML(5)、CSS(3)、JavaScript、Tools、Frameworks......"</span>);</div><div class="line">        &#125;;</div><div class="line">    &#125;;</div><div class="line">    <span class="keyword">var</span> UI = <span class="function"><span class="keyword">function</span> (<span class="params">name,age,sex</span>) </span>&#123;</div><div class="line">        <span class="keyword">this</span>.name = name;</div><div class="line">        <span class="keyword">this</span>.age = age;</div><div class="line">        <span class="keyword">this</span>.sex = sex;</div><div class="line">        <span class="keyword">this</span>.saySkills = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">            <span class="built_in">console</span>.log(<span class="string">"美术基础、平面设计、交互设计、动效设计、前端相关......"</span>);</div><div class="line">        &#125;;</div><div class="line">    &#125;;</div><div class="line"></div><div class="line">    <span class="keyword">if</span>(position === <span class="string">'F2E'</span>)&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">new</span> F2E(obj.name,obj.age,obj.sex);</div><div class="line">    &#125;<span class="keyword">else</span> <span class="keyword">if</span> (position === <span class="string">'UI'</span>) &#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">new</span> UI(obj.name,obj.age,obj.sex);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"><span class="keyword">var</span> staff01 = <span class="keyword">new</span> createCompany(<span class="string">'F2E'</span>,&#123;</div><div class="line">    <span class="attr">name</span>: <span class="string">'licao'</span>,</div><div class="line">    <span class="attr">age</span>: <span class="number">20</span>,</div><div class="line">    <span class="attr">sex</span>: <span class="string">'male'</span></div><div class="line">&#125;);</div><div class="line"></div><div class="line"><span class="keyword">var</span> staff02 = <span class="keyword">new</span> createCompany(<span class="string">'UI'</span>,&#123;</div><div class="line">    <span class="attr">name</span>: <span class="string">'lucy'</span>,</div><div class="line">    <span class="attr">age</span>: <span class="number">22</span>,</div><div class="line">    <span class="attr">sex</span>: <span class="string">'female'</span></div><div class="line">&#125;);</div><div class="line"></div><div class="line">staff01.saySkills();</div><div class="line">staff02.saySkills();</div><div class="line"></div><div class="line"><span class="built_in">console</span>.log(staff01);</div><div class="line"><span class="built_in">console</span>.log(staff02);</div></pre></td></tr></table></figure>
<h3 id="构造函数模式"><a href="#构造函数模式" class="headerlink" title="构造函数模式"></a>构造函数模式</h3><p>构造函数也是函数，只是相比较普通函数，函数名一般习惯以大写字母开头，他可以创建对象实例，因为 <code>JavaScript</code> 中函数说到底也是对象。按照《JavaScript高级程序设计》的说法，通过操作符 <code>new</code> 创建对象实例实际上经过四个步骤：</p>
<ol>
<li>创建一个新对象；</li>
<li>将构造函数的作用域赋给新创建的对象（this指向这个新的对象）；</li>
<li>执行构造函数中的代码（即为这个新的对象添加属性，当然也包括方法，然而我们一般不建议这么干，因为每每去创建一个新的实例，都要重新创建构造函数中的方法，所以构造函数并不单独使用，一般是和原型模式混合使用）；</li>
<li>返回新对象；</li>
</ol>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">CreateCoder</span>(<span class="params">name,age,sex,position</span>)</span>&#123;</div><div class="line">    <span class="keyword">this</span>.name = name;</div><div class="line">    <span class="keyword">this</span>.age = age;</div><div class="line">    <span class="keyword">this</span>.sex = sex;</div><div class="line">    <span class="keyword">this</span>.position = position;</div><div class="line">    <span class="keyword">this</span>.sayPosition = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">         <span class="built_in">console</span>.log(<span class="keyword">this</span>.position);</div><div class="line">    &#125;;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">var</span> FE = <span class="keyword">new</span> CreateCoder(<span class="string">"licao"</span>,<span class="number">20</span>,<span class="string">"male"</span>,<span class="string">"font-end engineer"</span>);</div><div class="line"><span class="keyword">var</span> UX = <span class="keyword">new</span> CreateCoder(<span class="string">"xiaomin"</span>,<span class="number">22</span>,<span class="string">"female"</span>,<span class="string">"UX"</span>);</div></pre></td></tr></table></figure>
<p>上面的代码中我将公共方法 <code>sayPosition</code> 写在构造函数中，导致每 <code>new</code> 一个实例都会创建一次函数，注意每个函数都不是同一个内建对象 <code>Function</code> 的实例,本质上每个 <code>CreateCoder</code> 的实例都包含一个不同的 <code>Function</code> 的实例:</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">console</span>.log(FE.sayPosition == UX.sayPosition);<span class="comment">//false</span></div></pre></td></tr></table></figure>
<p>下面我们将公用方法写在构造函数的原型对象上:</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">CreateCoder</span>(<span class="params">name,age,sex,position</span>)</span>&#123;</div><div class="line">    <span class="keyword">this</span>.name = name;</div><div class="line">    <span class="keyword">this</span>.age = age;</div><div class="line">    <span class="keyword">this</span>.sex = sex;</div><div class="line">    <span class="keyword">this</span>.position = position;</div><div class="line">&#125;</div><div class="line"></div><div class="line">CreateCoder.prototype.sayPosition = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.position);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">var</span> FE = <span class="keyword">new</span> CreateCoder(<span class="string">"licao"</span>,<span class="number">20</span>,<span class="string">"male"</span>,<span class="string">"font-end engineer"</span>);</div><div class="line"><span class="keyword">var</span> UX = <span class="keyword">new</span> CreateCoder(<span class="string">"xiaomin"</span>,<span class="number">22</span>,<span class="string">"female"</span>,<span class="string">"UX"</span>);</div><div class="line"><span class="built_in">console</span>.log(FE.sayPosition == UX.sayPosition);<span class="comment">//true</span></div></pre></td></tr></table></figure>
<h3 id="混合模式"><a href="#混合模式" class="headerlink" title="混合模式"></a>混合模式</h3><p>混合模式所要解决的问题主要是对象（构造函数）的继承。如何在原有对象的基础上，拓展出一个新对象，新对象继承需要原有对象的属性和方法。而前面的构造函数模式与原型模式结合的模式又表明，我们需要分别继承原有对象的自有属性及其原型对象上的方法，这样就出现了 <code>JavaScript</code> 所谓的混合模式,下面代码的每一步都对应这样的思想：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//混合模式 前提是理解：构造函数模式与原型模式结合、原型链、原型式继承、以及 call 函数、ES5中Object.create()函数的概念</span></div><div class="line"><span class="keyword">var</span> Person = <span class="function"><span class="keyword">function</span>(<span class="params">name,age,sex</span>)</span>&#123;</div><div class="line">    <span class="keyword">this</span>.name = name;</div><div class="line">    <span class="keyword">this</span>.age = age;</div><div class="line">    <span class="keyword">this</span>.sex = sex;</div><div class="line">&#125;;</div><div class="line"></div><div class="line">Person.prototype.sayName = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.name);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">var</span> Coder = <span class="function"><span class="keyword">function</span>(<span class="params">name,age,sex,position</span>)</span>&#123;</div><div class="line">    Person.call(<span class="keyword">this</span>,name,age,sex,position);</div><div class="line">    <span class="keyword">this</span>.position = position;</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="comment">//-------可用ES5的 Object.create() 替代下面的写法----------</span></div><div class="line"><span class="comment">// 兼容性：IE9+、Firefix4+、Safari5+、Opera12+ 和 Chrome</span></div><div class="line"><span class="comment">// Coder.prototype = Object.create(Person.prototype);</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">create</span>(<span class="params">o</span>)</span>&#123;</div><div class="line">    <span class="function"><span class="keyword">function</span> <span class="title">F</span>(<span class="params"></span>)</span>&#123;&#125;</div><div class="line">    F.prototype = o;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">new</span> F();</div><div class="line">&#125;;</div><div class="line"></div><div class="line">Coder.prototype = create(Person.prototype);</div><div class="line"><span class="comment">//-------------------------------------------------------</span></div><div class="line"></div><div class="line"><span class="comment">//重写从原对象继承过来方法，（根据实际需求）</span></div><div class="line">Coder.prototype.sayName = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">     <span class="built_in">console</span>.log(<span class="keyword">this</span>.age);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//在继承了原有对象的基础上 拓展方法，（根据实际需求）</span></div><div class="line">Coder.prototype.sayPosition = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">     <span class="built_in">console</span>.log(<span class="keyword">this</span>.position);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">var</span> FE = <span class="keyword">new</span> Coder(<span class="string">"licao"</span>,<span class="number">20</span>,<span class="string">"male"</span>,<span class="string">"font-end engineer"</span>);</div><div class="line"><span class="comment">//result</span></div><div class="line"><span class="built_in">console</span>.log(FE);</div><div class="line">FE.sayPosition();<span class="comment">//font-end engineer</span></div><div class="line">FE.sayName();<span class="comment">//licao</span></div></pre></td></tr></table></figure>
<p>深入理解混合模式的前提是理解：构造函数模式与原型模式结合、原型链、原型式继承、以及 <code>call/apply</code> 函数、<code>ES5</code> 中 <code>Object.create()</code> 函数的概念，这些前面的文章已有了初步介绍，目前够用了。</p>
<h3 id="模块模式"><a href="#模块模式" class="headerlink" title="模块模式"></a>模块模式</h3><p>封装模块的方式，JavaScript中没有私有变量的概念，很难有封装的概念，所以如果想封装一段代码，必须用到模块模式（匿名闭包）写代码，貌似似曾相识，对哦，在前面几篇写前端模块化之旅的文章写过这个概念;</p>
<p>关于闭包，我们不建议使用，而这种模块化的写法是我们进行代码封装的惯用写法：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> Person = (<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="keyword">var</span> _name,</div><div class="line">        _age,</div><div class="line">        _sex,</div><div class="line">        _position;</div><div class="line"></div><div class="line">    <span class="keyword">return</span> &#123;</div><div class="line">        <span class="attr">init</span>: <span class="function"><span class="keyword">function</span> (<span class="params">obj</span>) </span>&#123;</div><div class="line">             _name = obj.name;</div><div class="line">             _age = obj.age;</div><div class="line">             _sex = obj.sex;</div><div class="line">             _position = obj.position;</div><div class="line">        &#125;,</div><div class="line">        <span class="attr">changePosition</span>: <span class="function"><span class="keyword">function</span> (<span class="params">newPosition</span>) </span>&#123;</div><div class="line">             _position = newPosition;</div><div class="line">        &#125;,</div><div class="line">        <span class="attr">sayPosition</span>: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">             <span class="built_in">console</span>.log(_position);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;)();</div><div class="line"></div><div class="line">Person.sayPosition();<span class="comment">//undefined</span></div><div class="line">Person.init(&#123;<span class="attr">name</span>:<span class="string">"licao"</span>,<span class="attr">age</span>:<span class="number">20</span>,<span class="attr">sex</span>:<span class="string">"male"</span>,<span class="attr">position</span>:<span class="string">"PM"</span>&#125;);</div><div class="line">Person.sayPosition();<span class="comment">//PM</span></div><div class="line">Person.changePosition(<span class="string">"font-end engineer"</span>);</div><div class="line">Person.sayPosition();<span class="comment">//font-end engineer</span></div></pre></td></tr></table></figure>
<h3 id="发布订阅模式"><a href="#发布订阅模式" class="headerlink" title="发布订阅模式"></a>发布订阅模式</h3><p>定义了对象之间一种一对多的依赖关系，当一个对象的状态改变时，所有依赖于它的对象都将得到通知。可以用于异步编程，用于对象间的通知机制：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//创建事件中心</span></div><div class="line"><span class="keyword">var</span> EventManager = (<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">     <span class="keyword">var</span> events = &#123;&#125;;</div><div class="line">     <span class="comment">//监听事件</span></div><div class="line">     <span class="function"><span class="keyword">function</span> <span class="title">on</span>(<span class="params">evt,handler</span>) </span>&#123;</div><div class="line">         events[evt] = events[evt] || [];</div><div class="line">         events[evt].push(&#123;</div><div class="line">            <span class="attr">handler</span>: handler</div><div class="line">         &#125;)</div><div class="line">     &#125;</div><div class="line">     <span class="comment">//绑定事件</span></div><div class="line">     <span class="function"><span class="keyword">function</span> <span class="title">fire</span>(<span class="params">evt,args</span>) </span>&#123;</div><div class="line">        <span class="comment">//查询事件列表</span></div><div class="line">         <span class="keyword">if</span> (!events[evt]) &#123;</div><div class="line">            <span class="keyword">return</span>;</div><div class="line">         &#125;</div><div class="line"></div><div class="line">         <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; events[evt].length; i++)&#123;</div><div class="line">            events[evt][i].handler(args);</div><div class="line">         &#125;</div><div class="line">     &#125;</div><div class="line"></div><div class="line">     <span class="comment">//解绑事件（如果该事件存在）</span></div><div class="line">     <span class="function"><span class="keyword">function</span> <span class="title">off</span>(<span class="params">evt</span>)</span>&#123;</div><div class="line">         <span class="keyword">if</span> (!events[evt]) &#123;</div><div class="line">            <span class="keyword">return</span>;</div><div class="line">         &#125; <span class="keyword">else</span> &#123;</div><div class="line">            <span class="keyword">delete</span> events[evt];</div><div class="line">         &#125;</div><div class="line">     &#125;		</div><div class="line"></div><div class="line">     <span class="keyword">return</span> &#123;</div><div class="line">        <span class="attr">on</span>: on,</div><div class="line">        <span class="attr">off</span>: off,</div><div class="line">        <span class="attr">fire</span>: fire</div><div class="line">     &#125;</div><div class="line">&#125;)()</div><div class="line"><span class="comment">//监听事件</span></div><div class="line">EventManager.on(<span class="string">'text:change'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">val</span>)</span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">'text:change...  now val is '</span> + val);  </div><div class="line">&#125;);</div><div class="line"><span class="comment">// 绑定事件</span></div><div class="line">EventManager.fire(<span class="string">'text:change'</span>, <span class="string">'FE'</span>);</div><div class="line"><span class="comment">//解绑事件</span></div><div class="line">EventManager.off(<span class="string">'text:changer'</span>);</div></pre></td></tr></table></figure>
<hr>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://7xrvo9.com1.z0.glb.clouddn.com/20160624/code211360.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;blockquote class=&quot;blockquote-center&quot;&gt;设计模式是前辈总结下来的一套经验和心血，学习设计模式，让我们代码的更加具备可重用性、可靠性，是工程化编程必不可缺的基石。不过遗憾的是，限于本人目前水平，这篇博文谈的不是涵盖所有23种传统设计模式，而是想说明平时在编写JavaScript中经常会用到的几种设计模式，有 &lt;strong&gt;单例模式&lt;/strong&gt;、&lt;strong&gt;工厂模式&lt;/strong&gt;、&lt;strong&gt;构造函数模式&lt;/strong&gt;、&lt;strong&gt;混合模式&lt;/strong&gt;、&lt;strong&gt;模块模式&lt;/strong&gt;、&lt;strong&gt;发布订阅模式&lt;/strong&gt;，以及具体编写JavaScript代码的一些小实践，使用设计模式编程是一种好习惯，了解其形成的原理更是我们关注的重点，好了，让我们开始吧！&lt;/blockquote&gt;
    
    </summary>
    
      <category term="编程学习" scheme="http://licao404.com/categories/%E7%BC%96%E7%A8%8B%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="前端进阶" scheme="http://licao404.com/categories/%E7%BC%96%E7%A8%8B%E5%AD%A6%E4%B9%A0/%E5%89%8D%E7%AB%AF%E8%BF%9B%E9%98%B6/"/>
    
    
      <category term="JavaScript" scheme="http://licao404.com/tags/JavaScript/"/>
    
      <category term="设计模式" scheme="http://licao404.com/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript的几个选择题</title>
    <link href="http://licao404.com/2016/05/28/JavaScript%E7%9A%84%E5%87%A0%E4%B8%AA%E9%80%89%E6%8B%A9%E9%A2%98/"/>
    <id>http://licao404.com/2016/05/28/JavaScript的几个选择题/</id>
    <published>2016-05-28T09:31:07.000Z</published>
    <updated>2016-05-28T10:06:08.979Z</updated>
    
    <content type="html"><![CDATA[<blockquote class="blockquote-center">Not a lot really. Quiz mainly focuses on knowledge of scoping, function expressions (and how they differ from function declarations), references, process of variable and function declaration, order of evaluation, and a couple more things like <code>delete</code> operator and object instantiation. These are all relatively simple concepts, which I think every professional Javascript developer should know. Most of these are applied in practice quite often. Ideally, even if you can’t answer a question, you should be able to infer answer from specs (without executing the snippet). When creating these questions, I made sure I can answer each one of them off the top of my head, to keep things relatively simple.<br>Note, however, that not all questions are very practical, so don’t worry if you can’t answer some of them. We don’t often use <code>with</code> statement, for example, so failing to know/remember its exact behavior is understandable.<br></blockquote>

<a id="more"></a>
<h2 id="Few-notes-about-code"><a href="#Few-notes-about-code" class="headerlink" title="Few notes about code"></a>Few notes about code</h2><ul>
<li>Assuming ECMAScript 3rd edition (not 5th)</li>
<li>Implementation quirks do not count (assuming standard behavior only)</li>
<li>Every snippet is run as a global code (not as eval or function one)</li>
<li>There are no other variables declared (and host environment is not extended with anything beyond what’s defined in specs)</li>
<li>Answer should correspond to exact return value of entire expression/statement (or last line)</li>
<li>“Error” in answer indicates that overall snippet results in a runtime error</li>
</ul>
<h2 id="Now-Begin"><a href="#Now-Begin" class="headerlink" title="Now Begin"></a>Now Begin</h2><h3 id="1"><a href="#1" class="headerlink" title="1"></a>1</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">  <span class="keyword">return</span> <span class="keyword">typeof</span> <span class="built_in">arguments</span>;</div><div class="line">&#125;)();</div></pre></td></tr></table></figure>
<ul>
<li>“object”</li>
<li>“array”</li>
<li>“arguments”</li>
<li>“undefined”</li>
</ul>
<h3 id="2"><a href="#2" class="headerlink" title="2"></a>2</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> f = <span class="function"><span class="keyword">function</span> <span class="title">g</span>(<span class="params"></span>)</span>&#123; <span class="keyword">return</span> <span class="number">23</span>; &#125;;</div><div class="line"><span class="keyword">typeof</span> g();</div></pre></td></tr></table></figure>
<ul>
<li>“number”</li>
<li>“undefined”</li>
<li>“function”</li>
<li>Error</li>
</ul>
<h3 id="3"><a href="#3" class="headerlink" title="3"></a>3</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">(<span class="function"><span class="keyword">function</span>(<span class="params">x</span>)</span>&#123;</div><div class="line">  <span class="keyword">delete</span> x;</div><div class="line">  <span class="keyword">return</span> x;</div><div class="line">&#125;)(<span class="number">1</span>);</div></pre></td></tr></table></figure>
<ul>
<li>1</li>
<li>null</li>
<li>undefined</li>
<li>Error</li>
</ul>
<h3 id="4"><a href="#4" class="headerlink" title="4"></a>4</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> y = <span class="number">1</span>, x = y = <span class="keyword">typeof</span> x;</div><div class="line">x;</div></pre></td></tr></table></figure>
<ul>
<li>1</li>
<li>“number”</li>
<li>undefined</li>
<li>“undefined”</li>
</ul>
<h3 id="5"><a href="#5" class="headerlink" title="5"></a>5</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">(<span class="function"><span class="keyword">function</span> <span class="title">f</span>(<span class="params">f</span>)</span>&#123;</div><div class="line">  <span class="keyword">return</span> <span class="keyword">typeof</span> f();</div><div class="line">&#125;)(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123; <span class="keyword">return</span> <span class="number">1</span>; &#125;);</div></pre></td></tr></table></figure>
<ul>
<li>“number”</li>
<li>“undefined”</li>
<li>“function”</li>
<li>Error</li>
</ul>
<h3 id="6"><a href="#6" class="headerlink" title="6"></a>6</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> foo = &#123;</div><div class="line">  <span class="attr">bar</span>: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123; <span class="keyword">return</span> <span class="keyword">this</span>.baz; &#125;,</div><div class="line">  <span class="attr">baz</span>: <span class="number">1</span></div><div class="line">&#125;;</div><div class="line">(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">  <span class="keyword">return</span> <span class="keyword">typeof</span> <span class="built_in">arguments</span>[<span class="number">0</span>]();</div><div class="line">&#125;)(foo.bar);</div></pre></td></tr></table></figure>
<ul>
<li>“undefined”</li>
<li>“object”</li>
<li>“number”</li>
<li>“function”</li>
</ul>
<h3 id="7"><a href="#7" class="headerlink" title="7"></a>7</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> foo = &#123;</div><div class="line">  <span class="attr">bar</span>: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123; <span class="keyword">return</span> <span class="keyword">this</span>.baz; &#125;,</div><div class="line">  <span class="attr">baz</span>: <span class="number">1</span></div><div class="line">&#125;</div><div class="line"><span class="keyword">typeof</span> (f = foo.bar)();</div></pre></td></tr></table></figure>
<ul>
<li>“undefined”</li>
<li>“object”</li>
<li>“number”</li>
<li>“function”</li>
</ul>
<h3 id="8"><a href="#8" class="headerlink" title="8"></a>8</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> f = (<span class="function"><span class="keyword">function</span> <span class="title">f</span>(<span class="params"></span>)</span>&#123; <span class="keyword">return</span> <span class="string">"1"</span>; &#125;, <span class="function"><span class="keyword">function</span> <span class="title">g</span>(<span class="params"></span>)</span>&#123; <span class="keyword">return</span> <span class="number">2</span>; &#125;)();</div><div class="line"><span class="keyword">typeof</span> f;</div></pre></td></tr></table></figure>
<ul>
<li>“string”</li>
<li>“number”</li>
<li>“function”</li>
<li>“undefined”</li>
</ul>
<h3 id="9"><a href="#9" class="headerlink" title="9"></a>9</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> x = <span class="number">1</span>;</div><div class="line"><span class="keyword">if</span> (<span class="function"><span class="keyword">function</span> <span class="title">f</span>(<span class="params"></span>)</span>&#123;&#125;) &#123;</div><div class="line">  x += <span class="keyword">typeof</span> f;</div><div class="line">&#125;</div><div class="line">x;</div></pre></td></tr></table></figure>
<ul>
<li>1</li>
<li>“1function”</li>
<li>“1undefined”</li>
<li>NaN</li>
</ul>
<h3 id="10"><a href="#10" class="headerlink" title="10"></a>10</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> x = [<span class="keyword">typeof</span> x, <span class="keyword">typeof</span> y][<span class="number">1</span>];</div><div class="line"><span class="keyword">typeof</span> <span class="keyword">typeof</span> x;</div></pre></td></tr></table></figure>
<ul>
<li>“number”</li>
<li>“string”</li>
<li>“undefined”</li>
<li>“object”</li>
</ul>
<h3 id="11"><a href="#11" class="headerlink" title="11"></a>11</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">(<span class="function"><span class="keyword">function</span>(<span class="params">foo</span>)</span>&#123;</div><div class="line">  <span class="keyword">return</span> <span class="keyword">typeof</span> foo.bar;</div><div class="line">&#125;)(&#123; <span class="attr">foo</span>: &#123; <span class="attr">bar</span>: <span class="number">1</span> &#125; &#125;);</div></pre></td></tr></table></figure>
<ul>
<li>“undefined”</li>
<li>“object”</li>
<li>“number”</li>
<li>Error</li>
</ul>
<h3 id="12"><a href="#12" class="headerlink" title="12"></a>12</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">(<span class="function"><span class="keyword">function</span> <span class="title">f</span>(<span class="params"></span>)</span>&#123;</div><div class="line">  <span class="function"><span class="keyword">function</span> <span class="title">f</span>(<span class="params"></span>)</span>&#123; <span class="keyword">return</span> <span class="number">1</span>; &#125;</div><div class="line">  <span class="keyword">return</span> f();</div><div class="line">  <span class="function"><span class="keyword">function</span> <span class="title">f</span>(<span class="params"></span>)</span>&#123; <span class="keyword">return</span> <span class="number">2</span>; &#125;</div><div class="line">&#125;)();</div></pre></td></tr></table></figure>
<ul>
<li>1</li>
<li>2</li>
<li>Error (e.g. “Too much recursion”)</li>
<li>undefined</li>
</ul>
<h3 id="13"><a href="#13" class="headerlink" title="13"></a>13</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">f</span>(<span class="params"></span>)</span>&#123; <span class="keyword">return</span> f; &#125;</div><div class="line"><span class="keyword">new</span> f() <span class="keyword">instanceof</span> f;</div></pre></td></tr></table></figure>
<ul>
<li>true</li>
<li>false</li>
</ul>
<h3 id="14"><a href="#14" class="headerlink" title="14"></a>14</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">with</span> (<span class="function"><span class="keyword">function</span>(<span class="params">x, undefined</span>)</span>&#123;&#125;) length;</div></pre></td></tr></table></figure>
<ul>
<li>1</li>
<li>2</li>
<li>undefined</li>
<li>Error</li>
</ul>
<hr>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote class=&quot;blockquote-center&quot;&gt;Not a lot really. Quiz mainly focuses on knowledge of scoping, function expressions (and how they differ from function declarations), references, process of variable and function declaration, order of evaluation, and a couple more things like &lt;code&gt;delete&lt;/code&gt; operator and object instantiation. These are all relatively simple concepts, which I think every professional Javascript developer should know. Most of these are applied in practice quite often. Ideally, even if you can’t answer a question, you should be able to infer answer from specs (without executing the snippet). When creating these questions, I made sure I can answer each one of them off the top of my head, to keep things relatively simple.&lt;br&gt;Note, however, that not all questions are very practical, so don’t worry if you can’t answer some of them. We don’t often use &lt;code&gt;with&lt;/code&gt; statement, for example, so failing to know/remember its exact behavior is understandable.&lt;br&gt;&lt;/blockquote&gt;
    
    </summary>
    
      <category term="前端基础" scheme="http://licao404.com/categories/%E5%89%8D%E7%AB%AF%E5%9F%BA%E7%A1%80/"/>
    
      <category term="编程学习" scheme="http://licao404.com/categories/%E5%89%8D%E7%AB%AF%E5%9F%BA%E7%A1%80/%E7%BC%96%E7%A8%8B%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="JavaScript" scheme="http://licao404.com/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>Why I Ditched Angular for React</title>
    <link href="http://licao404.com/2016/05/27/Why-I-Ditched-Angular-for-React/"/>
    <id>http://licao404.com/2016/05/27/Why-I-Ditched-Angular-for-React/</id>
    <published>2016-05-27T10:50:59.000Z</published>
    <updated>2016-05-27T11:37:23.080Z</updated>
    
    <content type="html"><![CDATA[<span itemprop="image" itemscope="" itemtype="http://schema.org/ImageObject"><img itemprop="url image" src="http://7xrvo9.com1.z0.glb.clouddn.com/20160527/post-bg-re-vs-ng2.jpg" class="full-image"><meta itemprop="width" content="auto"><meta itemprop="height" content="auto"></span>
<blockquote class="blockquote-center">A few years ago, when my code started to get cluttered with jQuery selectors and callbacks, AngularJS came to my rescue.<br><br>Angular helped me with the maintainability of my dev projects. It came with a lot of functionality out-of-the-box. It was tooled for building large-scale web apps, greatly facilitating rapid development in this genre of applications.</blockquote>

<a id="more"></a>
<p>I remember how its two-way binding and the philosophy of Model as the single source of truth blew me away. And, in practice, they reduced data-redundancy throughout my applications.</p>
<p>Over time though, I discovered some pain points in Angular. Eventually they caused me enough frustration that I began looking around for alternatives.</p>
<p>Here are the concerns I have with Angular.</p>
<p><strong>DOM for execution.</strong> Angular heavily relies on the DOM for its execution flow. In the default bootstrapping of Angular apps, it scans the DOM and compiles it with priorities of directives, which makes it difficult to debug and test the execution order.</p>
<p><strong>Two-way binding is a double-edged sword.</strong> As the complexity of your components grows, this approach can lead to performance issues.</p>
<p>How does two-way binding affect performance? JavaScript (ES5) doesn’t have any implementation to notify for any change to its variables or objects, so Angular uses something called “dirty checking” to track data changes and sync them with the user interface (UI).</p>
<p>Dirty-checking is carried out after any operation is performed within Angular’s scope ($digest cycle) which leads to slower performance as the amount of bindings increases.</p>
<p>Another problem with two-way binding is that many components on the page are capable of changing data, which means there are multiple sources of data inputs. If not managed well, this can lead to a confusing and overwhelming situation. To be fair, this is an implementation issue, not an Angular issue in and of itself.</p>
<p><strong>Angular has its own world.</strong> Every operation in Angular must go through its digest cycle, or else your components won’t sync with your data models. This leads to compatibility issues with other dependencies.</p>
<p>If you use any third-party JavaScript library that involves data changes, you need to wrap it with Angular’s $apply function. Or you will need to convert it to a service, if it’s a utility library. This is like having to reinvent every JavaScript library you use in order for it to interoperate with Angular.</p>
<p><strong>Dependency injection.</strong> JavaScript currently doesn’t have a package manager and dependency resolver of its own. AMD, UMD and CommonJS have been solving this gap well. But, <a href="https://github.com/angular/angular.js/issues/4919" target="_blank" rel="external">until recently</a>, Angular did not play well with any of these. Rather, it introduces a dependency injection (DI) of its own. Though, to be fair, there are unofficial Angular dependency-injection implementations using RequireJS.</p>
<p><strong>Steep learning curve.</strong> Using Angular requires learning a ton of concepts including, but not limited to:</p>
<ul>
<li>modules</li>
<li>controllers</li>
<li>directives</li>
<li>scopes</li>
<li>templating</li>
<li>linking functions</li>
<li>filters</li>
<li>dependency injection</li>
</ul>
<p>It can be very difficult to get started with Angular. It’s not for the faint of heart.</p>
<p>All of this led me to React.</p>
<p><strong>What’s So Great About React?</strong></p>
<p><a href="http://facebook.github.io/react/" target="_blank" rel="external">React</a>, the new open source framework for building user interfaces, is a different way of developing JavaScript apps. React is led by Facebook and Instagram.</p>
<p>To be clear: React <strong>isn’t</strong> an application development framework like AngularJS. It’s not fair to compare the two in an apples-to-apples manner.</p>
<p>When React was <a href="http://2013.jsconf.eu/speakers/pete-hunt-react-rethinking-best-practices.html" target="_blank" rel="external">introduced</a> at JSConf EU in May 2013, the audience was shocked by some of its concepts, like “one-way data flow” and “Virtual DOM”.</p>
<p>React is for building user interfaces. In other words, straight from the official landing page of the project: “people use React as the <strong>V in MVC.</strong>“ However, you can write self-contained components with it, which more or less compares to Angular directives.</p>
<p>React rethinks our current web development concepts and best practices.</p>
<p>For instance, it encourages <strong>one-way data flow</strong> and believes in a philosophy that components are state machines driven by data.</p>
<p>Whereas most of the other similar frameworks love working with the DOM and directly manipulating it, React hates the DOM and works to shield the developer from it.</p>
<p>React provides the bare-minimum API needed to define a UI component. Nothing more, nothing less. It follows UNIX philosophy: Small is beautiful. Do one thing, and do it best.</p>
<p>You can find a more detailed <a href="http://www.quora.com/Pete-Hunt/Posts/Facebooks-React-vs-AngularJS-A-Closer-Look" target="_blank" rel="external">comparison of Angular vs. React</a> by Pete Hunt (who works at Facebook/Instagram).</p>
<p><strong>Why Did I Switch to React?</strong></p>
<p>Here are some of the things I like about React.</p>
<p><strong>React is Fast</strong></p>
<p>React takes a different approach to the DOM compared to other frameworks.</p>
<p>It does not let you work with the DOM directly.</p>
<p>It introduces a layer, called <strong>Virtual DOM</strong>, between your JavaScript logic and the actual DOM.</p>
<p><img src="http://7xrvo9.com1.z0.glb.clouddn.com/20160527/0485-01-react-virtual-dom.png" alt=""></p>
<p>This concept improves web performance. On successive renders, React performs a differential (diff) on the Virtual DOM, and then updates only parts of the actual DOM that need to be updated.</p>
<p><strong>Cross-Browser Compatibility</strong></p>
<p>Virtual DOM also helps solve cross-browser issues because it provides us with a standardized API that even works as far back as IE 8.</p>
<p><strong>Modularity</strong></p>
<p>Writing self-contained UI components modularizes your app, which in turn isolates issues only to the problematic component/s.</p>
<p>Every component can be developed and tested in isolation, and they can use other components. This equates to maintainability improvements.</p>
<p><strong>One-way Data Flow Makes Things Saner</strong></p>
<p><a href="http://facebook.github.io/flux/docs/overview.html" target="_blank" rel="external">Flux</a> is an architecture for creating one-way data layers in JavaScript applications. It was conceptualized by Facebook along with the React view library. The Flux concept makes large-scale app development simpler.</p>
<p>Flux is a concept rather than a tool-specific implementation. It can be incorporated into other frameworks. For instance, Alex Rattray has a nice <a href="http://www.toptal.com/front-end/simple-data-flow-in-react-applications-using-flux-and-backbone" target="_blank" rel="external">implementation of Flux</a> using Backbone Collection and Model in React.</p>
<p><strong>Just JavaScript</strong></p>
<p>Modern web apps work in a different way compared to the traditional Web.</p>
<p>For example, the View layer needs to be updated with user interactions without hitting the server. And hence View and Controller need to rely on each other heavily.</p>
<p>Many other frameworks use templating engines like Handlebars or Mustache to deal with the View layer. But React believes that View and Controller are so interdependent that they must reside at a single place without the use of any third-party templating engine, and, on top of that, without leaving the scope of JavaScript.</p>
<p><strong>Isomorphic JavaScript</strong></p>
<p>The biggest drawback of single-page JS web apps is that it has limitations when crawled by search engines. React has a solution for this.</p>
<p>React can pre-render apps on the server before sending it to the user agent. It can restore the same state into the live application from the pre-rendered static content on the server.</p>
<p>Because search engine crawlers rely on the server response rather than JavaScript execution, pre-rendering your apps helps with SEO.</p>
<p><strong>It Plays Well with Others</strong></p>
<p>Loaders and bundlers like RequireJS, Browserify and Webpack are much needed when you’re building large applications. They make the arduous task surmountable.</p>
<p>Unfortunately, the current version of JavaScript doesn’t provide a module bundler or loader. (Though there’s a proposal to address this in the upcoming version, ES6, with System.import).</p>
<p>Fortunately we have some alternatives like RequireJS and Webpack, which are pretty neat. React is built with Browserify, but if you’re looking to inject image assets and compile <a href="http://sixrevisions.com/tutorials/set-up-less-js/" target="_blank" rel="external">Less</a> or <a href="http://sixrevisions.com/javascript/coffeescript-basics/" target="_blank" rel="external">CoffeeScript</a>, then probably Webpack stands as a better option. The point is: You are afforded that choice.</p>
<p><strong>Do I Need Another Development Framework with React?</strong></p>
<p>Using React, you can build user interfaces, but you still need to make AJAX calls, apply data filters, and other things that Angular already does.</p>
<p>So if we need an additional JavaScript app development framework, why ditch Angular?</p>
<p>Frameworks are a set of modules and rules. If I don’t need some of its modules, or want to swap out a module for another one that does the job better, how do I do it?</p>
<p>One of the ways to achieve modularity and better dependency-management is through package managers.</p>
<p>But then, how do we manage packages in Angular? That’s up to you, but know that Angular has its own world. You will most likely need to adapt third-party packages into Angular’s world.</p>
<p>React, on the other hand, is just JavaScript. Any package written in JavaScript won’t need any wrapping in React.</p>
<p>For me, using package managers like npm and Bower is better. We can pick and choose our components and craft custom toolsets. To be clear: This is more complicated compared to just using a comprehensive app development framework like Angular.</p>
<p>On this front, the saving grace is that React encourages the use of npm, which has a lot of ready-to-use packages. To get started building apps with React, you can, for example, use one of these <a href="https://github.com/facebook/react/wiki/Complementary-Tools#full-stack-starter-kits" target="_blank" rel="external">full-stack starter kits</a>.</p>
<p><strong>Switching to React is Not Painless!</strong></p>
<p>Since Angular is an app development framework, it comes with a lot of goodies. I’m giving up great features like an AJAX wrapper in the $http service, $q as a promise service, ng-show, ng-hide, ng-class, and ng-if as controlling statements for template — all that amazing stuff.</p>
<p>React isn’t an app development framework, so you need to think about how to deal with the other aspects of building applications. For example, I’m working on an open source project called <a href="https://github.com/sahusoftcom/react-utils" target="_blank" rel="external">react-utils</a> which can be used with React to ease development.</p>
<p>The community is also actively contributing similar reusable components to fill in the blanks, so to speak. <a href="http://react-components.com/" target="_blank" rel="external">React Components</a> is an unofficial directory website where you can find such open source components.</p>
<p>React’s philosophy does not encourage you to use two-way binding, which brings a lot of pain when you’re dealing with form elements and editable data grids.</p>
<p>However, as you start understanding the Flux data flow and Stores, things become clearer, simpler and easier.</p>
<p>React is new. It will take some time for the community around it to grow. Angular, on the other hand, has already gained huge popularity, and has a relatively large number of extensions available (e.g. AngularUI and Restangular).</p>
<p>However, although React’s community is new, <strong>it is growing fast</strong>. Extensions like React Bootstrap are a testament to this. It’s just a matter of time before we have more components available.</p>
<p><strong>Conclusion</strong></p>
<p>If you love the Angular approach, then you may hate React at first. Mainly because of it’s one-way data flow and lack of app development features. You end up needing to take care of many things by yourself.</p>
<p>But as soon as you get comfortable with the Flux design pattern and React’s philosophy, I guarantee that you will begin to see its beauty.</p>
<p>Facebook and Instagram both use React (because they are leading the project).</p>
<p>GitHub’s new source code editor, Atom, is built using React.</p>
<p>The upcoming Yahoo! Mail is being rebuilt in React.</p>
<p>React already has large-scale apps and big tech companies betting on it.</p>
<blockquote>
<p>Author: Kumar Sanket<br>From: <a href="http://sixrevisions.com/javascript/why-i-ditched-angular-for-react/" target="_blank" rel="external">sixrevisions.com</a></p>
</blockquote>
<hr>
]]></content>
    
    <summary type="html">
    
      &lt;span itemprop=&quot;image&quot; itemscope itemtype=&quot;http://schema.org/ImageObject&quot;&gt;&lt;img itemprop=&quot;url image&quot; src=&quot;http://7xrvo9.com1.z0.glb.clouddn.com/20160527/post-bg-re-vs-ng2.jpg&quot; class=&quot;full-image&quot; /&gt;&lt;meta itemprop=&quot;width&quot; content=&quot;auto&quot;&gt;&lt;meta itemprop=&quot;height&quot; content=&quot;auto&quot;&gt;&lt;/span&gt;
&lt;blockquote class=&quot;blockquote-center&quot;&gt;A few years ago, when my code started to get cluttered with jQuery selectors and callbacks, AngularJS came to my rescue.&lt;br&gt;&lt;br&gt;Angular helped me with the maintainability of my dev projects. It came with a lot of functionality out-of-the-box. It was tooled for building large-scale web apps, greatly facilitating rapid development in this genre of applications.&lt;/blockquote&gt;
    
    </summary>
    
      <category term="前端进阶" scheme="http://licao404.com/categories/%E5%89%8D%E7%AB%AF%E8%BF%9B%E9%98%B6/"/>
    
      <category term="外文阅读" scheme="http://licao404.com/categories/%E5%89%8D%E7%AB%AF%E8%BF%9B%E9%98%B6/%E5%A4%96%E6%96%87%E9%98%85%E8%AF%BB/"/>
    
    
      <category term="Angular" scheme="http://licao404.com/tags/Angular/"/>
    
      <category term="React" scheme="http://licao404.com/tags/React/"/>
    
      <category term="框架" scheme="http://licao404.com/tags/%E6%A1%86%E6%9E%B6/"/>
    
      <category term="杂谈" scheme="http://licao404.com/tags/%E6%9D%82%E8%B0%88/"/>
    
  </entry>
  
  <entry>
    <title>前端模块化之旅（三）：RequireJS模块化及r.js指南</title>
    <link href="http://licao404.com/2016/05/19/%E5%89%8D%E7%AB%AF%E6%A8%A1%E5%9D%97%E5%8C%96%E4%B9%8B%E6%97%85%EF%BC%88%E4%B8%89%EF%BC%89%EF%BC%9ARequireJS%E6%A8%A1%E5%9D%97%E5%8C%96%E5%8F%8Ar-js%E6%8C%87%E5%8D%97/"/>
    <id>http://licao404.com/2016/05/19/前端模块化之旅（三）：RequireJS模块化及r-js指南/</id>
    <published>2016-05-18T18:26:05.000Z</published>
    <updated>2016-06-24T14:15:48.194Z</updated>
    
    <content type="html"><![CDATA[<span itemprop="image" itemscope="" itemtype="http://schema.org/ImageObject"><img itemprop="url image" src="http://7xrvo9.com1.z0.glb.clouddn.com/20160519/%E5%89%8D%E7%AB%AF%E6%A8%A1%E5%9D%97%E5%8C%96%E4%B9%8B%E6%97%85%E4%B8%89.jpg" class="full-image"><meta itemprop="width" content="auto"><meta itemprop="height" content="auto"></span>
<a id="more"></a>
<p>在<code>html</code>中指定了 <code>RrequireJS</code> 第一次需要加载的模块，也就是通过 <code>data-main</code> 所指定，因此一般作为主模块：如下例中 <code>src/js/app/</code> 目录下的 <code>index.js</code> 文件</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!-- index.html --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">data-main</span>=<span class="string">"src/js/app/index"</span> <span class="attr">src</span>=<span class="string">"src/js/lib/require.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div></pre></td></tr></table></figure>
<p>在主模块中我们使用 <code>require.config()</code> 方法对模块的加载行为进行一些配置：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">requirejs.config(&#123;</div><div class="line">	<span class="attr">baseUrl</span>: <span class="string">'src/js'</span>,</div><div class="line">	<span class="attr">paths</span>: &#123;</div><div class="line">		<span class="attr">jquery</span>: <span class="string">'lib/jquery'</span>,</div><div class="line">		<span class="attr">backTop</span>: <span class="string">'com/backTop'</span>,</div><div class="line">		<span class="attr">jumpTo</span>: <span class="string">'com/jumpTo'</span>,</div><div class="line">		<span class="attr">carousel</span>: <span class="string">'com/carousel'</span>,</div><div class="line">		<span class="attr">exposure</span>: <span class="string">'com/exposure'</span>,</div><div class="line">		<span class="attr">navfloor</span>: <span class="string">'com/navfloor'</span>,</div><div class="line">		<span class="attr">waterfall</span>: <span class="string">'com/waterfall'</span></div><div class="line">	&#125;</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<ul>
<li>其中 <code>baseUrl</code> 是改变基准路径，所有的模块相对于 <code>baseUrl</code> 来加载；<code>baseUrl</code> 路径以 <code>index.html</code> 所在的目录为基准；</li>
<li>其中 <code>requirejs.config()</code> 函数的 <code>paths</code> 属性指定各个模块的加载路径(相对于 <code>baseUrl</code>)，如果没有指定 <code>baseUrl</code> ，路径默认和主模块在同一目录;</li>
</ul>
<p>采用了 RequireJS 模块化写法解决了命名冲突和依赖管理的问题，同时也增加了文件数量，这也意味着请求的增多，无疑会带来性能问题；<br>这时候可以使用 RequireJS 提供的打包（优化）工具 <code>r.js</code>,它可以实现前端文件的压缩与合并,减少服务器请求，进行性能优化。<br>具体详尽的使用方法可以参考 require.js <a href="http://www.requirejs.cn/docs/optimization.html#requirements" target="_blank" rel="external">官方文档</a>,这里主要介绍下关键步骤，关于 <code>build.js</code> 配置文件的写法,如下是一个 <code>build.js</code> 文件的内容:</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">(&#123;</div><div class="line">    <span class="attr">baseUrl</span>: <span class="string">"./src/js"</span>,</div><div class="line">    <span class="attr">paths</span>: &#123;</div><div class="line">        <span class="string">'jquery'</span>: <span class="string">'lib/bower_components/jquery/dist/jquery.min'</span></div><div class="line">    &#125;,</div><div class="line">    <span class="attr">name</span>: <span class="string">"main"</span>,</div><div class="line">    <span class="attr">out</span>: <span class="string">"dist/js/merge.js"</span></div><div class="line">&#125;)</div></pre></td></tr></table></figure>
<ul>
<li>其中 <code>baseUrl</code> 路径设置应与主模块中 <code>require.config()</code> 方法里的 <code>baseUrl</code> 实际路径一致</li>
<li><code>nam</code> 指定的是解析入口，这里写了主模块，路径相对于前面指定的 <code>baseUrl</code>；</li>
</ul>
<blockquote>
<p>下面是 requireJS 模块化和加了 <code>r.js</code> 打包的小实践：</p>
</blockquote>
<ul>
<li><a href="http://febox.applinzi.com/requireJS/" target="_blank" rel="external">效果预览</a></li>
<li><a href="https://github.com/gardonlee/Some-Demo...-/tree/master/requireJS" target="_blank" rel="external">查看代码</a></li>
</ul>
<hr>
]]></content>
    
    <summary type="html">
    
      &lt;span itemprop=&quot;image&quot; itemscope itemtype=&quot;http://schema.org/ImageObject&quot;&gt;&lt;img itemprop=&quot;url image&quot; src=&quot;http://7xrvo9.com1.z0.glb.clouddn.com/20160519/%E5%89%8D%E7%AB%AF%E6%A8%A1%E5%9D%97%E5%8C%96%E4%B9%8B%E6%97%85%E4%B8%89.jpg&quot; class=&quot;full-image&quot; /&gt;&lt;meta itemprop=&quot;width&quot; content=&quot;auto&quot;&gt;&lt;meta itemprop=&quot;height&quot; content=&quot;auto&quot;&gt;&lt;/span&gt;
    
    </summary>
    
      <category term="编程学习" scheme="http://licao404.com/categories/%E7%BC%96%E7%A8%8B%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="前端进阶" scheme="http://licao404.com/categories/%E7%BC%96%E7%A8%8B%E5%AD%A6%E4%B9%A0/%E5%89%8D%E7%AB%AF%E8%BF%9B%E9%98%B6/"/>
    
    
      <category term="JavaScript" scheme="http://licao404.com/tags/JavaScript/"/>
    
      <category term="模块化" scheme="http://licao404.com/tags/%E6%A8%A1%E5%9D%97%E5%8C%96/"/>
    
  </entry>
  
  <entry>
    <title>前端模块化之旅（二）：CommonJS、AMD和CMD</title>
    <link href="http://licao404.com/2016/05/18/%E5%89%8D%E7%AB%AF%E6%A8%A1%E5%9D%97%E5%8C%96%E4%B9%8B%E6%97%85-CommonJS%E3%80%81AMD%E5%92%8CCMD/"/>
    <id>http://licao404.com/2016/05/18/前端模块化之旅-CommonJS、AMD和CMD/</id>
    <published>2016-05-18T03:36:24.000Z</published>
    <updated>2016-05-19T02:12:32.690Z</updated>
    
    <content type="html"><![CDATA[<span itemprop="image" itemscope="" itemtype="http://schema.org/ImageObject"><img itemprop="url image" src="http://7xrvo9.com1.z0.glb.clouddn.com/20160518/%E5%89%8D%E7%AB%AF%E6%A8%A1%E5%9D%97%E5%8C%96%E4%B9%8B%E6%97%85%E4%BA%8C.jpg" class="full-image"><meta itemprop="width" content="auto"><meta itemprop="height" content="auto"></span>
<blockquote class="blockquote-center">继续前篇，各种模块化规范开始推出，其中比较突出的是服务器端的 CommonJS 规范,它是 Nood.JS 在实践中推出的，也是首先采用 JS 模块化概念的语言，跳出了浏览器；进而出现了浏览器环境的模块化方案 AMD和CMD。</blockquote>

<a id="more"></a>
<blockquote>
<h4 id="CommonJS-Modules-1-0"><a href="#CommonJS-Modules-1-0" class="headerlink" title="CommonJS Modules/1.0"></a>CommonJS Modules/1.0</h4></blockquote>
<p>CommonJS 规范是服务器端的模块化的规范，是 Nood.js 在实践中推出的，Nood.js 也是首先采用 js 模块化的；</p>
<p>它规定一个单独的文件就是一个模块，一个模块中存在一个自由变量 <strong>require</strong>，这是个函数，用于加载模块：</p>
<ul>
<li>这个 <code>require</code> 函数接受一个模块标识符，返回外部模块所输出的 <code>API</code>;</li>
<li>如果出现<a href="http://weizhifeng.net/commonjs-module-1.0-specification.html" target="_blank" rel="external">依赖闭环</a>(dependency cycle)，那么外部模块在被它的传递依赖（transitive dependencies）所 <code>require</code> 的时候可能并没有执行完成；在这种情况下，”require”返回的对象必须至少包含此外部模块在调用require函数（会进入当前模块执行环境）之前就已经准备完毕的输出。</li>
<li>如果请求的模块不能返回，那么”require”必须抛出一个错误。</li>
</ul>
<p>在一个模块中，会存在一个名为 <strong>exports</strong> 的自由变量，这是一个对象，模块可以在执行的时候把自身的API加入到其中，用于定义模块，导出给其他地方使用；</p>
<p><code>exports</code> 对象是输出模块变量的唯一方式。</p>
<p>参照下面的一个例子：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//math.js</span></div><div class="line">exports.add = <span class="function"><span class="keyword">function</span>(<span class="params">a,b</span>)</span>&#123;</div><div class="line">    <span class="keyword">var</span> c = a + b;</div><div class="line">    <span class="keyword">return</span> c;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//index.js</span></div><div class="line"><span class="keyword">var</span> add = <span class="built_in">require</span>(<span class="string">'math'</span>).add;<span class="comment">//</span></div><div class="line"><span class="built_in">console</span>.log(add(<span class="number">1</span>,<span class="number">1</span>));<span class="comment">//2</span></div></pre></td></tr></table></figure></p>
<p>在 <code>math.js</code>中将 add 函数绑定到模块中的 <code>exports</code> 对象中，之后在 <code>index.js</code> 模块中用 <code>require</code> 方法加载了 <code>math.js</code> 模块，并调用该模块中的 add 函数。</p>
<blockquote>
<h4 id="AMD"><a href="#AMD" class="headerlink" title="AMD"></a>AMD</h4></blockquote>
<p>Asynchronous Module Definition，即异步的模块定义，是浏览器端的模块化规范，是 RequireJS 在推广过程中对模块定义的规范化产出。</p>
<p>与服务器端的模块化规范 CommonJS 不同，AMD 的模块加载是异步的，因为是浏览器端，所以势必要是异步的（浏览器同步加载模块会导致性能、可用性、调试和跨域访问等问题）。因为模块异步加载时不会影响后面程序的执行，前面总结过 js 异步的情况，依赖某些模块的语句均放置在回调函数中，等待模块加载完成后再执行；</p>
<p>AMD 规范只定义了一个函数 <strong>define</strong> ，是一个全局变量，如下定义一个模块的语法：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">define(id?, dependencies?, factory);</div></pre></td></tr></table></figure></p>
<ul>
<li><p><code>id</code>：模块的名字，如果没有提供该参数，模块的名字应该默认为模块加载器请求的指定脚本的名字；</p>
</li>
<li><p><code>dependencies</code>：模块的依赖，已被模块定义的模块标识的数组字面量。依赖参数是可选的，如果忽略此参数，它应该默认为 <code>[&quot;require&quot;, &quot;exports&quot;, &quot;module&quot;]</code>。然而，如果工厂方法的长度属性小于3，加载器会选择以函数的长度属性指定的参数个数调用工厂方法。</p>
</li>
<li><p><code>factory</code>：模块的工厂函数，模块初始化要执行的函数或对象。如果为函数，它应该只被执行一次。如果是对象，此对象应该为模块的输出值。</p>
</li>
</ul>
<p>参照下面的一个例子：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">define(<span class="string">'myModule'</span>,[<span class="string">'jQuery'</span>,<span class="string">'types/Employee'</span>],<span class="function"><span class="keyword">function</span>(<span class="params">$,Employee</span>)</span>&#123;<span class="comment">//定义模块myModule，引入依赖jQuery，types/Employee</span></div><div class="line">	 <span class="function"><span class="keyword">function</span> <span class="title">Programmer</span>(<span class="params"></span>)</span>&#123;</div><div class="line">            <span class="comment">//do something</span></div><div class="line">        &#125;;</div><div class="line">        Programmer.prototype = <span class="keyword">new</span> Employee();</div><div class="line">        <span class="keyword">return</span> Programmer;  <span class="comment">//return Constructor</span></div><div class="line">&#125;)</div></pre></td></tr></table></figure></p>
<blockquote>
<h4 id="CMD"><a href="#CMD" class="headerlink" title="CMD"></a>CMD</h4></blockquote>
<p>Common Module Definition，即通用模块定义，是浏览器端的模块化规范，是 SeaJS 在推广过程中对模块定义的规范化产出。</p>
<p>如下定义一个模块的语法:<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">define(factory)</div></pre></td></tr></table></figure></p>
<ul>
<li><code>factory</code> 为函数时，表示是模块的构造方法。执行该构造方法，可以得到模块向外提供的接口。factory 方法在执行时，默认会传入三个参数：require、exports 和 module.</li>
</ul>
<blockquote>
<p>AMD 是<strong>依赖关系前置，提前执行</strong>；CMD 是类似于 CommonJS 那样 <strong>按需加载，延迟执行</strong>：</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//CMD recommanded</span></div><div class="line">define(<span class="function"><span class="keyword">function</span>(<span class="params">require, exports, module</span>)</span>&#123;</div><div class="line">	<span class="keyword">var</span> a = <span class="built_in">require</span>(<span class="string">'a'</span>);</div><div class="line">	a.doSomething();</div><div class="line">	<span class="keyword">var</span> b = <span class="built_in">require</span>(<span class="string">'b'</span>);</div><div class="line">	b.doSomething();	<span class="comment">// 依赖就近，延迟执行</span></div><div class="line">&#125;);</div><div class="line"></div><div class="line"><span class="comment">//AMD recommanded</span></div><div class="line">define([<span class="string">'a'</span>, <span class="string">'b'</span>], <span class="function"><span class="keyword">function</span>(<span class="params">a, b</span>)</span>&#123;</div><div class="line">    a.doSomething();    <span class="comment">// 依赖前置，提前执行</span></div><div class="line">    b.doSomething();</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>明显看出和 AMD 不同，模块定义时已不用立马引入依赖，而是运行到需要时候再加载，根据顺序执行，这样更像是 CommonJS 的风格，让人感觉也像是同步加载似的。但实际上 CMD 内部处理是对文件做了一个词法的解析，在还没执行的时候，解析出所需的依赖，并不是真正的同步。</p>
<hr>
<blockquote>
<p>参考：</p>
</blockquote>
<ul>
<li><a href="http://weizhifeng.net/commonjs-module-1.0-specification.html" target="_blank" rel="external">CommonJS Modules/1.0 规范</a></li>
<li><a href="https://github.com/amdjs/amdjs-api/wiki/AMD-(%E4%B8%AD%E6%96%87%E7%89%88" target="_blank" rel="external">AMD 模块定义规范</a></li>
<li><a href="https://github.com/seajs/seajs/issues/242" target="_blank" rel="external">CMD 模块定义规范</a></li>
</ul>
<hr>
]]></content>
    
    <summary type="html">
    
      &lt;span itemprop=&quot;image&quot; itemscope itemtype=&quot;http://schema.org/ImageObject&quot;&gt;&lt;img itemprop=&quot;url image&quot; src=&quot;http://7xrvo9.com1.z0.glb.clouddn.com/20160518/%E5%89%8D%E7%AB%AF%E6%A8%A1%E5%9D%97%E5%8C%96%E4%B9%8B%E6%97%85%E4%BA%8C.jpg&quot; class=&quot;full-image&quot; /&gt;&lt;meta itemprop=&quot;width&quot; content=&quot;auto&quot;&gt;&lt;meta itemprop=&quot;height&quot; content=&quot;auto&quot;&gt;&lt;/span&gt;
&lt;blockquote class=&quot;blockquote-center&quot;&gt;继续前篇，各种模块化规范开始推出，其中比较突出的是服务器端的 CommonJS 规范,它是 Nood.JS 在实践中推出的，也是首先采用 JS 模块化概念的语言，跳出了浏览器；进而出现了浏览器环境的模块化方案 AMD和CMD。&lt;/blockquote&gt;
    
    </summary>
    
      <category term="编程学习" scheme="http://licao404.com/categories/%E7%BC%96%E7%A8%8B%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="前端进阶" scheme="http://licao404.com/categories/%E7%BC%96%E7%A8%8B%E5%AD%A6%E4%B9%A0/%E5%89%8D%E7%AB%AF%E8%BF%9B%E9%98%B6/"/>
    
    
      <category term="JavaScript" scheme="http://licao404.com/tags/JavaScript/"/>
    
      <category term="模块化" scheme="http://licao404.com/tags/%E6%A8%A1%E5%9D%97%E5%8C%96/"/>
    
  </entry>
  
  <entry>
    <title>前端模块化之旅（一）：因何生它</title>
    <link href="http://licao404.com/2016/05/17/%E5%89%8D%E7%AB%AF%E6%A8%A1%E5%9D%97%E5%8C%96%E4%B9%8B%E6%97%85-%E5%9B%A0%E4%BD%95%E7%94%9F%E5%AE%83/"/>
    <id>http://licao404.com/2016/05/17/前端模块化之旅-因何生它/</id>
    <published>2016-05-17T11:27:30.000Z</published>
    <updated>2016-05-19T02:12:20.841Z</updated>
    
    <content type="html"><![CDATA[<span itemprop="image" itemscope="" itemtype="http://schema.org/ImageObject"><img itemprop="url image" src="http://7xrvo9.com1.z0.glb.clouddn.com/20160517/%E5%89%8D%E7%AB%AF%E6%A8%A1%E5%9D%97%E5%8C%96%E4%B9%8B%E6%97%85%E4%B8%80.jpg" class="full-image"><meta itemprop="width" content="auto"><meta itemprop="height" content="auto"></span>
<blockquote class="blockquote-center">随着互联网的快速发展，人们不单单只是需要一个网页了，功能更复杂、交互更丰富的 WebAPP 成为开发者需要面对的日常工作内容。随之而来的是更加庞大与更加复杂的 JavaScript 代码，如此而来，仅仅依靠着我们之前面向对象的 JavaScript 进行代码封装已很难满足生产需求，特别是在团队协作的复杂项目中，JavaScript 模块化已成为一个迫切的需求。</blockquote>


<a id="more"></a>
<h3 id="原始社会的生产"><a href="#原始社会的生产" class="headerlink" title="原始社会的生产"></a>原始社会的生产</h3><p>开始的开始 Music ..♫.♪.♫.♪…我们都是…咳咳，我们都会使用如下的方式写代码，将独立通用的的功能独立成一个个函数：</p>
<p><iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width="330" height="86" src="http://music.163.com/outchain/player?type=2&id=5240550&auto=1&height=66"></iframe><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">bar</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="comment">//do something</span></div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">log</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="comment">//do something</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>这都是最初得美好，那些习以为常的习惯，回忆ing…这是最原始的模块，需要使用调用就好。但是但是，使用过就会知道这样会污染全局变量，并且很容易造成 <strong>命名冲突</strong>，好吧，它属于最初的美好。</p>
<p>后来，为了解决上面青春期的问题，我们选择了面向对象写法，引入 Namespace (命名空间)，将代码进行简单封装：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> myModule = &#123;</div><div class="line">    <span class="attr">bar</span>: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">        <span class="comment">//do something</span></div><div class="line">    &#125;,</div><div class="line">    <span class="attr">log</span>: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">        <span class="comment">//do something</span></div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//调用</span></div><div class="line">myMoudle.bar();</div></pre></td></tr></table></figure></p>
<p>这种方式看似还可以，减少了全局变量，能缓解严峻的问题。但是这并不安全，因为实质上是对象，会暴露所有的模块成员，内部状态可以被外部读写。</p>
<p>没办法，出了问题继续解决，我们采用匿名闭包的写法（Immediately-Invoked Function Expression，IIFE）：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> myModule = (<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="keyword">var</span> _log = <span class="string">"hello world"</span>;</div><div class="line">    <span class="keyword">var</span> log = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">        <span class="built_in">console</span>.log(_log);</div><div class="line">    &#125;;</div><div class="line"></div><div class="line">    <span class="keyword">return</span> &#123;</div><div class="line">        <span class="attr">log</span>: log</div><div class="line">    &#125;</div><div class="line">&#125;)();</div><div class="line"></div><div class="line"><span class="comment">//引用</span></div><div class="line">myModule.log();<span class="comment">//hello world</span></div><div class="line">myModule._log;<span class="comment">//undefined</span></div></pre></td></tr></table></figure></p>
<p>如此，外部就无法读写到内部的成员（<code>_log</code>）。这时候需求又改变了，你的模块不再是简单的一个模块，而是一个功能很大的模块，需要分成几个部分，这些部分存在相互之间的 <strong>依赖关系</strong>。好吧，我们来引入依赖：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> myModule = (<span class="function"><span class="keyword">function</span>(<span class="params">$</span>)</span>&#123;</div><div class="line">    <span class="keyword">var</span> $log = $(<span class="string">'.log'</span>);</div><div class="line">    <span class="keyword">var</span> log = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">        <span class="built_in">console</span>.log($log);</div><div class="line">    &#125;;</div><div class="line"></div><div class="line">    <span class="keyword">return</span> &#123;</div><div class="line">        <span class="attr">log</span>: log</div><div class="line">    &#125;</div><div class="line">&#125;)(jQuery);</div><div class="line"></div><div class="line"><span class="comment">//引用</span></div><div class="line">myModule.log();</div></pre></td></tr></table></figure></p>
<p>这样我们在代码中引入了jQuery，方法间存在依赖关系；</p>
<p>至此，我们用简陋的工具，和无比勤劳的双手为子孙们搭建了发展的架子，为后续社会发展出更先进好用的模块化工具打下了基石，感谢祖辈们的探索！</p>
<h3 id="文明社会的探索"><a href="#文明社会的探索" class="headerlink" title="文明社会的探索"></a>文明社会的探索</h3><p>飞速变化的年代里，人们总是不满足于现状。有了前人的封装性还不够，我们引入 JS 文件时是靠不断追加 <code>&lt;script src=&quot;&quot;&gt;&lt;/script&gt;</code> 标签得以实现，每个标签引入顺序是有要求的。<br>当我们引入的文件增多，除了看起来比较累赘，还会出现比较多的依赖关系，而这种写法是无法突出这种关系的，我们需要 <strong>依赖管理</strong>，也让 <strong>后续维护</strong> 基本上变得无法进行。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">&lt;script src=<span class="string">"jquery.js"</span>&gt;&lt;script&gt;</div><div class="line">&lt;script src="dialog.js"&gt;&lt;script&gt;</div><div class="line">&lt;script src="tooltip.js"&gt;&lt;script&gt;</div><div class="line">&lt;script src="toast.js"&gt;&lt;script&gt;</div><div class="line">&lt;script src="handlebar.js"&gt;&lt;script&gt;</div><div class="line">......</div></pre></td></tr></table></figure>
<p>很多时候可能就是由于之前没有引入一个依赖的 js 文件而导致后面 js 的功能失效，浏览器报错。大型项目中，一些通用组件往往因此不能轻易地引入到业务代码中去，生产效率低下。还有一个问题就是 <strong>请求过多</strong>，不利于性能优化。</p>
<p>时代的进步是注定需要出现伟人的，积累下的诉求注定是需要人来响应的，一些规范横空出世，诸如 CommonJS规范、AMD规范、CMD规范 等一帮豪杰之辈，怀揣济世为民之心，度前端开发者于混沌之境。欲知其如何演绎，请看下篇 《前端模块化之旅（二）：CommonJS、AMD和CMD》。</p>
<hr>
]]></content>
    
    <summary type="html">
    
      &lt;span itemprop=&quot;image&quot; itemscope itemtype=&quot;http://schema.org/ImageObject&quot;&gt;&lt;img itemprop=&quot;url image&quot; src=&quot;http://7xrvo9.com1.z0.glb.clouddn.com/20160517/%E5%89%8D%E7%AB%AF%E6%A8%A1%E5%9D%97%E5%8C%96%E4%B9%8B%E6%97%85%E4%B8%80.jpg&quot; class=&quot;full-image&quot; /&gt;&lt;meta itemprop=&quot;width&quot; content=&quot;auto&quot;&gt;&lt;meta itemprop=&quot;height&quot; content=&quot;auto&quot;&gt;&lt;/span&gt;
&lt;blockquote class=&quot;blockquote-center&quot;&gt;随着互联网的快速发展，人们不单单只是需要一个网页了，功能更复杂、交互更丰富的 WebAPP 成为开发者需要面对的日常工作内容。随之而来的是更加庞大与更加复杂的 JavaScript 代码，如此而来，仅仅依靠着我们之前面向对象的 JavaScript 进行代码封装已很难满足生产需求，特别是在团队协作的复杂项目中，JavaScript 模块化已成为一个迫切的需求。&lt;/blockquote&gt;
    
    </summary>
    
      <category term="编程学习" scheme="http://licao404.com/categories/%E7%BC%96%E7%A8%8B%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="前端进阶" scheme="http://licao404.com/categories/%E7%BC%96%E7%A8%8B%E5%AD%A6%E4%B9%A0/%E5%89%8D%E7%AB%AF%E8%BF%9B%E9%98%B6/"/>
    
    
      <category term="JavaScript" scheme="http://licao404.com/tags/JavaScript/"/>
    
      <category term="模块化" scheme="http://licao404.com/tags/%E6%A8%A1%E5%9D%97%E5%8C%96/"/>
    
  </entry>
  
  <entry>
    <title>原型链后续之JavaScript的继承</title>
    <link href="http://licao404.com/2016/05/14/%E5%8E%9F%E5%9E%8B%E9%93%BE%E5%90%8E%E7%BB%AD%E4%B9%8BJavaScript%E7%9A%84%E7%BB%A7%E6%89%BF/"/>
    <id>http://licao404.com/2016/05/14/原型链后续之JavaScript的继承/</id>
    <published>2016-05-14T04:15:51.000Z</published>
    <updated>2016-07-12T13:42:30.478Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://7xr868.com1.z0.glb.clouddn.com/task36/Person%E5%8E%9F%E5%9E%8B%E5%9B%BE.png" alt=""></p>
<blockquote class="blockquote-center">还记得这张原型图么（没见过 or 忘了的请戳<a href="./2016/05/10/OOP-For-JavaScript/">《OOP For JavaScript》</a>和<a href="./2016/05/12/原型链/">《说清楚JavaScript的原型链》</a>这两篇博文）？深入学习了JavaScript原型和原型链的的概念和原理后，我们内心会隐隐有种道不明的感觉，如果你学习过其他面向对象语言，你会不自觉发现这是种多么熟悉的感觉啊——这不就像是继承么？此文就将内心的感觉整理出来，作为JavaScript语言的一个核心概念来学习。</blockquote>

<a id="more"></a>
<blockquote>
<h3 id="【理论知识】"><a href="#【理论知识】" class="headerlink" title="【理论知识】"></a>【理论知识】</h3></blockquote>
<h4 id="继承有什么作用"><a href="#继承有什么作用" class="headerlink" title="继承有什么作用? "></a><strong>继承有什么作用? </strong></h4><ul>
<li>继承是面向对象语言中一个重要的概念，通过继承实现代码复用，拓展软件功能；</li>
<li>不像其他面向对象语言的继承有着诸如“父类”和“子类”的概念，父类的的属性和方法子类可以继承而不必重写，只需要写出新增或者改写的内容。JavaScript是基于对象的语言，没有类的概念，所以，要想实现继承，就需要用js的原型链或者用 <code>apply</code> 和 <code>call</code> 方法。</li>
</ul>
<h4 id="有几种常见创建对象的方式-举例说明"><a href="#有几种常见创建对象的方式-举例说明" class="headerlink" title="有几种常见创建对象的方式? 举例说明?"></a><strong>有几种常见创建对象的方式? 举例说明?</strong></h4><ul>
<li><p>工厂模式 ，由于JavaScript中无法创建类，所以通过一个函数来封装以特定接口创建对象的细节，例如：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">creatHuman</span>(<span class="params">name,age</span>)</span>&#123;</div><div class="line">    <span class="keyword">var</span> o = &#123;</div><div class="line">        <span class="attr">name</span>: name,</div><div class="line">        <span class="attr">age</span>: age,</div><div class="line">        <span class="attr">selfIntro</span>: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">            <span class="built_in">console</span>.log(<span class="string">"I'm "</span> + name);</div><div class="line">        &#125;   </div><div class="line">    &#125;;</div><div class="line">    <span class="keyword">return</span> o;</div><div class="line">&#125;</div><div class="line"><span class="keyword">var</span> people1 = creatHuman(<span class="string">"Gardon"</span>,<span class="number">20</span>);</div><div class="line"><span class="keyword">var</span> people2 = creatHuman(<span class="string">"John"</span>,<span class="number">18</span>);</div></pre></td></tr></table></figure>
</li>
<li><p>构造函数模式 ，自定义对象类型的属性和方法：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Human</span>(<span class="params">name,age</span>)</span>&#123;</div><div class="line">        <span class="keyword">this</span>.name = name,</div><div class="line">        <span class="keyword">this</span>.age = age,</div><div class="line">        <span class="keyword">this</span>.selfIntro = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">            <span class="built_in">console</span>.log(<span class="string">"I'm "</span> + name);</div><div class="line">    &#125;;</div><div class="line">&#125;</div><div class="line"><span class="keyword">var</span> people1 = <span class="keyword">new</span> Human(<span class="string">"Gardon"</span>,<span class="number">20</span>);</div><div class="line"><span class="keyword">var</span> people2 = <span class="keyword">new</span> Human(<span class="string">"John"</span>,<span class="number">18</span>);</div></pre></td></tr></table></figure>
</li>
<li><p>原型模式</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Human</span>(<span class="params"></span>)</span>&#123;&#125;;</div><div class="line">Human.prototype.name = <span class="string">"Gardon"</span>,</div><div class="line">Human.prototype.age = <span class="number">20</span>,</div><div class="line">Human.prototype.selfIntro = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">"I'm "</span> + <span class="keyword">this</span>.name);</div><div class="line">&#125;;</div><div class="line"><span class="keyword">var</span> people1 = <span class="keyword">new</span> Human();</div><div class="line"><span class="keyword">var</span> people2 = <span class="keyword">new</span> Human();</div></pre></td></tr></table></figure>
</li>
<li><p>构造函数模式与原型模式结合 ， 目前JavaScript中使用最广泛，认同度最高的一种创建自定义类型的方法：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Human</span>(<span class="params">name,age</span>)</span>&#123;</div><div class="line">        <span class="keyword">this</span>.name = name,</div><div class="line">        <span class="keyword">this</span>.age = age</div><div class="line">&#125;</div><div class="line">Human.prototype.selfIntro = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">"I'm "</span> + <span class="keyword">this</span>.name);</div><div class="line">&#125;;</div><div class="line"><span class="keyword">var</span> people1 = <span class="keyword">new</span> Human(<span class="string">"Gardon"</span>,<span class="number">20</span>);</div><div class="line"><span class="keyword">var</span> people2 = <span class="keyword">new</span> Human(<span class="string">"John"</span>,<span class="number">18</span>);</div></pre></td></tr></table></figure>
</li>
<li><p>……</p>
</li>
</ul>
<h4 id="下面两种写法有什么区别"><a href="#下面两种写法有什么区别" class="headerlink" title="下面两种写法有什么区别?"></a><strong>下面两种写法有什么区别?</strong></h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//方法1</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">People</span>(<span class="params">name, sex</span>)</span>&#123;</div><div class="line">    <span class="keyword">this</span>.name = name;</div><div class="line">    <span class="keyword">this</span>.sex = sex;</div><div class="line">    <span class="keyword">this</span>.printName = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">        <span class="built_in">console</span>.log(<span class="keyword">this</span>.name);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"><span class="keyword">var</span> p1 = <span class="keyword">new</span> People(<span class="string">'Gardon'</span>, <span class="number">20</span>)</div><div class="line"></div><div class="line"><span class="comment">//方法2</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params">name, sex</span>)</span>&#123;</div><div class="line">    <span class="keyword">this</span>.name = name;</div><div class="line">    <span class="keyword">this</span>.sex = sex;</div><div class="line">&#125;</div><div class="line"></div><div class="line">Person.prototype.printName = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.name);</div><div class="line">&#125;</div><div class="line"><span class="keyword">var</span> p1 = <span class="keyword">new</span> Person(<span class="string">'John'</span>, <span class="number">18</span>);</div></pre></td></tr></table></figure>
<p>经过前面的总结，可知：上面的代码采用两种不同的创建对象的模式。</p>
<ul>
<li><p>方法1 用的是构造函数模式，每次通过 <code>new</code> 创建 <code>People</code> 的新实例，会为每个新实例绑定属性和方法，也就是每个 <code>People</code> 的实例都被添加了 <code>printName</code> 方法；</p>
</li>
<li><p>方法2 构造函数模式与原型模式结合，实例的属性都是在构造函数中定义的，而由所有实例共享的属性和方法则是在原型中定义的，也就是所有 <code>Person</code> 的实例都继承了 <code>Person</code> 原型对象的 <code>printName</code> 方法，由原型链指向也可发现这种区别。</p>
</li>
</ul>
<h4 id="Object-create-有什么作用？兼容性如何？如何使用？"><a href="#Object-create-有什么作用？兼容性如何？如何使用？" class="headerlink" title="Object.create 有什么作用？兼容性如何？如何使用？"></a><strong>Object.create 有什么作用？兼容性如何？如何使用？</strong></h4><p>ECMAScript5 通过新增 <code>Object.create()</code> 方法创建一个拥有指定原型和若干个指定属性的对象，规范化了原型式继承；<br>这个方法接受两个参数，第一个是用作新对象原型的对象、第二个是一个为新对象定义额外属性的对象，是个可选值；</p>
<blockquote>
<p>好吧，这样解释确实有点晦涩，继续来个 <code>Human</code> 的栗子加个原型图说明下：</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//这里首先新建了个构造函数Human（对象）</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Human</span>(<span class="params">name,age</span>)</span>&#123;</div><div class="line">    <span class="keyword">this</span>.name = name;</div><div class="line">    <span class="keyword">this</span>.age = age;</div><div class="line">&#125;</div><div class="line">Human.prototype.selfIntro = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">"I'm "</span> + <span class="keyword">this</span>.name);</div><div class="line">&#125;;</div><div class="line"><span class="comment">//这里又新建了个构造函数GreatMan（对象）</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">GreatMan</span>(<span class="params">trait</span>)</span>&#123;</div><div class="line">    <span class="keyword">this</span>.trait = trait;</div><div class="line">    Human.call(<span class="keyword">this</span>);<span class="comment">//重新定义Human函数的运行上下文为当前GreatMan的上下文</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>现在需要 <code>GreatMan</code> 继承自 <code>Human</code> 。除了原型链继承，我们使用一种原型式的继承：将 <code>Human</code> 的原型拷贝一份，这用到了 <code>Object.create()</code> 方法，然后让新对象（也就是 <code>GreatMan</code>） 的 <code>prototype</code> 指向拷贝来的原型：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">GreatMan.prototype = <span class="built_in">Object</span>.create(Human.prototype);</div><div class="line"></div><div class="line"><span class="keyword">var</span> turing = <span class="keyword">new</span> GreatMan(<span class="string">"diligent"</span>);</div><div class="line"><span class="built_in">console</span>.log(turing.selfIntro());<span class="comment">//I'm undefined</span></div><div class="line"></div><div class="line">turing.name = <span class="string">"Turing"</span>;</div><div class="line"><span class="built_in">console</span>.log(turing.selfIntro());<span class="comment">//I'm Turing</span></div></pre></td></tr></table></figure></p>
<blockquote>
<p>原型图示：</p>
</blockquote>
<p><img src="http://7xr868.com1.z0.glb.clouddn.com/task37/%E5%8E%9F%E5%9E%8B%E5%9B%BEcreate.png" alt=""></p>
<blockquote>
<p>考虑兼容性：支持 Object.create() 方法的浏览器有 <code>IE9+</code>、<code>Firefix4+</code>、<code>Safari5+</code>、<code>Opera12+</code> 和 <code>Chrome</code>  </p>
</blockquote>
<h4 id="hasOwnProperty-有什么作用？-如何使用？"><a href="#hasOwnProperty-有什么作用？-如何使用？" class="headerlink" title="hasOwnProperty 有什么作用？ 如何使用？"></a><strong>hasOwnProperty 有什么作用？ 如何使用？</strong></h4><p><code>hasOwnProperty()</code> 方法用来判断某个对象是否含有指定的自身属性，参数是要检测的是属性名。<br>所有继承了 <code>Object.prototype</code> 的对象都会从原型链上继承到 <code>hasOwnProperty</code> 方法，这个方法可以用来检测一个对象是否含有特定的自身属性，如对上面的例子:<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Human</span>(<span class="params">name,age</span>)</span>&#123;</div><div class="line">    <span class="keyword">this</span>.name = name;</div><div class="line">    <span class="keyword">this</span>.age = age;</div><div class="line">    <span class="keyword">this</span>.selfAge = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">        <span class="built_in">console</span>.log(<span class="string">"I'm "</span> + <span class="keyword">this</span>.age);    </div><div class="line">    &#125;;</div><div class="line">&#125;</div><div class="line">Human.prototype.selfIntro = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;    </div><div class="line">    <span class="built_in">console</span>.log(<span class="string">"I'm "</span> + <span class="keyword">this</span>.name);</div><div class="line">&#125;;</div><div class="line"><span class="keyword">var</span> people1 = <span class="keyword">new</span> Human(<span class="string">"Gardon"</span>,<span class="number">20</span>);</div><div class="line"></div><div class="line">people1.hasOwnProperty(<span class="string">'name'</span>);<span class="comment">//true</span></div><div class="line">people1.hasOwnProperty(<span class="string">'age'</span>);<span class="comment">//true</span></div><div class="line">people1.hasOwnProperty(<span class="string">'selfAge'</span>);<span class="comment">//true</span></div><div class="line">people1.hasOwnProperty(<span class="string">'selfIntro'</span>)<span class="comment">//false</span></div></pre></td></tr></table></figure></p>
<p>我们创建 Human 的实例 <code>people1</code>，people1 的属性包含 name、ag、selfAge，所以 <code>hasOwnProperty</code> 返回的是 <code>true</code>,而 <code>selfIntro</code> 是其指向的原型的属性，所以 <code>hasOwnProperty</code> 返回 <code>false</code>。</p>
<h4 id="实现-Object-create-的-polyfill，如：（ps-写个-函数create，实现-Object-create-的功能）"><a href="#实现-Object-create-的-polyfill，如：（ps-写个-函数create，实现-Object-create-的功能）" class="headerlink" title="实现 Object.create 的 polyfill，如：（ps: 写个 函数create，实现 Object.create 的功能）"></a><strong>实现 Object.create 的 polyfill，如：（ps: 写个 函数create，实现 Object.create 的功能）</strong></h4><blockquote>
<p><a href="http://www.cnblogs.com/ziyunfei/archive/2012/09/17/2688829.html" target="_blank" rel="external">什么是 polyfill？</a></p>
</blockquote>
<p><code>Object.create</code> 的内部实现逻辑前面的解释和原型图已经很明了，现在通过自定义函数实现：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//create传入的参数是需要继承的对象</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">create</span>(<span class="params">obj</span>)</span>&#123;</div><div class="line">    <span class="function"><span class="keyword">function</span> <span class="title">F</span>(<span class="params"></span>)</span>&#123;&#125;<span class="comment">//基于传入对象创建一个临时的构造函数</span></div><div class="line">    F.prototype = obj;<span class="comment">//将传入的对象作为构造函数的原型</span></div><div class="line">    <span class="keyword">return</span> <span class="keyword">new</span> F();<span class="comment">//返回构造函数的一个新实例</span></div><div class="line">&#125;</div><div class="line"><span class="keyword">var</span> obj = &#123;<span class="attr">a</span>: <span class="number">1</span>, <span class="attr">b</span>:<span class="number">2</span>&#125;;</div><div class="line"><span class="keyword">var</span> obj2 = create(obj);</div><div class="line"><span class="built_in">console</span>.log(obj2.a); <span class="comment">//1</span></div></pre></td></tr></table></figure>
<p>区区3行,这是 ECMAScript 另外一种继承的思路：原型式继承。最初由 <a href="http://www.crockford.com/" target="_blank" rel="external">Douglas Crockford</a> 在其文章 <a href="http://javascript.crockford.com/prototypal.html" target="_blank" rel="external">《Prototypal Inheritance in JavaScript》</a> 中提出。</p>
<p>ECMAScript5 通过新增 <code>Object.create()</code> 方法创建一个拥有指定原型和若干个指定属性的对象，规范化了原型式继承，<code>Object.create()</code> 在传入一个参数的情况下，和 <code>create()</code> 方法的行为相同。</p>
<h4 id="如下代码中-call-的作用是什么"><a href="#如下代码中-call-的作用是什么" class="headerlink" title="如下代码中 call 的作用是什么?"></a><strong>如下代码中 call 的作用是什么?</strong></h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params">name, sex</span>)</span>&#123;</div><div class="line">    <span class="keyword">this</span>.name = name;</div><div class="line">    <span class="keyword">this</span>.sex = sex;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Male</span>(<span class="params">name, sex, age</span>)</span>&#123;</div><div class="line">    Person.call(<span class="keyword">this</span>, name, sex);    <span class="comment">//这里的 call 有什么作用</span></div><div class="line">    <span class="keyword">this</span>.age = age;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>前面谈论 <code>this</code> 时（参见<a href="./2016/05/04/关于-this-二三事/#more">《关于 “this” 二三事》</a>）已经简单提过 <code>call</code> 和 <code>apply</code> 函数的一般作用：用来动态改变某个函数运行时上下文（重新定义函数的执行环境），也就是函数内部 <code>this</code> 的指向。</p>
<p><code>call</code> 和 <code>apply</code> 也正是通过这种作用来实现继承，上面代码中，<code>call</code> 将 <code>Person</code> 这个构造函数的运行时上下文变为 <code>Male</code> 这个构造函数（<code>Person</code> 内部的 <code>this</code> 指向 <code>Male</code>）;</p>
<p>这时候通过 <code>new</code> 新建 <code>Male</code> 的实例对象：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> goodman = <span class="keyword">new</span> Male(<span class="string">"Gardon"</span>,<span class="string">"male"</span>,<span class="number">20</span>);</div><div class="line"></div><div class="line"><span class="built_in">console</span>.log(goodman.age);<span class="comment">//20</span></div><div class="line"><span class="built_in">console</span>.log(goodman.name);<span class="comment">//Gardon</span></div><div class="line"><span class="built_in">console</span>.log(goodman.sex);<span class="comment">//male</span></div></pre></td></tr></table></figure></p>
<p>发现 <code>goodman</code> 是不是就有了 <code>name</code> 和 <code>sex</code> 属性呢？然而 <code>Male</code> 中并没有这两个属性，而是通过 <code>call</code> 函数继承了 <code>Person</code> 的属性。</p>
<blockquote>
<p>apply 函数与 call 函数作用相同，参数传入方式略有区别，同样参见之前的博文<a href="./2016/05/04/关于-this-二三事/#more">《关于 “this” 二三事》</a><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Person.apply(<span class="keyword">this</span>,[name, sex]);</div></pre></td></tr></table></figure></p>
</blockquote>
<h4 id="补全代码，实现继承"><a href="#补全代码，实现继承" class="headerlink" title="补全代码，实现继承"></a><strong>补全代码，实现继承</strong></h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params">name, sex</span>)</span>&#123;</div><div class="line">    <span class="keyword">this</span>.name = name;</div><div class="line">    <span class="keyword">this</span>.sex = sex;</div><div class="line">&#125;</div><div class="line"></div><div class="line">Person.prototype.getName = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.name;</div><div class="line">&#125;;    </div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Male</span>(<span class="params">name, sex, age</span>)</span>&#123;</div><div class="line">   <span class="keyword">this</span>.age = age;  </div><div class="line">   Person.call(<span class="keyword">this</span>,name,sex)<span class="comment">//call方法继承属性</span></div><div class="line">&#125;</div><div class="line"></div><div class="line">Male.prototype = <span class="built_in">Object</span>.create(Person.prototype);<span class="comment">//Object.create继承原型方法</span></div><div class="line"></div><div class="line">Male.prototype.printName = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.getName())</div><div class="line">&#125;;</div><div class="line">Male.prototype.getAge = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.age;</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="keyword">var</span> john = <span class="keyword">new</span> Male(<span class="string">'Gardon'</span>, <span class="string">'male'</span>, <span class="number">20</span>);</div><div class="line">john.printName();<span class="comment">//Gardon</span></div></pre></td></tr></table></figure>
<hr>
<blockquote>
<h3 id="【小试牛刀】"><a href="#【小试牛刀】" class="headerlink" title="【小试牛刀】"></a>【小试牛刀】</h3></blockquote>
<h4 id="实现如下可拖拽-dialog-弹窗功能，如下是功能要求"><a href="#实现如下可拖拽-dialog-弹窗功能，如下是功能要求" class="headerlink" title="实现如下可拖拽 dialog 弹窗功能，如下是功能要求"></a><strong>实现如下可拖拽 dialog 弹窗功能，如下是功能要求</strong></h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//功能描述：</span></div><div class="line"><span class="comment">// 1. 可使用 dialog.open() 去打开弹窗</span></div><div class="line"><span class="comment">// 2. 当点击确定、取消时可使用用户自定义事件</span></div><div class="line"><span class="comment">// 3. dialog 可拖动</span></div><div class="line"><span class="comment">// 4. 允许页面展示多个 dialog</span></div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Dialog</span>(<span class="params"></span>)</span>&#123;</div><div class="line"><span class="comment">//todo ...</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"><span class="keyword">var</span> tpl = <span class="string">'&lt;ul&gt;&lt;li&gt;列表1&lt;/li&gt;&lt;li&gt;列表2&lt;/li&gt;&lt;li&gt;列表1&lt;/li&gt;&lt;li&gt;列表1&lt;/li&gt;&lt;/ul&gt;'</span>;</div><div class="line"></div><div class="line">$(<span class="string">'#open4'</span>).on(<span class="string">'click'</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">  <span class="keyword">var</span> dialog4 = <span class="keyword">new</span> Dialog();</div><div class="line">  dialog4.open(&#123;</div><div class="line">    <span class="attr">title</span>: <span class="string">'Message'</span>,</div><div class="line">    <span class="attr">message</span>: tpl,</div><div class="line">    <span class="attr">isShowCloseBtn</span>: <span class="literal">true</span>,</div><div class="line">    <span class="attr">isShowConfirmBtn</span>: <span class="literal">true</span>,</div><div class="line">    <span class="attr">onClose</span>: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">      alert(<span class="string">'取消'</span>)</div><div class="line">    &#125;,</div><div class="line">    <span class="attr">onConfirm</span>: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">      alert(<span class="string">'确定'</span>);</div><div class="line">    &#125;</div><div class="line">  &#125;);</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>首先实现一个普通的 <code>dialog</code>，前面用过原生 JavaScript 实现过，但是还比较简陋。现在我们用面向对象的写法将其封装成jQuery插件：</p>
<blockquote>
<ul>
<li><p><a href="http://febox.applinzi.com/goDialog/index.html" target="_blank" rel="external">DEMO预览</a></p>
</li>
<li><p><a href="https://github.com/licao404/landemo/tree/master/goDialog" target="_blank" rel="external">实现代码</a></p>
</li>
</ul>
</blockquote>
<p>然后我们在上面的基础上，加入拖拽事件，</p>
<blockquote>
<ul>
<li><p><a href="http://febox.applinzi.com/task37/index.html" target="_blank" rel="external">DEMO预览</a></p>
</li>
<li><p><a href="https://github.com/licao404/landemo/tree/master/goDialogdraggable" target="_blank" rel="external">实现代码</a></p>
</li>
</ul>
</blockquote>
<hr>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://7xr868.com1.z0.glb.clouddn.com/task36/Person%E5%8E%9F%E5%9E%8B%E5%9B%BE.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;blockquote class=&quot;blockquote-center&quot;&gt;还记得这张原型图么（没见过 or 忘了的请戳&lt;a href=&quot;./2016/05/10/OOP-For-JavaScript/&quot;&gt;《OOP For JavaScript》&lt;/a&gt;和&lt;a href=&quot;./2016/05/12/原型链/&quot;&gt;《说清楚JavaScript的原型链》&lt;/a&gt;这两篇博文）？深入学习了JavaScript原型和原型链的的概念和原理后，我们内心会隐隐有种道不明的感觉，如果你学习过其他面向对象语言，你会不自觉发现这是种多么熟悉的感觉啊——这不就像是继承么？此文就将内心的感觉整理出来，作为JavaScript语言的一个核心概念来学习。&lt;/blockquote&gt;
    
    </summary>
    
      <category term="编程学习" scheme="http://licao404.com/categories/%E7%BC%96%E7%A8%8B%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="前端基础" scheme="http://licao404.com/categories/%E7%BC%96%E7%A8%8B%E5%AD%A6%E4%B9%A0/%E5%89%8D%E7%AB%AF%E5%9F%BA%E7%A1%80/"/>
    
    
      <category term="JavaScript" scheme="http://licao404.com/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>说清楚JavaScript的原型链</title>
    <link href="http://licao404.com/2016/05/12/%E5%8E%9F%E5%9E%8B%E9%93%BE/"/>
    <id>http://licao404.com/2016/05/12/原型链/</id>
    <published>2016-05-12T02:15:34.000Z</published>
    <updated>2016-05-13T15:04:13.808Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>首先通过一个小例子来为我们解释原型链做个准备工作，了解几个概念有助于我们由浅入深挖掘JavaScript原型链。</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params">name</span>)</span>&#123;</div><div class="line">    <span class="keyword">this</span>.name = name;</div><div class="line">&#125;</div><div class="line">Person.prototype.sayName = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">'My name is :'</span> + <span class="keyword">this</span>.name);</div><div class="line">&#125;</div><div class="line"><span class="keyword">var</span> p = <span class="keyword">new</span> Person(<span class="string">"Gardon"</span>)</div><div class="line">p.sayName();</div></pre></td></tr></table></figure>
<a id="more"></a>
<h4 id="试着解释Person、-prototype、proto、p、constructor之间的关联。"><a href="#试着解释Person、-prototype、proto、p、constructor之间的关联。" class="headerlink" title="试着解释Person、 prototype、proto、p、constructor之间的关联。"></a><strong>试着解释Person、 prototype、<strong>proto</strong>、p、constructor之间的关联。</strong></h4><ul>
<li>这里首先创建了一个构造函数 <code>Person</code>，每个函数都有一个 <strong>prototype</strong> 属性，指向它的原型对象；</li>
<li>同时原型对象会有一个 <strong>constructor</strong> 属性，指回 <code>prototype</code> 所在的函数（这里也就是 <code>Person</code>）；</li>
<li>每个对象都会有 <code>__proto__</code> 属性（包括函数，函数也是对象），指向它的构造函数（上一层）的原型对象，这里 <code>p</code> 是通过构造函数 <code>Person</code> 的实例对象，它的 <code>__proto__</code> 属性会指向 <code>Person</code> 的原型对象。</li>
</ul>
<h4 id="2-上例中，对对象-p-可以这样调用-p-toString-。toString是哪里来的-画出原型图-并解释什么是原型链。"><a href="#2-上例中，对对象-p-可以这样调用-p-toString-。toString是哪里来的-画出原型图-并解释什么是原型链。" class="headerlink" title="2. 上例中，对对象 p 可以这样调用 p.toString()。toString是哪里来的? 画出原型图? 并解释什么是原型链。"></a><strong>2. 上例中，对对象 p 可以这样调用 p.toString()。toString是哪里来的? 画出原型图? 并解释什么是原型链。</strong></h4><p>原型图示：</p>
<p><img src="http://7xr868.com1.z0.glb.clouddn.com/task36/Person%E5%8E%9F%E5%9E%8B%E5%9B%BE.png" alt=""></p>
<p>toString 是在最高级的 <strong>Object</strong> 方法的原型对象中；</p>
<p>为何 <code>p.toString()</code> 会找到 <code>Object</code> 中去呢，这就得解释原型链了，如上图中所示：</p>
<blockquote>
<p>JavaScript 每个对象都有 <code>__proto__</code> 属性指向上一层的原型对象，上一层的原型对象的结构依然类似，通过 <code>__proto__</code> 属性指向上一层的原型对象，这样就用 <code>__proto__</code> 顺藤摸瓜找到 Object 的原型对象上，这条寻找的链就是 JavaScript 的原型链，而 Object 的原型对象用 <code>Object.proto = null</code> 表示原型链的最顶端，如此变形成了javascript 的原型链继承 ，同时也解释了为什么所有的javascript对象都具有Object 的基本方法。</p>
</blockquote>
<p>相当于对象 <code>p</code> 找自己看有无 toString() 方法，没有，找上一层，以此类推，直到找到 Object 中有toString()方法。</p>
<h4 id="3-对-String-做扩展，实现如下方式获取字符串中频率最高的字符"><a href="#3-对-String-做扩展，实现如下方式获取字符串中频率最高的字符" class="headerlink" title="3. 对 String 做扩展，实现如下方式获取字符串中频率最高的字符"></a><strong>3. 对 String 做扩展，实现如下方式获取字符串中频率最高的字符</strong></h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">String</span>.prototype.getMostOften = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line"><span class="keyword">var</span> _this = <span class="keyword">this</span>,</div><div class="line">    mostoften = <span class="number">0</span>,</div><div class="line">    target;</div><div class="line"></div><div class="line"><span class="keyword">while</span>(_this)&#123;</div><div class="line">    <span class="keyword">var</span> letter = _this.charAt(<span class="number">0</span>),<span class="comment">//依次遍历当前字符串中的不重复出现的字母</span></div><div class="line">        afterstr = _this.split(letter),<span class="comment">//剔除当前字符串重复出现的字母</span></div><div class="line">        count = _this.length - (_this = afterstr.join(<span class="string">''</span>)).length;</div><div class="line">        <span class="comment">//出现了count次,并同时将已剔除重复字符串的字符串设置为当前字符串</span></div><div class="line">    <span class="keyword">if</span>(count &gt; mostoften)&#123;</div><div class="line">        mostoften = count;</div><div class="line">        target = letter;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"><span class="keyword">return</span> &#123;</div><div class="line">    <span class="string">"出现最多"</span>:target,</div><div class="line">    <span class="string">"出现次数"</span>:mostoften</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">var</span> str = <span class="string">'ahbbccdeddddfg'</span>;</div><div class="line"><span class="keyword">var</span> ch = str.getMostOften();</div><div class="line"><span class="built_in">console</span>.log(ch); <span class="comment">//d , 因为d 出现了5次</span></div></pre></td></tr></table></figure>
<h4 id="4-instanceOf-有什么作用？内部逻辑是如何实现的？"><a href="#4-instanceOf-有什么作用？内部逻辑是如何实现的？" class="headerlink" title="4. instanceOf 有什么作用？内部逻辑是如何实现的？"></a><strong>4. instanceOf 有什么作用？内部逻辑是如何实现的？</strong></h4><p><strong>instanceOf</strong> 是用来判断一个对象是否是某个构造函数的实例。</p>
<p>由上面 <strong>2</strong> 的原型图和总结的原型链的概念可以知道，想实现 <code>instanceOf</code> 的功能，就是判断这个对象的 <code>__proto__</code> 所指向的原型对象是不是就是某个函数的原型对象（也就是函数的 <code>prototype</code> 所指）。在上图中 <code>instanceOf</code> 实际上就是做如下判断：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">p.__proto__ === Person.prototype;<span class="comment">//true</span></div></pre></td></tr></table></figure>
<p>当然，由于原型链，顺藤摸瓜可知，任何对象都会是 <code>Object</code> 的实例；</p>
<p>了解了内部实现原理，我们尝试自定义函数来完成 <code>instanceOf</code> 的工作:</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">isObjInstanceOfFunc</span>(<span class="params">obj,Func</span>)</span>&#123;</div><div class="line">       <span class="keyword">var</span> __proto__ = obj.__proto__;</div><div class="line">       <span class="keyword">do</span>&#123;</div><div class="line">           <span class="keyword">if</span>(__proto__=== Func.prototype)&#123;<span class="keyword">return</span> <span class="literal">true</span>;&#125;</div><div class="line">           <span class="keyword">if</span>(!__proto__)&#123;<span class="keyword">return</span> <span class="literal">false</span>;&#125;<span class="comment">//到了 Object 的原型，undefined，return false停止循环</span></div><div class="line">       &#125;<span class="keyword">while</span> (__proto__=__proto__.__proto__);</div><div class="line">       <span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">   &#125;</div></pre></td></tr></table></figure>
<hr>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;首先通过一个小例子来为我们解释原型链做个准备工作，了解几个概念有助于我们由浅入深挖掘JavaScript原型链。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Person&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;name&lt;/span&gt;)&lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.name = name;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;Person.prototype.sayName = &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;)&lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(&lt;span class=&quot;string&quot;&gt;&#39;My name is :&#39;&lt;/span&gt; + &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.name);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; p = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Person(&lt;span class=&quot;string&quot;&gt;&quot;Gardon&quot;&lt;/span&gt;)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;p.sayName();&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="编程学习" scheme="http://licao404.com/categories/%E7%BC%96%E7%A8%8B%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="前端基础" scheme="http://licao404.com/categories/%E7%BC%96%E7%A8%8B%E5%AD%A6%E4%B9%A0/%E5%89%8D%E7%AB%AF%E5%9F%BA%E7%A1%80/"/>
    
    
      <category term="JavaScript" scheme="http://licao404.com/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>【转】前端开发中的字符编码</title>
    <link href="http://licao404.com/2016/05/12/%E3%80%90%E8%BD%AC%E3%80%91%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91%E4%B8%AD%E7%9A%84%E5%AD%97%E7%AC%A6%E7%BC%96%E7%A0%81/"/>
    <id>http://licao404.com/2016/05/12/【转】前端开发中的字符编码/</id>
    <published>2016-05-12T00:28:36.000Z</published>
    <updated>2016-05-12T01:30:30.733Z</updated>
    
    <content type="html"><![CDATA[<span itemprop="image" itemscope="" itemtype="http://schema.org/ImageObject"><img itemprop="url image" src="http://7xrvo9.com1.z0.glb.clouddn.com/2016.0512/meiziCoder2.jpg" class="full-image" alt="alt"><meta itemprop="width" content="auto"><meta itemprop="height" content="auto"></span>
<blockquote class="blockquote-center">前端开发过程中会接触各种各样的编码，比较常见的主要是UTF－8和HTML实体编码，但是web前端的世界却不止这两种编码，而且编码的选择也会造成一定的问题，如前后端开发过程中不同编码的兼容、多字节编码可能会造成的XSS漏洞等。因此，本文旨在更好的全面了解涉及前端开发领域的字符编码，避免可能出现的交互和开发中的忽视的漏洞。</blockquote>

<a id="more"></a>
<h3 id="URL编码"><a href="#URL编码" class="headerlink" title="URL编码"></a>URL编码</h3><p>我曾经在 <strong>URL编码解码和base64</strong> 一文中讲述了URL编码中的三组函数，并对比了这三组函数与base64编码的关系，在此简要说明一下。</p>
<p><code>escape/unescape</code> 函数针对宽字符做 <code>unicode</code> 编码，并针对码值做十六进制编码，所以使用 <code>escape</code> 针对汉字编码会得到形如 “\uxxxx”      的结果；<code>encodeURI/decodeURI</code>,<code>encodeURIComponent/decodeURIComponent</code> 函数针对宽字节编码却不同于 <code>escape</code> ，首先针对宽字节字符进行 <code>UTF－8</code> 编码，然后针对编码后的结果进行“％”替换，得到结果。以上所述都是针对宽字节字符而言，对于编码靠前的 <code>ASCII</code> 字符而言，上述三组函数的安全字符的范围也有所不同，具体可在上文中了解。</p>
<h3 id="base64编码"><a href="#base64编码" class="headerlink" title="base64编码"></a>base64编码</h3><p><code>base64</code> 编码在前端通常用于图片和 <code>icon</code> 的编码，它将每3个8位字节为一组，分成4组6位字节，并且每个字节的高位补零，形成4个8位的字节，由此可看出 <code>base64</code> 编码是可逆推的。在大多数浏览器中，提供了ASCII字符的 <code>base64</code> 编码函数，即 <code>window.btoa()</code> 。该函数无法针对宽字节进行 <code>base64</code> 编码，若针对中文编码，则需现转换位 <code>UTF－8</code> 编码，然后进行 <code>base64</code> 编码。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">unicodeToBase64</span>(<span class="params">s</span>)</span>&#123; <span class="keyword">return</span> <span class="built_in">window</span>.btoa(<span class="built_in">unescape</span>(<span class="built_in">encodeURIComponent</span> (s))) &#125;</div></pre></td></tr></table></figure>
<p>通过encodeURIComponent对宽字节字符编码，是“％xx”形式的编码，与UTF8编码的区别仅在于前缀（这是由规范RFC3986决定的，将非ASC字符进行某种形式编码，并转换为16进制，并在字节前加上“％”）。因此通过unescape(encodeURIComponent(s))可以转化为UTF8字节。当然，也可自己写一个转换函数，按照一定规则便行为UTF－8编码的字节，如下例：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">unescape</span>(<span class="built_in">encodeURIComponent</span> (<span class="string">"中国"</span>))<span class="comment">//结果："ä¸­å½"</span></div><div class="line"><span class="built_in">encodeURIComponent</span> (<span class="string">"中国"</span>)<span class="comment">//结果："%E4%B8%AD%E5%9B%BD"</span></div><div class="line"><span class="built_in">console</span>.log(<span class="string">"\u00E4\u00B8\u00AD\u00E5\u009B\u00BD"</span>)<span class="comment">//结果：ä¸­å½</span></div></pre></td></tr></table></figure>
<p>通过简单的replace函数，就可以完成URL编码到UTF8编码的转换，进而完成宽字节字符到base64编码的转换。有了这个函数，我们手动生成一些data URI形式的内容，只需制定MIME类型和编码方式，就可以实现文本的转换，如以下代码：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">&lt;a href="data:text/html;charset=utf-8;base64,PHNjcmlwdD5hbGVydCgxMik8L3NjcmlwD4="&gt;abc&lt;/a&gt;</div><div class="line">//未编码前：&lt;a href="javascript: alert(1)"&gt;test&lt;/a&gt;</div></pre></td></tr></table></figure>
<h3 id="前端UTF8编码与后端GBK编码的兼容"><a href="#前端UTF8编码与后端GBK编码的兼容" class="headerlink" title="前端UTF8编码与后端GBK编码的兼容"></a>前端UTF8编码与后端GBK编码的兼容</h3><p>目前前端大都采用UTF8进行编码，不管是html、js抑或是css，而后端则由于历史原因大都采用GBK或GB2312进行解码，因此前端通过parameter传递的URL编码的字符串就不可能直接在后台进行解码，为了更好的兼容性，前端可进行两次URL编码，即encodeURIComponent（encodeURIComponent（“中国”）），这样后端接收到参数后，先使用GBK或GB2312解码，得到了UTF8编码后再使用UTF8解码即可。两次编码主要是利用“ASC字符使用GBK或GB2312编码不变”的特点完成，富有技巧。</p>
<h3 id="HTML实体编码与进制编码"><a href="#HTML实体编码与进制编码" class="headerlink" title="HTML实体编码与进制编码"></a>HTML实体编码与进制编码</h3><p>实体编码针对HTML的预留字符而言，如“&lt;&gt;”等。实体编码有两种形式<code>&amp;</code>实体名;或 <code>&amp;entity_number</code>;，由于浏览器对 <code>&amp;</code> 实体名 <code>;</code> 的兼容性有差别，因此最好采用实体号的形式编码。</p>
<p>进制编码，顾名思义将 <code>ASC</code> 字符对应的码值按照十六进制或十进制编码，并转化为 <code>&amp;#x</code>;(16进制)或 <code>&amp;#D</code>;(10进制)形式。</p>
<p>单单针对实体编码而言并没有什么特殊强调的点，之所以把它单独列为一个章节，意在强调这两种编码与js代码的作用域的关系。</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">onclick</span>=<span class="string">"document.write(&lt;img src=1 onerror=alert(23)&gt;')"</span>&gt;</span>ccc<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">onclick</span>=<span class="string">"document.write('&amp;lt;img src=1 onerror=alert(23)&amp;gt;')"</span>&gt;</span>ccc<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">&amp;#x3c;&amp;#x69;&amp;#x6d;&amp;#x67;&amp;#x20;&amp;#x73;&amp;#x72;&amp;#x63;&amp;#x3d;&amp;#x31;&amp;#x20;&amp;#x6f;&amp;#x6e;&amp;#x65;&amp;#x72;&amp;#x72;&amp;#x6f;&amp;#x72;&amp;#x3d;&amp;#x61;&amp;#x6c;&amp;#x65;&amp;#x72;&amp;#x74;&amp;#x28;&amp;#x32;&amp;#x33;&amp;#x29;&amp;#x3e;</div><div class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">1</span> <span class="attr">onerror</span>=<span class="string">&amp;#x61;&amp;#x6c;&amp;#x65;&amp;#x72;&amp;#x74;&amp;#x28;&amp;#x32;&amp;#x33;&amp;#x29;</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></div><div class="line"><span class="built_in">document</span>.write(<span class="string">'&amp;lt;img src=1 onerror=alert(23)&amp;gt;'</span>);</div><div class="line"><span class="built_in">document</span>.write(<span class="string">'&lt;img src=1 onerror=&amp;#x61;&amp;#x6c;&amp;#x65;&amp;#x72;&amp;#x74;&amp;#x28;&amp;#x33;&amp;#x29;&gt;'</span>);</div><div class="line"><span class="built_in">document</span>.write(<span class="string">'&amp;#x3c;&amp;#x69;&amp;#x6d;&amp;#x67;&amp;#x20;&amp;#x73;&amp;#x72;&amp;#x63;&amp;#x3d;&amp;#x31;&amp;#x20;&amp;#x6f;&amp;#x6e;&amp;#x65;&amp;#x72;&amp;#x72;&amp;#x6f;&amp;#x72;&amp;#x3d;&amp;#x61;&amp;#x6c;&amp;#x65;&amp;#x72;&amp;#x74;&amp;#x28;&amp;#x32;&amp;#x33;&amp;#x29;&amp;#x3e;'</span>);</div><div class="line"><span class="built_in">document</span>.write(<span class="string">'\u003c\u0069\u006d\u0067\u0020\u0073\u0072\u0063\u003d\u0031\u0020\u006f\u006e\u0065\u0072\u0072\u006f\u0072\u003d\u0061\u006c\u0065\u0072\u0074\u0028\u0032\u0033\u0029\u003e'</span>)</div><div class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div></pre></td></tr></table></figure>
<p>代码中列举了8个例子，第一个在事件处理函数onclick中输出HTML片段；第二个则输出经实体编码后的HTML片段；第三个则是直接针对 <code>&lt;img src=1 onerror=alert(23)&gt;</code> 做16进制编码；第四个则是针对onerror事件处理函数做16进制编码；第五个则是在脚本中输出实体编码的字符；第六个针对事件处理函数做16进制编码；第七个则针对所有的字符做16进制编码；第八个则是在script中直接输出 <code>&lt;img src=1 onerror=alert(23)&gt;</code> 的unicode编码。</p>
<p>对比结果，前两个例子在点击后都会弹出alert；第三个例子则在页面中显示文本 <code>&lt;img src=1 onerror=alert(23)&gt;</code> ；第四个例子则会在页面加载初期弹出alert；第五、七会输出字符串；第六、八则会在第四个例子中的alert之后也弹出alert。现在分析这些结果，通过第一二个例子可知道，HTML标签中（除script标签）的内联js代码可以进行HTML实体编码，这是非常重要的一点，我们可以更为明确的进行验证：</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">onclick</span>=<span class="string">"alert('&amp;lt;img src=1 onerror=alert(23)&amp;gt;')"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure>
<p>输出的结果自然是 <code>&lt;img src=1onerror=alert(23)&gt;</code>，这的确论证了我们上文提到的这一点；第三个例子说明了HTML解析器在进行词法分析前，首先进行解码，十六进制和十进制皆可，因此，结果自然输出形如 <code>&lt;img src=1 onerror=alert(23)&gt;</code> 的字符串；第四个例子则紧接着论证了内联在HTML的并采用十六进制编码的js代码同样会被正确解析并执行，这说明了进制编码同样可被HTML解析器解析；第五、七个例子说明在js中同样可以使用实体编码和进制编码，解析的结果会渲染在页面上；第六个例子则论证了上一观点，只针对事件处理函数做进制编码，执行后页面弹出alert；第八个例子则是在js中执行unicode编码的字符串，正常alert。</p>
<p>由此可见，js代码内联在HTML的非script标签内，则会遵守HTML编码规范：进制编码和实体编码；而在js代码（script标签内以及js文件内）中，则遵从js编码：1,unicode形式编码(\uxxxx)2,普通的16进制编码(\xH)，这可通过第八个例子得到证明。之所以在本节提到这么多编码特点，主要提醒大家在预防XSS时需要注意的几点：</p>
<ul>
<li><p>检测用户输入时，不仅仅需要防范类似“&lt;&gt;”这样的字符，通过unicode编码或进制编码仍有可能注入代码</p>
</li>
<li><p>需要针对特定的关键字做过滤，如“eval、write、prototype”</p>
</li>
<li><p>尽可能禁止内联事件处理函数的使用</p>
</li>
<li><p>js过滤“src/href/action”属性，如“javascript:”,”data:”</p>
</li>
</ul>
<h3 id="JS编码"><a href="#JS编码" class="headerlink" title="JS编码"></a>JS编码</h3><p>其实在上节中已提到了js编码，即js可执行unicode编码和十六（八）进制编码后的字符串，但是不支持十进制编码的字串。具体操作可通过常用的几个函数来实现，如“eval，write，setTimeout，Function”执行编码后的字符串；同样，对于十进制编码的字串，通过结合String.fromCharCode和eval同样可以执行。</p>
<p>在此附上笔者实现的字符转换，更为灵活的实现各种自定义形式的字串编码:</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> Code = &#123;&#125;;</div><div class="line">    <span class="comment">/**</span></div><div class="line">     *</div><div class="line">     * @param str 待编码字串</div><div class="line">     * @param jinzhi 进制编码</div><div class="line">     * @param prefix 前缀</div><div class="line">     * @param postfix 后缀</div><div class="line">     * @param count 总共编码的位数，默认为4</div><div class="line">     * @returns &#123;string&#125;</div><div class="line">     */</div><div class="line">    Code.encode = <span class="function"><span class="keyword">function</span>(<span class="params">&#123;str = <span class="string">''</span>,jinzhi = <span class="string">'16'</span>,prefix = <span class="string">'\\u'</span>,postfix = <span class="string">';'</span>,count = <span class="string">'4'</span>&#125; = &#123;&#125;</span>)</span>&#123;</div><div class="line">        <span class="keyword">var</span> ret = <span class="string">''</span>;</div><div class="line">        <span class="keyword">var</span> addZero,tmp;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">let</span> i=<span class="number">0</span>;i&lt;str.length;i++)&#123;</div><div class="line">            tmp = str.charCodeAt(i).toString(jinzhi);</div><div class="line">            addZero = count - tmp.length + <span class="number">1</span>;</div><div class="line">            ret += prefix + <span class="keyword">new</span> <span class="built_in">Array</span>(addZero).join(<span class="string">'0'</span>) + tmp + postfix;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> ret;</div><div class="line">    &#125;;</div><div class="line">    Code.decode = <span class="function"><span class="keyword">function</span>(<span class="params">&#123;str = <span class="string">''</span>,jinzhi = <span class="string">'16'</span>,prefix = <span class="string">'\\u'</span>,postfix = <span class="string">';'</span>&#125; = &#123;&#125;</span>)</span>&#123;</div><div class="line">        <span class="keyword">var</span> ret = <span class="string">''</span>;</div><div class="line">        <span class="keyword">var</span> splits = str.split(<span class="string">';'</span>);</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">let</span> i=<span class="number">0</span>;i&lt;splits.length;i++)&#123;</div><div class="line">            <span class="keyword">let</span> tmp = splits[i].replace(prefix,<span class="string">''</span>);</div><div class="line">            ret += <span class="built_in">String</span>.fromCharCode(<span class="built_in">parseInt</span>(tmp,jinzhi));</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> ret;</div><div class="line">    &#125;;</div><div class="line"></div><div class="line">    <span class="built_in">console</span>.log(Code.encode(&#123;<span class="attr">str</span>: <span class="string">'&lt;img src=@ onerror=alert(123) /&gt;'</span>&#125;));</div><div class="line">    <span class="built_in">console</span>.log(Code.decode(&#123;<span class="attr">str</span>: Code.encode(&#123;<span class="attr">str</span>: <span class="string">'&lt;img src=@ onerror=alert(123) /&gt;'</span>&#125;)&#125;))</div></pre></td></tr></table></figure>
<p>另外，对于js输出点的过滤其实并不仅限于上文提到的如eval、setTimeout、Function等几个，由于JS语法比较灵活相对“漏洞”较多，可使用的“线索”也越丰富，如前段时间在Stackoverflow上发现的一个问题，即</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">(<span class="number">0</span>)[<span class="string">'constructor'</span>][<span class="string">'constructor'</span>](<span class="string">'return "abc;"'</span>)()</div></pre></td></tr></table></figure>
<p>同样可以执行JS代码，确实挺有特点的，具体为什么上述形式可以执行代码，请读者自己仔细品味。</p>
<blockquote>
<p>本文由杭州尚妆@欲休分享  |  <a href="http://www.cnblogs.com/accordion/p/5468704.html" target="_blank" rel="external">原文</a></p>
</blockquote>
<hr>
]]></content>
    
    <summary type="html">
    
      &lt;span itemprop=&quot;image&quot; itemscope itemtype=&quot;http://schema.org/ImageObject&quot;&gt;&lt;img itemprop=&quot;url image&quot; src=&quot;http://7xrvo9.com1.z0.glb.clouddn.com/2016.0512/meiziCoder2.jpg&quot; class=&quot;full-image&quot; alt=&quot;alt&quot; /&gt;&lt;meta itemprop=&quot;width&quot; content=&quot;auto&quot;&gt;&lt;meta itemprop=&quot;height&quot; content=&quot;auto&quot;&gt;&lt;/span&gt;
&lt;blockquote class = &quot;blockquote-center&quot;&gt;前端开发过程中会接触各种各样的编码，比较常见的主要是UTF－8和HTML实体编码，但是web前端的世界却不止这两种编码，而且编码的选择也会造成一定的问题，如前后端开发过程中不同编码的兼容、多字节编码可能会造成的XSS漏洞等。因此，本文旨在更好的全面了解涉及前端开发领域的字符编码，避免可能出现的交互和开发中的忽视的漏洞。&lt;/blockquote&gt;
    
    </summary>
    
      <category term="编程学习" scheme="http://licao404.com/categories/%E7%BC%96%E7%A8%8B%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="前端高级" scheme="http://licao404.com/categories/%E7%BC%96%E7%A8%8B%E5%AD%A6%E4%B9%A0/%E5%89%8D%E7%AB%AF%E9%AB%98%E7%BA%A7/"/>
    
    
      <category term="转载" scheme="http://licao404.com/tags/%E8%BD%AC%E8%BD%BD/"/>
    
      <category term="干货" scheme="http://licao404.com/tags/%E5%B9%B2%E8%B4%A7/"/>
    
      <category term="字符编码" scheme="http://licao404.com/tags/%E5%AD%97%E7%AC%A6%E7%BC%96%E7%A0%81/"/>
    
  </entry>
  
  <entry>
    <title>OOP For JavaScript</title>
    <link href="http://licao404.com/2016/05/10/OOP-For-JavaScript/"/>
    <id>http://licao404.com/2016/05/10/OOP-For-JavaScript/</id>
    <published>2016-05-10T14:08:53.000Z</published>
    <updated>2016-07-12T13:44:11.390Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<h3 id="【知识点】"><a href="#【知识点】" class="headerlink" title="【知识点】"></a>【知识点】</h3></blockquote>
<h4 id="1-OOP-指什么？有哪些特性"><a href="#1-OOP-指什么？有哪些特性" class="headerlink" title="1. OOP 指什么？有哪些特性 "></a><strong>1. OOP 指什么？有哪些特性 </strong></h4><p>OOP （Object Oriented Programming）是面向对象编程，是一种计算机编程架构。面向对象语言（C++，Java等）有一个标志，都有类的概念，通过类可以创建多个具有相同属性和方法的对象（类的实例化）。OOP 达到了软件工程的三个主要目标：重用性、灵活性和扩展性。为了实现整体运算，每个对象都能够接收信息、处理数据和向其它对象发送信息。</p>
<a id="more"></a>
<p>OOP的特征：</p>
<ul>
<li><p><strong>封装</strong>：确保组件（数据和功能一起在运行着的计算机程序中形成的单元）不会以不可预期的方式改变其它组件的内部状态；只有在那些提供了内部状态改变方法的组件中，才可以访问其内部状态。每类组件都提供了一个与其它组件联系的接口，并规定了其它组件进行调用的方法。</p>
</li>
<li><p><strong>抽象</strong>：程序有能力忽略正在处理中信息的某些方面，即对信息主要方面关注的能力。</p>
</li>
<li><p><strong>多态</strong>：组件的引用和类集会涉及到其它许多不同类型的组件，而且引用组件所产生的结果依据实际调用的类型。</p>
</li>
<li><p><strong>继承</strong>：允许在现存的组件基础上创建子类组件，这统一并增强了多态性和封装性。典型地来说就是用类来对组件进行分组，而且还可以定义新类为现存的类的扩展，这样就可以将类组织成树形或网状结构，这体现了动作的通用性。</p>
</li>
</ul>
<h4 id="2-如何通过构造函数的方式创建一个拥有属性和方法的对象"><a href="#2-如何通过构造函数的方式创建一个拥有属性和方法的对象" class="headerlink" title="2. 如何通过构造函数的方式创建一个拥有属性和方法的对象?"></a><strong>2. 如何通过构造函数的方式创建一个拥有属性和方法的对象?</strong></h4><p>创建自定义的构造函数，从而定义自定义对象类型的属性和方法，例如下面的构造函数模式：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Student</span>(<span class="params">name,age,score</span>)</span>&#123;</div><div class="line">    <span class="keyword">this</span>.name = name;</div><div class="line">    <span class="keyword">this</span>.age = age;</div><div class="line">    <span class="keyword">this</span>.score = score;</div><div class="line">    <span class="keyword">this</span>.alertScore = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">        alert(<span class="keyword">this</span>.name + <span class="string">':'</span> + <span class="keyword">this</span>.score);</div><div class="line">    &#125;;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>创建一个 <code>Student</code> 的实例，需要使用 <strong>new</strong> 操作符：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> xiaomin = <span class="keyword">new</span> Student(<span class="string">"xiaomin"</span>,<span class="number">20</span>,<span class="number">80</span>);</div><div class="line"><span class="keyword">var</span> gardon = <span class="keyword">new</span> Student(<span class="string">"gardon"</span>,<span class="number">22</span>,<span class="number">75</span>);</div></pre></td></tr></table></figure></p>
<p>用 <code>new</code> 调用构造函数实际上经过了4中步骤：</p>
<ul>
<li>创建一个新对象；</li>
<li>将构造函数的作用域赋给新对象(this指向这个新对象)；</li>
<li>执行构造函数中的代码，将属性和方法添加到这个对象上；</li>
<li>返回新对象</li>
</ul>
<h4 id="3-prototype-是什么？有什么特性"><a href="#3-prototype-是什么？有什么特性" class="headerlink" title="3. prototype 是什么？有什么特性"></a><strong>3. prototype 是什么？有什么特性</strong></h4><p>JavaScript中创建的每一个函数都有一个 <strong>prototype（原型）</strong> 属性，这个属性是一个指针，指向一个原型对象，这个对象拥有一系列属性和方法且能被所有特定类型的实例共享。换而言之 <code>prototype</code> 就是上题中通过调用构造函数创建的那个对象实例(<code>xiaomin</code>)的原型对象。</p>
<p>特性：让特定对象的所有实例共享 <code>prototype</code> (原型对象)包含的属性和方法。不用在构造函数中定义对象实例的信息，而是可以将这些信息直接添加到 <code>prototype</code> 中,如上题中：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Student</span>(<span class="params"></span>)</span>&#123;&#125;;</div><div class="line">Student.prototype.name = <span class="string">"John"</span>;</div><div class="line">Student.prototype.age = <span class="number">18</span>;</div><div class="line">Student.prototype.score = <span class="number">90</span>;</div><div class="line">Student.prototype.alertScore = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    alert(<span class="keyword">this</span>.name + <span class="string">':'</span> + <span class="keyword">this</span>.score);</div><div class="line">&#125;</div><div class="line"><span class="keyword">var</span> xiaomin = <span class="keyword">new</span> Student();<span class="comment">//alert John:90</span></div><div class="line"><span class="built_in">console</span>.log(xiaomin.age);<span class="comment">//console.log 18</span></div><div class="line"><span class="keyword">var</span> gardon = <span class="keyword">new</span> Student();</div><div class="line">gardon.alertScore();</div><div class="line"><span class="built_in">console</span>.log(xiaomin.alertScore === gardon.alertScore);<span class="comment">//true</span></div></pre></td></tr></table></figure></p>
<h4 id="4-画出如下代码的原型图"><a href="#4-画出如下代码的原型图" class="headerlink" title="4. 画出如下代码的原型图"></a><strong>4. 画出如下代码的原型图</strong></h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">People</span> (<span class="params">name</span>)</span>&#123;</div><div class="line">  <span class="keyword">this</span>.name = name;</div><div class="line">  <span class="keyword">this</span>.sayName = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">'my name is:'</span> + <span class="keyword">this</span>.name);</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">People.prototype.walk = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">  <span class="built_in">console</span>.log(<span class="keyword">this</span>.name + <span class="string">' is walking'</span>);  </div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">var</span> p1 = <span class="keyword">new</span> People(<span class="string">'小明'</span>);</div><div class="line"><span class="keyword">var</span> p2 = <span class="keyword">new</span> People(<span class="string">'蓝岚'</span>);</div></pre></td></tr></table></figure>
<p><img src="http://7xrvo9.com1.z0.glb.clouddn.com/2016.0511/%E5%8E%9F%E5%9E%8B%E5%9B%BE2.png" alt=""></p>
<h4 id="5-以下代码中的变量-name-有什么区别"><a href="#5-以下代码中的变量-name-有什么区别" class="headerlink" title="5. 以下代码中的变量 name 有什么区别"></a><strong>5. 以下代码中的变量 name 有什么区别</strong></h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">People</span> (<span class="params"></span>)</span>&#123;</div><div class="line">  <span class="keyword">var</span> name = <span class="string">"小明"</span>            <span class="comment">//定义了一个局部变量name</span></div><div class="line">  <span class="keyword">this</span>.name = <span class="string">"我"</span>;             <span class="comment">//给this所指的对象（多种情况）绑定一个name属性</span></div><div class="line">&#125;</div><div class="line">People.name = <span class="string">"jscode"</span>;         <span class="comment">//给函数People（对象）绑定一个name属性</span></div><div class="line"></div><div class="line">People.prototype.name = <span class="string">"蓝岚"</span>;<span class="comment">//给People的原型对象绑定一个name属性，如果new一个People的实例，这个实例的name属性为“我”，而不是原型对象上的“学前端”</span></div></pre></td></tr></table></figure>
<hr>
<blockquote>
<h3 id="【练习】"><a href="#【练习】" class="headerlink" title="【练习】"></a>【练习】</h3></blockquote>
<h4 id="1-创建一个-Car-对象，拥有属性name、color、status；拥有方法run，stop，getStatus"><a href="#1-创建一个-Car-对象，拥有属性name、color、status；拥有方法run，stop，getStatus" class="headerlink" title="1. 创建一个 Car 对象，拥有属性name、color、status；拥有方法run，stop，getStatus"></a><strong>1. 创建一个 Car 对象，拥有属性name、color、status；拥有方法run，stop，getStatus</strong></h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Car</span>(<span class="params">name,color,status</span>)</span>&#123;</div><div class="line">    <span class="keyword">this</span>.name = name;</div><div class="line">    <span class="keyword">this</span>.color = color;</div><div class="line">    <span class="keyword">this</span>.status = status;</div><div class="line">    <span class="keyword">this</span>.run = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">        <span class="keyword">this</span>.status = <span class="string">"runing"</span>;</div><div class="line">    &#125;;</div><div class="line">    <span class="keyword">this</span>.stop = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">        <span class="keyword">this</span>.status = <span class="string">"stop"</span>;</div><div class="line">    &#125;;</div><div class="line">    <span class="keyword">this</span>.getStatus = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.status;</div><div class="line">    &#125;;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="2-创建一个-GoTop-对象，当-new-一个-GotTop-对象则会在页面上创建一个回到顶部的元素，点击页面滚动到顶部。拥有以下属性和方法"><a href="#2-创建一个-GoTop-对象，当-new-一个-GotTop-对象则会在页面上创建一个回到顶部的元素，点击页面滚动到顶部。拥有以下属性和方法" class="headerlink" title="2. 创建一个 GoTop 对象，当 new 一个 GotTop 对象则会在页面上创建一个回到顶部的元素，点击页面滚动到顶部。拥有以下属性和方法"></a><strong>2. 创建一个 GoTop 对象，当 new 一个 GotTop 对象则会在页面上创建一个回到顶部的元素，点击页面滚动到顶部。拥有以下属性和方法</strong></h4><ul>
<li>ct 属性，GoTop 对应的 DOM 元素的容器</li>
<li>target属性， GoTop 对应的 DOM 元素</li>
<li>bindEvent 方法， 用于绑定事件</li>
<li>createNode 方法， 用于在容器内创建节点</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">GoTop</span>(<span class="params">$ct</span>)</span>&#123;</div><div class="line">    <span class="keyword">this</span>.ct = $ct;</div><div class="line">    <span class="keyword">this</span>.target = $(<span class="string">'&lt;div id="back-top"&gt;Top&lt;/div&gt;'</span>);</div><div class="line">&#125;</div><div class="line">GoTop.prototype.createNode = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="keyword">this</span>.ct.append(<span class="keyword">this</span>.target);</div><div class="line">&#125;;</div><div class="line">GoTop.prototype.bindEvent = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="keyword">this</span>.target.on(<span class="string">'click'</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">        $(<span class="built_in">window</span>).scrollTop(<span class="number">0</span>);</div><div class="line">    &#125;);</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<h4 id="3-使用构造函数创建对象的方式完成轮播功能-demo-，使用如下调用方式"><a href="#3-使用构造函数创建对象的方式完成轮播功能-demo-，使用如下调用方式" class="headerlink" title="3. 使用构造函数创建对象的方式完成轮播功能( demo )，使用如下调用方式"></a><strong>3. 使用构造函数创建对象的方式完成轮播功能( demo )，使用如下调用方式</strong></h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Carousel</span>(<span class="params">$node</span>)</span>&#123;</div><div class="line"><span class="comment">//todo...</span></div><div class="line">&#125;</div><div class="line">Carousel.prototype = &#123;</div><div class="line"><span class="comment">//todo ..</span></div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="keyword">var</span> $node1 = $(<span class="string">'.ct'</span>).eq(<span class="number">0</span>);</div><div class="line"><span class="keyword">var</span> $node2 = $(<span class="string">'.ct'</span>).eq(<span class="number">1</span>);</div><div class="line"><span class="keyword">var</span> carousel1 = <span class="keyword">new</span> Carousel($node1);</div><div class="line"><span class="keyword">var</span> carousel2 = <span class="keyword">new</span> Carousel($node2);</div></pre></td></tr></table></figure>
<ul>
<li><p><a href="http://febox.applinzi.com/task35/task35-1.html" target="_blank" rel="external">效果预览</a></p>
</li>
<li><p><a href="https://github.com/licao404/landemo/blob/master/task35/task35-1.html" target="_blank" rel="external">实现代码</a></p>
</li>
</ul>
<h4 id="4-使用构造函数创建对象的方式实现-Tab-切换功能"><a href="#4-使用构造函数创建对象的方式实现-Tab-切换功能" class="headerlink" title="4. 使用构造函数创建对象的方式实现 Tab 切换功能"></a><strong>4. 使用构造函数创建对象的方式实现 Tab 切换功能</strong></h4><ul>
<li><p><a href="http://febox.applinzi.com/task35/task35-2.html" target="_blank" rel="external">效果预览</a></p>
</li>
<li><p><a href="https://github.com/licao404/landemo/blob/master/task35/task35-2.html" target="_blank" rel="external">实现代码</a></p>
</li>
</ul>
<hr>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;h3 id=&quot;【知识点】&quot;&gt;&lt;a href=&quot;#【知识点】&quot; class=&quot;headerlink&quot; title=&quot;【知识点】&quot;&gt;&lt;/a&gt;【知识点】&lt;/h3&gt;&lt;/blockquote&gt;
&lt;h4 id=&quot;1-OOP-指什么？有哪些特性&quot;&gt;&lt;a href=&quot;#1-OOP-指什么？有哪些特性&quot; class=&quot;headerlink&quot; title=&quot;1. OOP 指什么？有哪些特性 &quot;&gt;&lt;/a&gt;&lt;strong&gt;1. OOP 指什么？有哪些特性 &lt;/strong&gt;&lt;/h4&gt;&lt;p&gt;OOP （Object Oriented Programming）是面向对象编程，是一种计算机编程架构。面向对象语言（C++，Java等）有一个标志，都有类的概念，通过类可以创建多个具有相同属性和方法的对象（类的实例化）。OOP 达到了软件工程的三个主要目标：重用性、灵活性和扩展性。为了实现整体运算，每个对象都能够接收信息、处理数据和向其它对象发送信息。&lt;/p&gt;
    
    </summary>
    
      <category term="编程学习" scheme="http://licao404.com/categories/%E7%BC%96%E7%A8%8B%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="前端基础" scheme="http://licao404.com/categories/%E7%BC%96%E7%A8%8B%E5%AD%A6%E4%B9%A0/%E5%89%8D%E7%AB%AF%E5%9F%BA%E7%A1%80/"/>
    
    
      <category term="JavaScript" scheme="http://licao404.com/tags/JavaScript/"/>
    
      <category term="OOP" scheme="http://licao404.com/tags/OOP/"/>
    
  </entry>
  
  <entry>
    <title>了解 HTTP</title>
    <link href="http://licao404.com/2016/05/07/%E4%BA%86%E8%A7%A3-HTTP/"/>
    <id>http://licao404.com/2016/05/07/了解-HTTP/</id>
    <published>2016-05-07T07:03:37.000Z</published>
    <updated>2016-05-14T03:25:06.988Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://7xrvo9.com1.z0.glb.clouddn.com/2016.0507/macbook-926558.jpg" alt=""></p>
<blockquote>
<h4 id="OSI-七层模型指什么？"><a href="#OSI-七层模型指什么？" class="headerlink" title="OSI 七层模型指什么？"></a><strong>OSI 七层模型指什么？</strong></h4></blockquote>
<p>OSI（Open System Interconnection）七层模型是国际标准化组织（ISO）制定的一个用于计算机或通信系统间互联的标准体系，它是一个七层的、抽象的模型，不仅包括一系列抽象的术语或概念，也包括具体的协议。</p>
<a id="more"></a>
<ul>
<li><p><strong>应用层</strong> (Application)：，OSI 参考模型中的最高层；网络服务与最终用户的一个接口。各种应用程序协议，HTTP,FTP,TFTP,SMTP,SNMP,DNS,POP3;</p>
</li>
<li><p><strong>表示层</strong>（Presentation Layer）：OSI 参考模型中的第六层；数据的表示、安全、压缩。在表示层，数据将按照网络能理解的方案进行格式化，这种格式化也因所使用网络的类型不同而不同；表示层管理数据的解密与加密，如系统口令的处理；除此之外，表示层协议还对图片和文件格式信息进行解码和编码。</p>
</li>
<li><p><strong>会话层</strong>（Session Layer）：OSI 参考模型中的第五层；负责在网络中的两节点之间建立、维持和终止通信。 会话层的功能包括：建立通信链接，保持会话过程通信链接的畅通，同步两个节点之间的对话，决定通信是否被中断以及通信中断时决定从何处重新发送。</p>
</li>
<li><p><strong>传输层</strong>（Transport）：OSI 参考模型的第四层；定义传输数据的协议端口号，以及流控和差错效验。协议有：<code>TCP</code> 、<code>UDP</code>，数据包一旦离开网卡即进入网络传输层；</p>
</li>
<li><p><strong>网络层</strong>（Network）：OSI 参考模型的第三层；进行逻辑地址寻址，实现不同网络之间的路径选择。协议有：<code>ICMP</code> 、<code>IGMP</code> 、<code>IP（IPV4 IPV6）</code> 、 <code>ARP</code> 、<code>RARP</code>；</p>
</li>
<li><p><strong>数据链路层</strong> (Link) ：OSI 参考模型的第二层；建立逻辑连接、进行硬件地址寻址、差错校验等功能。（由底层网络定义协议）<br>将比特组合成字节进而组合成帧，用MAC地址访问介质，错误发现但不能纠正；</p>
</li>
<li><p><strong>物理层</strong>（Physical Layer）：OSI 参考模型的最低层；该层包括物理连网媒介，如电缆连线连接器。物理层的协议产生并检测电压以便发送和接收携带数据的信号。用户要传递信息就要利用一些物理媒体，如双绞线、同轴电缆等，但具体的物理媒体并不在OSI的7层之内，有人把物理媒体当做第0层，物理层的任务就是为它的上一层提供一个物理连接，以及它们的机械、电气、功能和规程特性。</p>
</li>
</ul>
<blockquote>
<h4 id="HTTP-的工作原理是什么？"><a href="#HTTP-的工作原理是什么？" class="headerlink" title="HTTP 的工作原理是什么？"></a><strong>HTTP 的工作原理是什么？</strong></h4></blockquote>
<p>HTTP协议（超文本传输协议）定义了Web客户端如何从Web服务器请求Web页面，以及服务器如何将Web页面传送给客户端。HTTP协议采用了请求/响应模型。客户端向服务器端发送一个请求报文（包含请求方法、URL、协议版本、请求头部和请求数据）。服务器端以一个状态作为响应（包括协议的版本、成功或错误代码、服务器信息、响应头和响应数据）。断开连接。HTTP是一种无状态协议。</p>
<blockquote>
<h4 id="URI-的格式是什么？常见的协议有哪些？"><a href="#URI-的格式是什么？常见的协议有哪些？" class="headerlink" title="URI 的格式是什么？常见的协议有哪些？"></a><strong>URI 的格式是什么？常见的协议有哪些？</strong></h4></blockquote>
<p>URI（统一资源标识符）格式：<strong><code>&lt;scheme&gt;://&lt;user&gt;:&lt;password&gt;@&lt;host&gt;:&lt;port&gt;/&lt;path&gt;;&lt;params&gt;?&lt;query&gt;#&lt;hash&gt;</code></strong></p>
<ul>
<li><p><strong><code>&lt;scheme&gt;</code></strong> : 协议名，可能为 <code>HTTP</code>(默认端口80)、<code>HTTPS</code>(默认端口443)、<code>FTP</code>(默认端口21)、<code>SSH</code>(默认端口22)、<code>SMTP</code>(默认端口25)、<code>IMAP</code>(默认端口143)等；</p>
</li>
<li><p><strong><code>&lt;user&gt;</code></strong> : 用户名，HTTP 协议中不常见，SSH 协议一般是必须的；</p>
</li>
<li><p><strong><code>&lt;password&gt;</code></strong> : 密码，现在一般不会用明文的方式将密码写在 URI 上；</p>
</li>
<li><p><strong><code>&lt;host&gt;</code></strong> : 主机地址，域名或者 IP ，用于确定要连接的对象的地址；</p>
</li>
<li><p><strong><code>&lt;port&gt;</code></strong> : 端口号，用来区分主机上的进程，以便精确定位要连接的服务；</p>
</li>
<li><p><strong><code>&lt;path&gt;</code></strong> : 资源路径，用来确认资源存放的位置；</p>
</li>
<li><p><strong><code>&lt;params&gt;</code></strong> : 参数，以键值对的形式提供，以 <code>;</code> 分隔开。在例如 ftp 协议中可用于规定文件是以二进制形式还是文本形式传输。</p>
</li>
<li><p><strong><code>&lt;query&gt;</code></strong> : 查询字符串，<code>GET</code>请求传递参数；</p>
</li>
<li><p><strong><code>&lt;hash&gt;</code></strong> : 片段，定位文档位置；</p>
</li>
</ul>
<blockquote>
<h4 id="HTTP-协议有几种和服务器交互的方法"><a href="#HTTP-协议有几种和服务器交互的方法" class="headerlink" title="HTTP 协议有几种和服务器交互的方法"></a><strong>HTTP 协议有几种和服务器交互的方法</strong></h4></blockquote>
<ul>
<li><p><strong>GET</strong> : 请求服务器资源；</p>
</li>
<li><p><strong>POST</strong> : 向服务器发送数据，比如发送表单数据；</p>
</li>
<li><p><strong>HEAD</strong> : 请求服务器资源，但是服务器的响应中没有资源的body，只有资源的基本信息。可以用来获取资源元信息，通过状态吗查看资源是否存在，以及测试资源是否被修改；</p>
</li>
<li><p><strong>TRACE</strong> : 远程诊断服务器；</p>
</li>
<li><p><strong>PUT</strong> : 向服务器写入资源。让服务器用请求的主体部分创建一个请求 URL 命名的文档，如果存在就替换。出于安全原因，并不是所有的服务器都实现这个方法；</p>
</li>
<li><p><strong>DELETE</strong> : 删除服务器上的请求的资源。出于安全原因，服务器可能会不支持这个方法；</p>
</li>
<li><p><strong>OPTIONS</strong> : 询问服务器可以执行哪些方法；</p>
</li>
<li><p><strong>CONNECT</strong> : 用于代理进行传输，如使用SSL；</p>
</li>
<li><p>……</p>
</li>
</ul>
<blockquote>
<h4 id="状态码-200，301，-304，403-404-500，503-分别代表什么意思"><a href="#状态码-200，301，-304，403-404-500，503-分别代表什么意思" class="headerlink" title="状态码 200，301， 304，403, 404, 500，503 分别代表什么意思"></a><strong>状态码 200，301， 304，403, 404, 500，503 分别代表什么意思</strong></h4></blockquote>
<ul>
<li><p><strong>200 : OK</strong>  这是我们最想看到的状态码。服务器已经成功处理客户端发来的请求。由于和服务器交互方法的不同，返回的信息有所不同：使用 GET 方法时，对应请求资源的实体会随着状态码一起作为响应返回；而使用 HEAD 方法时，在响应中只返回首部，不会返回实体的主体部分；</p>
</li>
<li><p><strong>301 : Moved Permanently</strong>  永久性重定向。请求的资源已被分配新的URI，以后应使用资源现在所指的URI；</p>
</li>
<li><p><strong>304 : Not Modified</strong>  如果客户端发送了一个带条件的 GET 请求且该请求已被允许，而文档的内容（自上次访问以来或者根据请求的条件）并没有改变，则服务器应当返回这个状态码。304响应禁止包含消息体，因此始终以消息头后的第一个空行结尾;</p>
</li>
<li><p><strong>403 : Forbidden</strong> 服务器已经理解请求，但是拒绝执行它。这个请求不应该被重复提交,如果这不是一个 HEAD 请求，而且服务器希望能够讲清楚为何请求不能被执行，那么就应该在实体内描述拒绝的原因。当然服务器也可以返回一个404响应，假如它不希望让客户端获得任何信息;</p>
</li>
<li><p><strong>404 : Not Found</strong> 请求失败，请求所希望得到的资源未被在服务器上发现。404这个状态码被广泛应用于当服务器不想揭示到底为何请求被拒绝或者没有其他适合的响应可用的情况下。出现这个错误的最有可能的原因是服务器端没有这个页面。</p>
</li>
<li><p><strong>500 : Internal Server Error</strong> 服务器遇到了一个未曾预料的状况，导致了它无法完成对请求的处理。一般来说，这个问题都会在服务器端的源代码出现错误时出现。</p>
</li>
<li><p><strong>503 : Service Unavailable</strong> 由于临时的服务器维护或者 <strong>过载</strong>，服务器当前无法处理请求。这个状况是临时的，并且将在一段时间以后恢复。如果能够预计延迟时间，那么响应中可以包含一个 Retry-After 头用以标明这个延迟时间。如果没有给出这个 Retry-After 信息，那么客户端应当以处理500响应的方式处理它。</p>
</li>
</ul>
<blockquote>
<h4 id="报文有哪几部分组成？"><a href="#报文有哪几部分组成？" class="headerlink" title="报文有哪几部分组成？"></a><strong>报文有哪几部分组成？</strong></h4></blockquote>
<p>HTTP 报文是在 HTTP 应用程序之间发送的数据块。这些数据块以一些文本形式的 <strong>元信息</strong> 开头，描述报文的内容及含义，后面跟着可选的数据部分。<br>HTTP 报文由三部分组成：</p>
<ul>
<li>起始行（start line）：对报文进行描述；</li>
<li>首部 （header）：包含属性；</li>
<li>主体（body）：包含可选的数据；</li>
</ul>
<blockquote>
<h4 id="请求头的格式和作用是什么？给个范例截图说明"><a href="#请求头的格式和作用是什么？给个范例截图说明" class="headerlink" title="请求头的格式和作用是什么？给个范例截图说明"></a><strong>请求头的格式和作用是什么？给个范例截图说明</strong></h4></blockquote>
<p>随便打开一个网页，在开发者工具的 <code>NetWork</code> 中查看 <code>Request Headers</code> ，格式如下：</p>
<p><img src="http://7xr868.com1.z0.glb.clouddn.com/task34/RequestHeaders.png" alt=""><br>其中包含 <strong>请求方法</strong> 、 <strong>请求URI地址</strong>、 <strong>协议版本</strong>，很明显截图中的请求方法为 <code>GET</code>，请求地址为 <code>/categories</code>，协议及其版本为 <code>HTTP/1.1</code>;</p>
<p>查看 <code>Response Headers</code>，格式如下：</p>
<p><img src="http://7xr868.com1.z0.glb.clouddn.com/task34/ResponseHeaders.png" alt=""><br>其中包含 <strong>协议版本</strong> 、 <strong>状态码</strong>、 <strong>原因短语</strong>，很明显截图中的协议及其版本为 <code>HTTP/1.1</code>，状态码 <code>301</code>，原因短语是 <code>Moved Permanently</code>；</p>
<blockquote>
<h4 id="首部的格式和作用是什么？给个范例截图说明"><a href="#首部的格式和作用是什么？给个范例截图说明" class="headerlink" title="首部的格式和作用是什么？给个范例截图说明"></a><strong>首部的格式和作用是什么？给个范例截图说明</strong></h4></blockquote>
<p><strong><em>HTTP首部字段是构成HTTP报文的要素之一。在客户端与服务器端以HTTP协议进行通信时，无论是请求还是响应都会使用首部字段，它能起到传递额外更多信息的作用。使用首部字段是为了给服务器和浏览器提供报文主体大小、所使用的语言、认证信息等内容。——《图解HTTP》</em></strong></p>
<p>HTTP 首部基本可以分为四类：通用首部、请求首部、响应首部、实体首部。<br>HTTP 首部格式是由首部字段名和首部字段值组成，中间用冒号‘:’分隔，例如 <strong>Content-Type: text/html</strong>,字段值可有多个，例如 <strong>Keep-Alive: timeout=15, max=100</strong> 。</p>
<ul>
<li><p>通用首部：客户端和服务器端都能使用</p>
<blockquote>
<ul>
<li>Cache-Control 控制缓存行为</li>
<li>Connection 逐跳首部、连接的管理</li>
<li>Date 日期，报文创建时间</li>
<li>……</li>
</ul>
</blockquote>
</li>
<li><p>请求首部：从客户端往服务器端发送请求报文中所使用的字段，用于补充请求的附加信息、客户端信息和对响应内容相关的优先级等信息<br><img src="http://7xr868.com1.z0.glb.clouddn.com/task34/%E8%AF%B7%E6%B1%82%E9%A6%96%E9%83%A8%E5%AD%97%E6%AE%B5.png" alt=""><br>例如上图中:</p>
<blockquote>
<ul>
<li>Accept     告诉服务器能够发送那些媒体类型</li>
<li>Accept-Encoding 告诉服务器能够发送那些编码</li>
<li>Accept-Language 告诉服务器能够发送那些语言</li>
<li>Cookie     客户端字符串</li>
<li>Host 接收请求的服务器的主机名和端口号</li>
<li>Referer 提供了包含当前请求URI的文档的URL，告诉服务器自己来源</li>
<li>…..（这里不再列出所有）</li>
</ul>
</blockquote>
</li>
<li><p>响应首部：由服务器端向客户端返回响应报文中所使用的字段，用于补充响应的附加信息、服务器信息以及对客户端的附加要求等信息。<br><img src="http://7xr868.com1.z0.glb.clouddn.com/task34/%E5%93%8D%E5%BA%94%E9%A6%96%E9%83%A8%E5%AD%97%E6%AE%B5.png" alt=""><br>例如上图中:</p>
<blockquote>
<ul>
<li>Content-Encoding 主体编码格式</li>
<li>Content-Type 主体的MIME</li>
<li>ETag 主体的实体标记</li>
<li>Last-Modified 实体最后一次修改时间</li>
<li>Server 服务器应用软件名称和版本</li>
<li>…..（这里不再列出所有）</li>
</ul>
</blockquote>
<ul>
<li>实体首部：针对请求报文和响应报文使用的字段。补充了资源内容，更新时间等和实体相关的信息。</li>
</ul>
</li>
</ul>
<blockquote>
<h4 id="主体的作用是什么？给个范例"><a href="#主体的作用是什么？给个范例" class="headerlink" title="主体的作用是什么？给个范例"></a><strong>主体的作用是什么？给个范例</strong></h4></blockquote>
<p><img src="http://7xr868.com1.z0.glb.clouddn.com/task34/%E4%B8%BB%E4%BD%93.png" alt=""></p>
<ul>
<li>用于包含所请求的数据内容；</li>
<li>包含着返回的 HTML 文件的内容，即全部文本。</li>
</ul>
<blockquote>
<h4 id="简述浏览器缓存是如何控制的"><a href="#简述浏览器缓存是如何控制的" class="headerlink" title="简述浏览器缓存是如何控制的"></a><strong>简述浏览器缓存是如何控制的</strong></h4></blockquote>
<p>缓存有服务器端缓存和客户端缓存（一般指浏览器缓存），这里介绍浏览器缓存机制：</p>
<ul>
<li><strong>HTML Meta</strong> 标签控制缓存:浏览器缓存机制，其实主要就是 HTTP 协议定义的缓存机制（如：<code>Expires</code>； <code>Cache-control</code>等）。但是也有非 HTTP协议定义的缓存机制，如使用 HTML Meta 标签，Web开发者可以在HTML页面的 <code>&lt;head&gt;</code> 节点中加入 <code>&lt;meta&gt;</code> 标签<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"Pragam"</span> <span class="attr">content</span>=<span class="string">"no-cache"</span>&gt;</span></div></pre></td></tr></table></figure>
</li>
</ul>
<p>上述代码的作用是告诉浏览器当前页面不被缓存，每次访问都需要去服务器拉取。使用上很简单，但只有部分浏览器可以支持，而且所有缓存代理服务器都不支持，因为代理不解析HTML内容本身。而广泛应用的还是 HTTP头信息 来控制缓存。</p>
<ul>
<li><p>HTTP 响应首部字段 <strong>Expires</strong>，指明缓存的具体过期日期，来控制资源何时过期。在过期时间以内，若再次发起请求，通常浏览器都不会与服务器进行任何通信，而是直接使用本地副本。不过 Expires 是 HTTP 1.0 的东西，现在默认浏览器均默认使用HTTP 1.1，所以它的作用基本忽略。Expires 的一个缺点就是，返回的到期时间是服务器端的时间，这样存在一个问题，如果客户端的时间与服务器的时间相差很大（比如时钟不同步，或者跨时区），那么误差就很大，所以在HTTP 1.1版开始，使用Cache-Control: max-age=秒替代。</p>
</li>
<li><p><strong>Cache-Control</strong> HTTP 1.1 协议新增的指令，每个资源都可以通过设定 Cache-Control 来建立缓存策略。通常，可为它指定一个   <code>max-age</code> ，表示缓存的最长时间，单位为秒。</p>
<ul>
<li>no-cache，不缓存。</li>
<li>public，可以缓存。</li>
<li>no-store，请求和响应的信息都不应该被存储在对方的磁盘系统中。</li>
<li>must-revalidate，对于客户机的每次请求，代理服务器必须向服务器验证缓存是否过时。</li>
</ul>
</li>
<li><p>控制文件是否有修改 <strong>Last-Modified</strong>/<strong>E-Tag</strong> Last-Modified 表示被请求资源在服务器端的上次修改时间，而 ETag 则是一个唯一文件标识符，每次文件修改后都会生成一个新的 ETag。服务器通过向浏览器发送这两个字段，来告知浏览器其获得的资源的版本。由于 Last-Modified 和 ETag 的作用是相同的（均为向服务器验证资源是否最新），因此只使用一个即可。通常认为 Last-Modified 更好（它和 Expires 不同，由服务器生成，不依赖浏览器端时间）。</p>
</li>
<li><p>……</p>
</li>
</ul>
<blockquote>
<h4 id="下图各个参数是什么意思"><a href="#下图各个参数是什么意思" class="headerlink" title="下图各个参数是什么意思"></a><strong>下图各个参数是什么意思</strong></h4></blockquote>
<p><img src="http://7xpvnv.com2.z0.glb.qiniucdn.com/257149f7-1e11-4262-9b15-159389db83c6" alt=""></p>
<p>1.<strong>General</strong></p>
<ul>
<li>Reques URL : 请求资源所在的位置（资源的URL）；</li>
<li>Request Method : 请求用的是 PUT 方法；</li>
<li>Status Code : 状态码和原因短语是 200 OK，资源请求成功；</li>
<li>Remote Address：远程地址。资源所在 IP 地址。</li>
</ul>
<p>2.<strong>Response Headers</strong></p>
<ul>
<li>Connection：指定连接方式，持久连接；</li>
<li>Content-Length：主体部分的大小，单位是字节；</li>
<li>Content-Type：主体内对象的媒体类型，是 json 文件；</li>
<li>Date：报文创建的日期时间（GMT时间）；</li>
<li>Server：服务器软件版本信息；</li>
<li>X-Powered-By：开发资源的技术；是 Express;</li>
</ul>
<p>3.<strong>Request Headers</strong></p>
<ul>
<li>Accept：能够处理的媒体类型及其相对优先级。<code>*/*</code> 可以处理与请求相符的任意媒体类型;</li>
<li>Accept-Encoding：用户代理支持的内容编码及内容编码的优先级顺序。接受gzip、deflate 和 sdch 格式;</li>
<li>Accept-Language：用户代理能够处理的自然语言集。接受中文;</li>
<li>Cookie：之前从服务器获得的 Cookie 信息。</li>
<li>Host：资源所在的主机;</li>
<li>Origin：资源所在的源。包括主机，协议和端口号;</li>
<li>Referer：服务器请求的原始资源的 URI；</li>
<li>User-Agent：发出请求的客户端（浏览器）信息和用户代理名称；</li>
<li>X-Requested-With：用何种方式请求。这里使用的是 ajax；</li>
</ul>
<hr>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://7xrvo9.com1.z0.glb.clouddn.com/2016.0507/macbook-926558.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;h4 id=&quot;OSI-七层模型指什么？&quot;&gt;&lt;a href=&quot;#OSI-七层模型指什么？&quot; class=&quot;headerlink&quot; title=&quot;OSI 七层模型指什么？&quot;&gt;&lt;/a&gt;&lt;strong&gt;OSI 七层模型指什么？&lt;/strong&gt;&lt;/h4&gt;&lt;/blockquote&gt;
&lt;p&gt;OSI（Open System Interconnection）七层模型是国际标准化组织（ISO）制定的一个用于计算机或通信系统间互联的标准体系，它是一个七层的、抽象的模型，不仅包括一系列抽象的术语或概念，也包括具体的协议。&lt;/p&gt;
    
    </summary>
    
      <category term="计算机基础" scheme="http://licao404.com/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/"/>
    
      <category term="计算机网络" scheme="http://licao404.com/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/"/>
    
    
      <category term="Web服务器" scheme="http://licao404.com/tags/Web%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
    
      <category term="前后端" scheme="http://licao404.com/tags/%E5%89%8D%E5%90%8E%E7%AB%AF/"/>
    
      <category term="HTTP" scheme="http://licao404.com/tags/HTTP/"/>
    
      <category term="TCP/IP" scheme="http://licao404.com/tags/TCP-IP/"/>
    
  </entry>
  
  <entry>
    <title>从 URI 到页面呈现</title>
    <link href="http://licao404.com/2016/05/07/%E4%BB%8EURI%E5%88%B0%E9%A1%B5%E9%9D%A2%E5%91%88%E7%8E%B0/"/>
    <id>http://licao404.com/2016/05/07/从URI到页面呈现/</id>
    <published>2016-05-07T03:35:26.000Z</published>
    <updated>2016-05-12T01:20:54.579Z</updated>
    
    <content type="html"><![CDATA[<blockquote class="blockquote-center">前面提及过怎么用一些软件套件在<a href="./2016/04/10/使用XAMPP搭建本地Web服务器/">本地简单搭建 Web 服务器</a>，具体可以参照我的这篇文章 &gt;&gt; <a href="./2016/04/10/使用XAMPP搭建本地Web服务器/">《使用XAMPP搭建本地Web服务器》</a> ，这次我们理一理从从浏览器输入URL到Web页面呈现在我们眼前，它背后发生了什么？这次我们只是简单说说其过程，它涉及了很多计算机网络知识，<a href="http://baike.baidu.com/link?url=v-ZiUCzKEFsKfexauR5g8UA9H7D6ZsX_bD9jtGIUWOA3CafdHGK-p7EMwUHBeTuF92VEnVXh6A2o9yaAMJNywTBZQYuusmr7gPBMw0K91P95WgfPYswXuUJ_DeTe8DK9tBTE5WdUlKtKj8q78VOOwMROvTECRNRBxrCGuypphyy" target="_blank" rel="external">HTTP 协议</a>等，可以留待后续学习深究。</blockquote>

<a id="more"></a>
<blockquote>
<h4 id="简单描述下web-服务器、PHP、数据库、浏览器是如何实现动态网站的"><a href="#简单描述下web-服务器、PHP、数据库、浏览器是如何实现动态网站的" class="headerlink" title="简单描述下web 服务器、PHP、数据库、浏览器是如何实现动态网站的?"></a><strong>简单描述下web 服务器、PHP、数据库、浏览器是如何实现动态网站的?</strong></h4></blockquote>
<ol>
<li><p>客户端（浏览器）根据用户输入的<code>URL</code>，寻找<code>DNS</code>服务器将其解析为对应的Web服务器的<code>IP</code>地址，返回给浏览器；</p>
</li>
<li><p>浏览器打包<code>Http</code>请求，通过<code>TCP</code>协议连接前一步返回的IP所对应的Web服务器，通过默认的<code>80</code>端口请求Web服务器上相应目录下的动态语言文件（如index.php）;</p>
</li>
<li><p>Web服务器将用户请求的php文件交给php应用服务器处理（Web服务器本身不能处理php动态语言文件）；</p>
</li>
<li><p>php应用服务器接收、打开并解释php文件，在php文件中通过对数据库的连接代码连接本机或其他机器上的<code>MySQL</code>数据库，在php中执行<code>SQL</code>查询语句获得数据，php应用服务器将获得的数据生成<code>html</code>静态代码；</p>
</li>
<li><p>php应用服务器将生成的<code>html</code>静态代码返回<code>Web</code>服务器，<code>Web</code>服务器通过<code>TCP</code>协议将<code>html</code>静态代码传给浏览器；</p>
</li>
<li><p>浏览器解析接收到的代码，开始渲染页面并呈献给用户。</p>
</li>
</ol>
<blockquote>
<h4 id="常见的-WEB-服务器有哪些？"><a href="#常见的-WEB-服务器有哪些？" class="headerlink" title="常见的 WEB 服务器有哪些？"></a><strong>常见的 WEB 服务器有哪些？</strong></h4></blockquote>
<p><strong>Linux/Unix平台</strong></p>
<ul>
<li><p>Apache：<br>使用最多的Web服务器，几乎可以运行在所有计算机平台，开源免费。简单、速度快、性能稳定，并可做代理服务器来使用。</p>
</li>
<li><p>Nginx：小型高效，支持正向和反向代理等；</p>
</li>
</ul>
<ul>
<li>……</li>
</ul>
<p><strong>Windows平台</strong></p>
<ul>
<li>IIS：微软主推的Web服务器，IIS提供了一个图形界面的管理工具，称为Internet服务管理器，可用于监视配置和控制Internet服务。</li>
</ul>
<blockquote>
<h4 id="打开浏览器，在地址栏输入-http-baidu-com-页面展现了饥人谷官网的信息，整个过程发生了什么？（饥人谷官网后台语言-php-web服务器-nginx，数据库-mysql）"><a href="#打开浏览器，在地址栏输入-http-baidu-com-页面展现了饥人谷官网的信息，整个过程发生了什么？（饥人谷官网后台语言-php-web服务器-nginx，数据库-mysql）" class="headerlink" title="打开浏览器，在地址栏输入 http://baidu.com 页面展现了饥人谷官网的信息，整个过程发生了什么？（饥人谷官网后台语言 php,web服务器 nginx，数据库 mysql）"></a><strong>打开浏览器，在地址栏输入 <code>http://baidu.com</code> 页面展现了饥人谷官网的信息，整个过程发生了什么？（饥人谷官网后台语言 php,web服务器 nginx，数据库 mysql）</strong></h4></blockquote>
<ol>
<li><p>通过域名（URL）查询<code>nginx</code>服务器对应的IP地址（DNS解析）：</p>
<ul>
<li>查浏览器缓存，看是否有缓存的DNS,有的话就可以直接使用；</li>
<li>查系统缓存，如果浏览器缓存无记录，浏览器调用系统中的缓存记录；</li>
<li>查路由器缓存，如果系统中无缓存，进一步查询路由器缓存；</li>
<li>ISP缓存，如果路由器中无缓存，进一步查询ISP；</li>
<li>递归搜索，如果ISP缓存里仍然查不到，就会从顶级域名服务器的根域名服务器开始递归查询，一定可以查到；</li>
</ul>
</li>
<li><p>上一步查到的IP地址<code>121.40.201.213</code>,浏览器打包<code>http</code>请求（服务器所需要的一些信息）,如下图：<br><img src="http://7xr868.com1.z0.glb.clouddn.com/task23/http%E8%AF%B7%E6%B1%82.png" alt=""></p>
</li>
<li><p>通过<code>TCP</code>协议与<code>nginx</code>服务器创建连接（<a href="http://www.jellythink.com/archives/705" target="_blank" rel="external">三次握手</a>保证通信可靠性），然后浏览器向服务器发送请求；</p>
</li>
<li><p><code>nginx</code>服务器处理浏览器发来的请求，由于后台语言是<code>php</code>，则将请求交给php应用服务器；</p>
</li>
<li><p>php应用服务器接收、打开并解释php文件，在php文件中通过对数据库的连接代码连接本机或其他机器上的<code>MySQL</code>数据库，在php中执行<code>SQL</code>查询语句获得数据，php应用服务器将获得的数据生成html静态代码；</p>
</li>
<li><p>php应用服务器将生成的html静态代码返回<code>nginx</code>服务器，<code>nginx</code>服务器通过TCP协议将html静态代码传给浏览器，如下是响应头：<br><img src="http://7xr868.com1.z0.glb.clouddn.com/task23/http%E5%93%8D%E5%BA%94.png" alt=""></p>
</li>
<li><p>浏览器接收响应内容，浏览器开始下载并同时渲染内容，顺序都是从上到下，遇到JavaScript就先下载JavaScript，解析完JavaScript再继续进行其他；具体渲染过程如下：</p>
<ul>
<li>解析<code>HTML</code>生成<code>DOM</code>树；</li>
<li>解析<code>CSS</code>生成<code>CSSOM</code>树；</li>
<li>组合<code>DOM</code>和<code>CSSOM</code>生成渲染树；</li>
<li>遇到<code>JavaScript</code>解析JavaScript，阻塞后面的解析和渲染；</li>
<li>最后通过调用操作系统<code>Native GUI</code>的<code>API</code>进行页面绘制，呈现在用户面前。</li>
</ul>
<hr>
</li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote class = &quot;blockquote-center&quot;&gt;前面提及过怎么用一些软件套件在&lt;a href=&quot;./2016/04/10/使用XAMPP搭建本地Web服务器/&quot;&gt;本地简单搭建 Web 服务器&lt;/a&gt;，具体可以参照我的这篇文章 &amp;gt;&amp;gt; &lt;a href=&quot;./2016/04/10/使用XAMPP搭建本地Web服务器/&quot;&gt;《使用XAMPP搭建本地Web服务器》&lt;/a&gt; ，这次我们理一理从从浏览器输入URL到Web页面呈现在我们眼前，它背后发生了什么？这次我们只是简单说说其过程，它涉及了很多计算机网络知识，&lt;a href=&quot;http://baike.baidu.com/link?url=v-ZiUCzKEFsKfexauR5g8UA9H7D6ZsX_bD9jtGIUWOA3CafdHGK-p7EMwUHBeTuF92VEnVXh6A2o9yaAMJNywTBZQYuusmr7gPBMw0K91P95WgfPYswXuUJ_DeTe8DK9tBTE5WdUlKtKj8q78VOOwMROvTECRNRBxrCGuypphyy&quot;&gt;HTTP 协议&lt;/a&gt;等，可以留待后续学习深究。&lt;/blockquote&gt;
    
    </summary>
    
      <category term="计算机基础" scheme="http://licao404.com/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/"/>
    
      <category term="计算机网络" scheme="http://licao404.com/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/"/>
    
    
      <category term="php" scheme="http://licao404.com/tags/php/"/>
    
      <category term="Web服务器" scheme="http://licao404.com/tags/Web%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
    
      <category term="前后端" scheme="http://licao404.com/tags/%E5%89%8D%E5%90%8E%E7%AB%AF/"/>
    
      <category term="HTTP" scheme="http://licao404.com/tags/HTTP/"/>
    
      <category term="TCP/IP" scheme="http://licao404.com/tags/TCP-IP/"/>
    
      <category term="Apache" scheme="http://licao404.com/tags/Apache/"/>
    
  </entry>
  
  <entry>
    <title>关于 &quot;this&quot; 二三事</title>
    <link href="http://licao404.com/2016/05/04/%E5%85%B3%E4%BA%8E-this-%E4%BA%8C%E4%B8%89%E4%BA%8B/"/>
    <id>http://licao404.com/2016/05/04/关于-this-二三事/</id>
    <published>2016-05-04T11:30:55.000Z</published>
    <updated>2016-05-06T00:42:50.613Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<h3 id="【知识点】"><a href="#【知识点】" class="headerlink" title="【知识点】"></a>【知识点】</h3></blockquote>
<h4 id="apply、call-有什么作用，什么区别？"><a href="#apply、call-有什么作用，什么区别？" class="headerlink" title=" apply、call 有什么作用，什么区别？"></a><strong> apply、call 有什么作用，什么区别？</strong></h4><ul>
<li><code>call</code> 和 <code>apply</code> 都是 <code>Function.prototype</code> 的方法，即每个 <code>Function</code> 对象的实例（function定义的每个方法）都有这两个方法。<blockquote>
<p>二者的作用完全一样，都是用来<strong>动态改变某个函数运行时上下文</strong>（重新定义函数的执行环境），也就是函数内部 <code>this</code> 的指向。</p>
</blockquote>
</li>
</ul>
<a id="more"></a>
<ul>
<li><p><code>call</code> 和 <code>apply</code> 的区别仅仅是在参数定义的方式不太一样,具体表现为：</p>
<blockquote>
<p><code>call</code> 和 <code>apply</code> 方法的第一个参数都是要传入给当前对象的对象，或者是 <code>this</code> ;后面的参数都是传递给当前对象的参数，<code>call</code> 需要把参数按照顺序放进去，而 <code>apply</code> 则是把参数放在数组里;</p>
</blockquote>
</li>
<li><p>如下面的一个小例子，体现了这两个函数的共同作用：改变函数内部 <code>this</code> 的指向。又可以看到细微差别，变量传入方式的不同。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> animal = &#123;</div><div class="line">	<span class="attr">name</span>: <span class="string">'tiger'</span>,</div><div class="line">	<span class="attr">food</span>: <span class="string">'meat'</span>,</div><div class="line">	<span class="attr">fn</span>: <span class="function"><span class="keyword">function</span> (<span class="params">name,food</span>) </span>&#123;</div><div class="line">		 <span class="keyword">this</span>.name = name; </div><div class="line">		 <span class="keyword">this</span>.food = food;</div><div class="line">		 <span class="built_in">console</span>.log(<span class="keyword">this</span>);</div><div class="line">	&#125;</div><div class="line">&#125;;</div><div class="line"></div><div class="line">fn.call(animal,<span class="string">'sheep'</span>,<span class="string">'grass'</span>); <span class="comment">//Object &#123;name: "sheep", food: "grass"&#125;</span></div><div class="line">fn.apply(animal,[<span class="string">'panda'</span>,<span class="string">'bamboo'</span>]); <span class="comment">//Object &#123;name: "panda", food: "bamboo"&#125;</span></div></pre></td></tr></table></figure>
</li>
</ul>
<hr>
<blockquote>
<h3 id="【练习】"><a href="#【练习】" class="headerlink" title="【练习】"></a>【练习】</h3></blockquote>
<h4 id="1-以下代码输出什么"><a href="#1-以下代码输出什么" class="headerlink" title="1. 以下代码输出什么?"></a><strong>1. 以下代码输出什么?</strong></h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> john = &#123; </div><div class="line">  <span class="attr">firstName</span>: <span class="string">"John"</span> </div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">func</span>(<span class="params"></span>) </span>&#123; </div><div class="line">  alert(<span class="keyword">this</span>.firstName + <span class="string">": hi!"</span>)</div><div class="line">&#125;</div><div class="line">john.sayHi = func</div><div class="line">john.sayHi() <span class="comment">//alert出 John:hi!</span></div></pre></td></tr></table></figure>
<ul>
<li>输出：<code>John:hi!</code></li>
<li>解析：<code>john.sayHi()</code> 这样写就是对象 <code>john</code> 调用了函数 <code>func()</code>（或者说将函数 <code>func()</code> 绑定在对象 <code>john</code> 上）。函数 <code>func()</code> 内部的 <code>this</code> 指向的就是对象 <code>john</code>。</li>
</ul>
<h4 id="2-下面代码输出什么，为什么"><a href="#2-下面代码输出什么，为什么" class="headerlink" title="2. 下面代码输出什么，为什么"></a><strong>2. 下面代码输出什么，为什么</strong></h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">func() </div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">func</span>(<span class="params"></span>) </span>&#123; </div><div class="line">  alert(<span class="keyword">this</span>)</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>输出：<code>Winsow</code>对象</li>
<li>解析：直接 <code>func()</code> 这样写就是 <code>Winsow</code> 对象调用了函数 <code>func()</code>（或者说此时函数 <code>func()</code> 的执行环境是在全局环境下）。函数 <code>func()</code> 内部的 <code>this</code> 指向的就是对象 <code>Winsow</code>。</li>
</ul>
<h4 id="3-以下代码输出什么"><a href="#3-以下代码输出什么" class="headerlink" title="3. 以下代码输出什么?"></a><strong>3. 以下代码输出什么?</strong></h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn0</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params"></span>)</span>&#123;</div><div class="line">        <span class="built_in">console</span>.log(<span class="keyword">this</span>);</div><div class="line">    &#125;</div><div class="line">    fn();</div><div class="line">&#125;</div><div class="line"></div><div class="line">fn0();</div></pre></td></tr></table></figure>
<ul>
<li>输出：<code>Winsow</code> 对象</li>
<li>解析：追本溯源还是 <code>Winsow</code> 对象调用了 <code>fn()</code>;</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">document</span>.addEventListener(<span class="string">'click'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>);</div><div class="line">    setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">        <span class="built_in">console</span>.log(<span class="keyword">this</span>);</div><div class="line">    &#125;, <span class="number">200</span>);</div><div class="line">&#125;, <span class="literal">false</span>);</div></pre></td></tr></table></figure>
<ul>
<li>输出：<code>document</code> 文档对象 , <code>Winsow</code> 对象</li>
<li>解析：因为clik事件绑定在 document 上，<code>this</code> 指向 document 文档对象;延时器的执行环境都是全局的，<code>this</code> 指向 window</li>
</ul>
<h4 id="4-下面代码输出什么，为什么"><a href="#4-下面代码输出什么，为什么" class="headerlink" title="4. 下面代码输出什么，为什么"></a><strong>4. 下面代码输出什么，为什么</strong></h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">obj = &#123;</div><div class="line">  <span class="attr">go</span>: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123; alert(<span class="keyword">this</span>) &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">obj.go(); <span class="comment">//输出 obj 对象，obj 对象调用了函数 go();</span></div><div class="line"></div><div class="line">(obj.go)(); <span class="comment">//输出 obj 对象，立即执行函数写法，还是 obj 对象调用了函数 go();</span></div><div class="line"></div><div class="line">(a = obj.go)(); <span class="comment">//输出 Window 对象，a 是一个全局变量，函数赋值给一个全局变量，a() 执行时依赖的就是全局环境;</span></div><div class="line"></div><div class="line">(<span class="number">0</span> || obj.go)(); <span class="comment">//输出 Window 对象，(0 || obj.go) 就是 (obj.go)，所以(obj.go)()，调用它的仍然是全局对象;</span></div></pre></td></tr></table></figure>
<h4 id="5-下面代码输出什么，为什么"><a href="#5-下面代码输出什么，为什么" class="headerlink" title="5. 下面代码输出什么，为什么"></a><strong>5. 下面代码输出什么，为什么</strong></h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> john = &#123; </div><div class="line">  <span class="attr">firstName</span>: <span class="string">"John"</span> </div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">func</span>(<span class="params"></span>) </span>&#123; </div><div class="line">  alert( <span class="keyword">this</span>.firstName )</div><div class="line">&#125;</div><div class="line">func.call(john)</div></pre></td></tr></table></figure>
<ul>
<li>输出：<code>John</code> </li>
<li>解析：<code>call</code> 函数的用法：只有一个参数，指定 <code>func()</code> 函数内部 <code>this</code> 指向 <code>john</code> 对象.</li>
</ul>
<h4 id="6-下面代码输出什么，为什么"><a href="#6-下面代码输出什么，为什么" class="headerlink" title="6. 下面代码输出什么，为什么"></a><strong>6. 下面代码输出什么，为什么</strong></h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> john = &#123; </div><div class="line">  <span class="attr">firstName</span>: <span class="string">"John"</span>,</div><div class="line">  <span class="attr">surname</span>: <span class="string">"Smith"</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">func</span>(<span class="params">a, b</span>) </span>&#123; </div><div class="line">  alert( <span class="keyword">this</span>[a] + <span class="string">' '</span> + <span class="keyword">this</span>[b] )</div><div class="line">&#125;</div><div class="line">func.call(john, <span class="string">'firstName'</span>, <span class="string">'surname'</span>)</div></pre></td></tr></table></figure>
<ul>
<li>输出：<code>John Smith</code> </li>
<li>解析：<code>call</code> 函数的用法：第一个参数指定 <code>func()</code> 函数内部 <code>this</code> 指向 <code>john</code> 对象,后面的参数按顺序传入。</li>
</ul>
<h4 id="7-以下代码有什么问题，如何修改"><a href="#7-以下代码有什么问题，如何修改" class="headerlink" title="7. 以下代码有什么问题，如何修改"></a><strong>7. 以下代码有什么问题，如何修改</strong></h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> <span class="built_in">module</span>= &#123;</div><div class="line">  <span class="keyword">var</span> self = <span class="keyword">this</span>;  <span class="comment">//4. 这里先保存 this 的值，使其指向对象 module</span></div><div class="line">  bind: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    $btn.on(<span class="string">'click'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">      <span class="built_in">console</span>.log(<span class="keyword">this</span>) <span class="comment">//1. this指向的是 $btn ,因为 $btn 绑定了事件处理函数</span></div><div class="line">      <span class="keyword">this</span>.showMsg(); <span class="comment">//2. 因为 this 指向的是 $btn, $btn上怎么会有showMsg()呢，显然只有 module 上有</span></div><div class="line">      <span class="comment">//3. 所以这里需要在之前保存下this值，改为</span></div><div class="line">      self.showMsg();</div><div class="line">    &#125;)</div><div class="line">  &#125;,</div><div class="line">  </div><div class="line">  <span class="attr">showMsg</span>: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">'饥人谷'</span>);</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;h3 id=&quot;【知识点】&quot;&gt;&lt;a href=&quot;#【知识点】&quot; class=&quot;headerlink&quot; title=&quot;【知识点】&quot;&gt;&lt;/a&gt;【知识点】&lt;/h3&gt;&lt;/blockquote&gt;
&lt;h4 id=&quot;apply、call-有什么作用，什么区别？&quot;&gt;&lt;a href=&quot;#apply、call-有什么作用，什么区别？&quot; class=&quot;headerlink&quot; title=&quot; apply、call 有什么作用，什么区别？&quot;&gt;&lt;/a&gt;&lt;strong&gt; apply、call 有什么作用，什么区别？&lt;/strong&gt;&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;call&lt;/code&gt; 和 &lt;code&gt;apply&lt;/code&gt; 都是 &lt;code&gt;Function.prototype&lt;/code&gt; 的方法，即每个 &lt;code&gt;Function&lt;/code&gt; 对象的实例（function定义的每个方法）都有这两个方法。&lt;blockquote&gt;
&lt;p&gt;二者的作用完全一样，都是用来&lt;strong&gt;动态改变某个函数运行时上下文&lt;/strong&gt;（重新定义函数的执行环境），也就是函数内部 &lt;code&gt;this&lt;/code&gt; 的指向。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="编程学习" scheme="http://licao404.com/categories/%E7%BC%96%E7%A8%8B%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="前端基础" scheme="http://licao404.com/categories/%E7%BC%96%E7%A8%8B%E5%AD%A6%E4%B9%A0/%E5%89%8D%E7%AB%AF%E5%9F%BA%E7%A1%80/"/>
    
    
      <category term="JavaScript" scheme="http://licao404.com/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>同源策略&amp;跨域请求</title>
    <link href="http://licao404.com/2016/04/28/%E5%90%8C%E6%BA%90%E7%AD%96%E7%95%A5-%E8%B7%A8%E5%9F%9F%E8%AF%B7%E6%B1%82/"/>
    <id>http://licao404.com/2016/04/28/同源策略-跨域请求/</id>
    <published>2016-04-28T07:54:22.000Z</published>
    <updated>2016-05-07T03:42:26.894Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<h3 id="【知识点】"><a href="#【知识点】" class="headerlink" title="【知识点】"></a>【知识点】</h3></blockquote>
<h4 id="1-什么是同源策略？"><a href="#1-什么是同源策略？" class="headerlink" title="1. 什么是同源策略？"></a><strong>1. 什么是同源策略？</strong></h4><p>同源策略是浏览器最核心也是最基本的安全的功能。所谓同源，指的是协议、域名、端口号都相同，不同源的客户脚本（JavaScript）在没有明确授权的情况下，只能读写本域下的资源，不能读写对方的资源；</p>
<h4 id="2-什么是跨域？跨域有几种实现形式？"><a href="#2-什么是跨域？跨域有几种实现形式？" class="headerlink" title="2. 什么是跨域？跨域有几种实现形式？"></a><strong>2. 什么是跨域？跨域有几种实现形式？</strong></h4><p>跨域是指突破JavaScript同源策略的限制，<code>a.com</code> 域名下的 <code>js</code> 可以操作 <code>b.com</code> 或者 <code>child.a.com</code> 下的对象中的数据。<br><a id="more"></a></p>
<p>实现形式：</p>
<ul>
<li><p>降域（最简单形式）；对于主域相同子域不同（<code>http://www.a.com/</code> ，<code>http://child.a.com</code>）的情况，可以同时设置两个域名下 html 文件(<code>index1.html</code> ， <code>index2.html</code>) <code>document.domain = a.com</code> ,然后在 <code>index1.html</code> 中创建一个 <code>iframe</code>,去控制 <code>iframe</code> 的 <code>contentDocument</code>，这样就实现了不同子域的跨域。<code>iframe</code> 和 <code>相同主域</code> 是其限制条件；</p>
</li>
<li><p>JSONP 跨域：由于直接用 <code>XMLHttpRequest</code> 请求不同域上的数据是不可以的。这种方式主要是通过动态插入一个 <code>script</code> 标签。浏览器对 <code>script</code>的资源引用没有同源限制，同时资源加载到页面后会立即执行（没有阻塞的情况下）。</p>
</li>
<li><p>CORS（Cross-Origin Resource Sharing）：跨域资源共享，IE需要10以上。</p>
</li>
<li><p>HTML5 postMessage</p>
</li>
<li><p><a href="http://www.cnblogs.com/zichi/p/4620656.html" target="_blank" rel="external">window.name</a></p>
</li>
<li><p><a href="http://www.cnblogs.com/zichi/p/4621963.html?utm_source=tuicool&amp;utm_medium=referral" target="_blank" rel="external">hash</a></p>
</li>
</ul>
<h4 id="3-jsonp-的原理是什么？"><a href="#3-jsonp-的原理是什么？" class="headerlink" title="3. jsonp 的原理是什么？"></a><strong>3. jsonp 的原理是什么？</strong></h4><p>由于直接用 <code>XMLHttpRequest</code> 请求不同域上的数据是不可以的。这种方式主要是通过动态插入一个 <code>script</code> 标签。浏览器对 <code>script</code>的资源引用没有同源限制，同时资源加载到页面后会立即执行（没有阻塞的情况下）</p>
<p>举个栗子说明：<br><code>a.com</code> 域名下的 <code>index.html</code> 文件<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">'http://libs.baidu.com/jquery/2.0.0/jquery.min.js'</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="javascript"></span></div><div class="line">  <span class="comment">// jsonp跨域</span></div><div class="line">    <span class="function"><span class="keyword">function</span> <span class="title">callback</span>(<span class="params">json</span>) </span>&#123;</div><div class="line">      <span class="built_in">console</span>.log(json);</div><div class="line">    &#125;</div><div class="line">    <span class="comment">//动态创建一个script标签</span></div><div class="line">    <span class="keyword">var</span> s = <span class="built_in">document</span>.createElement(<span class="string">'script'</span>);</div><div class="line">    <span class="comment">//把a.json的URL赋给它</span></div><div class="line">    s.src = <span class="string">'http://b.com/a.js'</span>;</div><div class="line">    <span class="comment">//把这个script标签插入dom里</span></div><div class="line">    <span class="built_in">document</span>.body.appendChild(s);</div><div class="line">  <span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>由于 <code>jQuery</code> 将 jsonp 封装在了 ajax 方法中，上面也可以写为：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">'http://libs.baidu.com/jquery/2.0.0/jquery.min.js'</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="javascript"></span></div><div class="line">	  $.ajax(&#123;</div><div class="line">	    <span class="attr">url</span>: <span class="string">'http://b.com/a.js'</span>,</div><div class="line">	    <span class="attr">dataType</span>: <span class="string">'jsonp'</span>,</div><div class="line">	    <span class="attr">jsonpCallback</span>: <span class="string">'callback'</span>,</div><div class="line">	    <span class="attr">success</span>: <span class="function"><span class="keyword">function</span> (<span class="params">ret</span>) </span>&#123;</div><div class="line">	      <span class="built_in">console</span>.log(ret);</div><div class="line">	    &#125;</div><div class="line">	  &#125;);</div><div class="line">  <span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p><code>b.com</code> 域名下的 <code>a.js</code> 文件<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">callback(&#123;</div><div class="line">  <span class="string">"name"</span>: <span class="string">"aaa"</span>,</div><div class="line">  <span class="string">"age"</span>: <span class="number">20</span></div><div class="line">&#125;);</div></pre></td></tr></table></figure></p>
<p>正常情况下是不能访问的，会报跨域错误，这里用到了 <code>jsonp</code> ，实现了跨域访问 <code>a.js</code> ,得到了 <code>b.com</code> 下的数据:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Object &#123;name: &quot;aaa&quot;, age: 20&#125;</div></pre></td></tr></table></figure></p>
<p>需要注意的是 jsonp 是 get 形式的，无法使用 post，承载的信息量有限，信息量较大时请使用更强大的 CORS。</p>
<h4 id="4-CORS是什么？"><a href="#4-CORS是什么？" class="headerlink" title="4. CORS是什么？"></a><strong>4. CORS是什么？</strong></h4><p>CORS 全称是跨域资源共享（Cross-Origin Resource Sharing），是一种 <code>ajax</code> 跨域请求资源的方式，支持现代浏览器，IE支持10以上。<br>实现方式很简单，当你使用 <code>XMLHttpRequest</code> 发送请求时，浏览器发现该请求不符合同源策略，会给该请求加一个请求头：<code>Origin</code>，后台进行一系列处理，如果确定接受请求则在返回结果中加入一个响应头：<code>Access-Control-Allow-Origin</code>; 浏览器判断该相应头中是否包含 <code>Origin</code> 的值，如果有则浏览器会处理响应，我们就可以拿到响应数据，如果不包含浏览器直接驳回，这时我们无法拿到响应数据。所以 <code>CORS</code> 的表象是让你觉得它与同源的 <code>ajax</code> 请求没啥区别，代码完全一样。</p>
<hr>
<blockquote>
<h3 id="【练习】"><a href="#【练习】" class="headerlink" title="【练习】"></a>【练习】</h3></blockquote>
<h4 id="1-本地搭建服务器，演示同源策略"><a href="#1-本地搭建服务器，演示同源策略" class="headerlink" title="1. 本地搭建服务器，演示同源策略"></a><strong>1. 本地搭建服务器，演示同源策略</strong></h4><ul>
<li>本地搭建服务器（如果使用 SAE 可创建不同的代码版本，这样可通过1.xxx.sinapp.com和2.xxx.sinapp.com 访问了）</li>
<li>修改 本地host，通过不同域名访问本地服务器。比如访问 <code>http://a.com/index.html</code>, <code>http://b.com/ajax.php</code>，本质是在 <code>index.html</code> 里使用 <code>ajax</code> 接口访问 <code>http://b.com/ajax.php</code> 里的数据。</li>
<li>查看输出报错</li>
</ul>
<blockquote>
<p>通过 <code>XAMPP</code> 搭建本地服务器，编辑 <code>host</code> ：</p>
</blockquote>
<ul>
<li>127.0.0.1 a.com</li>
<li>127.0.0.1 b.com</li>
</ul>
<p>这样通过 <code>http://a.com</code> 和 <code>http://b.com</code> 两个不同域名可以访问本地服务器</p>
<blockquote>
<p>编辑 <code>http://a.com/index.html</code></p>
</blockquote>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>a.com<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"http://apps.bdimg.com/libs/jquery/1.9.1/jquery.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></div><div class="line">		<span class="keyword">var</span> start = <span class="number">1</span>;</div><div class="line">		$.ajax(&#123;</div><div class="line">		    <span class="attr">type</span>: <span class="string">'get'</span>,</div><div class="line">		    <span class="attr">url</span>: <span class="string">'//b.com/ajax.php'</span>,</div><div class="line">		    <span class="attr">data</span>: &#123;</div><div class="line">		    	<span class="attr">start</span>: start,</div><div class="line">		    	<span class="attr">len</span>:<span class="number">5</span></div><div class="line">		    &#125;,</div><div class="line">		    <span class="attr">success</span>: <span class="function"><span class="keyword">function</span>(<span class="params">ret</span>) </span>&#123;</div><div class="line">		        <span class="keyword">if</span>(ret.status === <span class="number">1</span>)&#123;</div><div class="line">		        	alert(<span class="string">'success to get data!'</span>);</div><div class="line">			    	start += <span class="number">5</span>;</div><div class="line">		        &#125;<span class="keyword">else</span> &#123;</div><div class="line">		        	alert(<span class="string">'failed to get data!'</span>);</div><div class="line">		        &#125;</div><div class="line">		    &#125;,</div><div class="line">		    <span class="attr">error</span>: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">		        alert(<span class="string">"Something error"</span>);</div><div class="line">		    &#125;</div><div class="line">		&#125;);</div><div class="line">	<span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div></pre></td></tr></table></figure>
<p>在 <code>a.com</code> 下我们通过 <code>index.html</code> 中的 <code>ajax</code> 访问 <code>b.com</code> 下的 <code>ajax.php</code></p>
<blockquote>
<p>编辑 <code>http://b.com/ajax.php</code></p>
</blockquote>
<figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;?php</span></div><div class="line">    <span class="comment">// 后端 php 测试接口文件</span></div><div class="line">    $start = $_GET[<span class="string">'start'</span>]; <span class="comment">//1</span></div><div class="line">    $len = $_GET[<span class="string">'len'</span>];  <span class="comment">//5</span></div><div class="line">    $items = <span class="keyword">array</span>();</div><div class="line"></div><div class="line">    <span class="keyword">for</span>($i = <span class="number">0</span>; $i &lt; $len; $i++)&#123;</div><div class="line">        array_push($items, <span class="string">'内容'</span> . ($start+$i));</div><div class="line">    &#125;</div><div class="line">    $ret = <span class="keyword">array</span>(<span class="string">'status'</span>=&gt;<span class="number">1</span>, <span class="string">'data'</span>=&gt;$items);</div><div class="line"></div><div class="line">    <span class="comment">//&#123;status: 1, data: ['内容1','内容2','内容3']&#125;</span></div><div class="line">    sleep(<span class="number">0.5</span>);</div><div class="line">    <span class="keyword">echo</span> json_encode($ret);</div></pre></td></tr></table></figure>
<blockquote>
<p>浏览器输入 <code>a.com</code> ，看到报错信息：</p>
</blockquote>
<p><img src="http://7xr868.com1.z0.glb.clouddn.com/task31/%E5%90%8C%E6%BA%90%E7%AD%96%E7%95%A5%E9%AA%8C%E8%AF%81.png" alt=""></p>
<h4 id="2-至少使用一种方式解决跨域问题"><a href="#2-至少使用一种方式解决跨域问题" class="headerlink" title="2. 至少使用一种方式解决跨域问题"></a><strong>2. 至少使用一种方式解决跨域问题</strong></h4><ul>
<li>JSONP 解决跨域</li>
</ul>
<p><code>a.com</code> 下的 html 请求 <code>b.com</code> 下的 php</p>
<blockquote>
<p>编辑 <code>http://a.com/index.html</code></p>
</blockquote>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">'http://libs.baidu.com/jquery/2.0.0/jquery.min.js'</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="javascript"></span></div><div class="line">$.ajax(&#123;</div><div class="line">	<span class="attr">url</span>: <span class="string">'http://b.com/a.php'</span>,</div><div class="line">	<span class="attr">dataType</span>: <span class="string">'jsonp'</span>,</div><div class="line">	<span class="attr">success</span>: <span class="function"><span class="keyword">function</span> (<span class="params">ret</span>) </span>&#123;</div><div class="line">		 <span class="built_in">console</span>.log(<span class="string">"I'm "</span> + ret.name + <span class="string">",and I'm "</span> + ret.age + <span class="string">" years old."</span>);</div><div class="line">	&#125;,</div><div class="line">	<span class="attr">error</span>: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">		 alert(<span class="string">"Something error"</span>);</div><div class="line">	&#125;</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<blockquote>
<p>编辑 <code>http://b.com/a.php</code></p>
</blockquote>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">&lt;?php</div><div class="line">  $jsondata = '&#123;</div><div class="line">    "name": "aaa",</div><div class="line">    "age": 20</div><div class="line">  &#125;';</div><div class="line">  echo $_GET['callback'].'('.$jsondata.')';</div></pre></td></tr></table></figure>
<blockquote>
<p>result</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">I&apos;m aaa,and I&apos;m 20 years old.</div></pre></td></tr></table></figure>
<ul>
<li>CORS 解决跨域</li>
</ul>
<p><code>a.com</code> 下的 html 请求 <code>b.com</code> 下的 php</p>
<blockquote>
<p>编辑 <code>http://a.com/index.html</code></p>
</blockquote>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">'http://libs.baidu.com/jquery/2.0.0/jquery.min.js'</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="javascript"></span></div><div class="line">$.ajax(&#123;</div><div class="line">	<span class="attr">url</span>: <span class="string">'http://b.com/a.php'</span>,</div><div class="line">	<span class="comment">// dataType: 'jsonp',</span></div><div class="line">	success: <span class="function"><span class="keyword">function</span> (<span class="params">ret</span>) </span>&#123;</div><div class="line">		 <span class="built_in">console</span>.log(<span class="string">"I'm "</span> + ret.name + <span class="string">",and I'm "</span> + ret.age + <span class="string">" years old."</span>);</div><div class="line">	&#125;,</div><div class="line">	<span class="attr">error</span>: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">		 alert(<span class="string">"Something error"</span>);</div><div class="line">	&#125;</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<blockquote>
<p>编辑 <code>http://b.com/a.php</code></p>
</blockquote>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">header("Access-Control-Allow-Origin:http://a.com");</div><div class="line">&lt;?php</div><div class="line">  $jsondata = '&#123;</div><div class="line">    "name": "aaa",</div><div class="line">    "age": 20</div><div class="line">  &#125;';</div><div class="line">  echo $_GET['callback'].'('.$jsondata.')';</div></pre></td></tr></table></figure>
<blockquote>
<p>result</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">I&apos;m aaa,and I&apos;m 20 years old.</div></pre></td></tr></table></figure>
<hr>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;h3 id=&quot;【知识点】&quot;&gt;&lt;a href=&quot;#【知识点】&quot; class=&quot;headerlink&quot; title=&quot;【知识点】&quot;&gt;&lt;/a&gt;【知识点】&lt;/h3&gt;&lt;/blockquote&gt;
&lt;h4 id=&quot;1-什么是同源策略？&quot;&gt;&lt;a href=&quot;#1-什么是同源策略？&quot; class=&quot;headerlink&quot; title=&quot;1. 什么是同源策略？&quot;&gt;&lt;/a&gt;&lt;strong&gt;1. 什么是同源策略？&lt;/strong&gt;&lt;/h4&gt;&lt;p&gt;同源策略是浏览器最核心也是最基本的安全的功能。所谓同源，指的是协议、域名、端口号都相同，不同源的客户脚本（JavaScript）在没有明确授权的情况下，只能读写本域下的资源，不能读写对方的资源；&lt;/p&gt;
&lt;h4 id=&quot;2-什么是跨域？跨域有几种实现形式？&quot;&gt;&lt;a href=&quot;#2-什么是跨域？跨域有几种实现形式？&quot; class=&quot;headerlink&quot; title=&quot;2. 什么是跨域？跨域有几种实现形式？&quot;&gt;&lt;/a&gt;&lt;strong&gt;2. 什么是跨域？跨域有几种实现形式？&lt;/strong&gt;&lt;/h4&gt;&lt;p&gt;跨域是指突破JavaScript同源策略的限制，&lt;code&gt;a.com&lt;/code&gt; 域名下的 &lt;code&gt;js&lt;/code&gt; 可以操作 &lt;code&gt;b.com&lt;/code&gt; 或者 &lt;code&gt;child.a.com&lt;/code&gt; 下的对象中的数据。&lt;br&gt;
    
    </summary>
    
      <category term="编程学习" scheme="http://licao404.com/categories/%E7%BC%96%E7%A8%8B%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="前端基础" scheme="http://licao404.com/categories/%E7%BC%96%E7%A8%8B%E5%AD%A6%E4%B9%A0/%E5%89%8D%E7%AB%AF%E5%9F%BA%E7%A1%80/"/>
    
      <category term="计算机网络" scheme="http://licao404.com/categories/%E7%BC%96%E7%A8%8B%E5%AD%A6%E4%B9%A0/%E5%89%8D%E7%AB%AF%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/"/>
    
    
      <category term="Web服务器" scheme="http://licao404.com/tags/Web%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
    
      <category term="浏览器" scheme="http://licao404.com/tags/%E6%B5%8F%E8%A7%88%E5%99%A8/"/>
    
      <category term="跨域" scheme="http://licao404.com/tags/%E8%B7%A8%E5%9F%9F/"/>
    
      <category term="CORS" scheme="http://licao404.com/tags/CORS/"/>
    
      <category term="JSONP" scheme="http://licao404.com/tags/JSONP/"/>
    
  </entry>
  
  <entry>
    <title>瀑布流布局</title>
    <link href="http://licao404.com/2016/04/28/%E7%80%91%E5%B8%83%E6%B5%81%E5%B8%83%E5%B1%80/"/>
    <id>http://licao404.com/2016/04/28/瀑布流布局/</id>
    <published>2016-04-27T16:04:14.000Z</published>
    <updated>2016-07-12T14:18:58.577Z</updated>
    
    <content type="html"><![CDATA[<blockquote class="blockquote-center">瀑布流布局在国内外一些网站上基本都能看到，来看几个使用了瀑布流布局的网站： <a href="https://www.pinterest.com/" target="_blank" rel="external">Pinterest</a> (可能是最早使用这种布局的网站)、<a href="http://www.pixillion.com/our-work/film/" target="_blank" rel="external">Pixillion</a>、<a href="https://gimmebar.com/user/cameron" target="_blank" rel="external">Gimme Bar</a> 。炫酷吗，瀑布流布局的实现方式有很多种，也有各自的代表网站，并且已有很多瀑布流插件，但是自己动手丰衣足食，弄懂原理是关键。本文将解析瀑布流布局的原理，并自己用 jQuery 实现，当然也可以用原生 JavaScript 。</blockquote>

<a id="more"></a>
<hr>
<blockquote>
<h3 id="【原理准备】"><a href="#【原理准备】" class="headerlink" title="【原理准备】"></a>【原理准备】</h3></blockquote>
<h4 id="瀑布流布局的原理是什么"><a href="#瀑布流布局的原理是什么" class="headerlink" title="瀑布流布局的原理是什么?"></a><strong>瀑布流布局的原理是什么?</strong></h4><p>首先我们针对的是等宽不等高的元素进行布局，例如承载图片的 <code>item</code> 等；由于元素高度是不等的，布局的大体思想就是让每个元素找到最短的队，然后排队。</p>
<ol>
<li><p>首先得知道排几队，通过浏览器窗口宽度除以元素宽度即可，当然注意浏览器的宽度是可变的哦（我们可以通过 <code>resize</code> 实时监听浏览器窗口）；</p>
</li>
<li><p>知道了排几队，接着我们需要知道每一队的长度，当然这个值随着每一个元素的加入是改变的，那就通过一个数组来存储吧，数组长度就是有几队，数组每一项的值存队的长度；</p>
</li>
<li><p>然后我们来看最关键的点：<strong>挑最短的队排！</strong> 具体可以遍历数组获得最短的队是哪一队，这队多长？<br>找到了队伍咱就排吧，别忘了把自己的高度算进你这队的总长度呀！</p>
</li>
</ol>
<blockquote>
<h3 id="【具体实现】"><a href="#【具体实现】" class="headerlink" title="【具体实现】"></a>【具体实现】</h3></blockquote>
<p>原理虽然简单，来个 <code>demo</code> 看看怎样用代码描述：</p>
<ul>
<li><a href="http://febox.applinzi.com/task30/task30.html" target="_blank" rel="external">效果预览</a></li>
<li><a href="https://github.com/licao404/landemo/blob/master/task30/task30.html" target="_blank" rel="external">实现代码</a></li>
</ul>
<hr>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote class = &quot;blockquote-center&quot;&gt;瀑布流布局在国内外一些网站上基本都能看到，来看几个使用了瀑布流布局的网站： &lt;a href=&quot;https://www.pinterest.com/&quot;&gt;Pinterest&lt;/a&gt; (可能是最早使用这种布局的网站)、&lt;a href=&quot;http://www.pixillion.com/our-work/film/&quot;&gt;Pixillion&lt;/a&gt;、&lt;a href=&quot;https://gimmebar.com/user/cameron&quot;&gt;Gimme Bar&lt;/a&gt; 。炫酷吗，瀑布流布局的实现方式有很多种，也有各自的代表网站，并且已有很多瀑布流插件，但是自己动手丰衣足食，弄懂原理是关键。本文将解析瀑布流布局的原理，并自己用 jQuery 实现，当然也可以用原生 JavaScript 。&lt;/blockquote&gt;
    
    </summary>
    
      <category term="编程学习" scheme="http://licao404.com/categories/%E7%BC%96%E7%A8%8B%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="前端基础" scheme="http://licao404.com/categories/%E7%BC%96%E7%A8%8B%E5%AD%A6%E4%B9%A0/%E5%89%8D%E7%AB%AF%E5%9F%BA%E7%A1%80/"/>
    
    
      <category term="JavaScript" scheme="http://licao404.com/tags/JavaScript/"/>
    
      <category term="jQuery" scheme="http://licao404.com/tags/jQuery/"/>
    
      <category term="效果" scheme="http://licao404.com/tags/%E6%95%88%E6%9E%9C/"/>
    
  </entry>
  
  <entry>
    <title>jQuery懒加载</title>
    <link href="http://licao404.com/2016/04/25/jQuery%E6%87%92%E5%8A%A0%E8%BD%BD/"/>
    <id>http://licao404.com/2016/04/25/jQuery懒加载/</id>
    <published>2016-04-25T11:49:41.000Z</published>
    <updated>2016-07-12T14:21:43.129Z</updated>
    
    <content type="html"><![CDATA[<blockquote class="blockquote-center">对于图片过多的页面，我们会使用懒加载，具体表现为当页面被请求时，只加载可视区域的图片，其它部分的图片则不加载，只有这些图片出现在可视区域时才会动态加载这些图片，从而节约了网络带宽和提高了初次加载的速度，也提高了用户体验。本文将介绍其实现原理以及如何动手实现。</blockquote>

<a id="more"></a>
<blockquote>
<h3 id="【原理准备】"><a href="#【原理准备】" class="headerlink" title="【原理准备】"></a>【原理准备】</h3></blockquote>
<h4 id="1-如何判断一个元素是否出现在窗口可视范围（浏览器的上边缘和下边缘之间，肉眼可视）。写一个函数-isVisible-实现"><a href="#1-如何判断一个元素是否出现在窗口可视范围（浏览器的上边缘和下边缘之间，肉眼可视）。写一个函数-isVisible-实现" class="headerlink" title="1. 如何判断一个元素是否出现在窗口可视范围（浏览器的上边缘和下边缘之间，肉眼可视）。写一个函数      isVisible 实现"></a><strong>1. 如何判断一个元素是否出现在窗口可视范围（浏览器的上边缘和下边缘之间，肉眼可视）。写一个函数      <code>isVisible</code> 实现</strong></h4><p><img src="http://7xr868.com1.z0.glb.clouddn.com/task29/isVisible.png" alt=""><br>依照我们画的思路图，给出描述程序：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//判断元素是否出现在浏览器窗口可视范围</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">isVisiable</span> (<span class="params">$node</span>) </span>&#123;</div><div class="line">	 <span class="keyword">var</span> scrollT = $(<span class="built_in">window</span>).scrollTop(),<span class="comment">//获取页面顶部到窗口顶部的滚动距离</span></div><div class="line">	 	 windowH = $(<span class="built_in">window</span>).height(),<span class="comment">//获取浏览器窗口高度</span></div><div class="line">	 	 offsetT = $node.offset().top;<span class="comment">//获取该元素距页面顶部的距离</span></div><div class="line"></div><div class="line">	 <span class="keyword">if</span> (scrollT+windowH &gt; offsetT) &#123;</div><div class="line">	 	<span class="keyword">return</span> <span class="literal">true</span>;</div><div class="line">	 &#125;<span class="keyword">else</span>&#123;</div><div class="line">	 	<span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">	 &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h4 id="2-当窗口滚动时，判断一个元素是不是出现在窗口可视范围。每次出现都在控制台打印-true-。用代码实现"><a href="#2-当窗口滚动时，判断一个元素是不是出现在窗口可视范围。每次出现都在控制台打印-true-。用代码实现" class="headerlink" title="2. 当窗口滚动时，判断一个元素是不是出现在窗口可视范围。每次出现都在控制台打印 true 。用代码实现"></a><strong>2. 当窗口滚动时，判断一个元素是不是出现在窗口可视范围。每次出现都在控制台打印 true 。用代码实现</strong></h4><blockquote>
<p><a href="http://js.jirengu.com/fufo/8/edit?html,console,output" target="_blank" rel="external">demo</a></p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> $target = $(<span class="string">'.nav3'</span>);</div><div class="line"></div><div class="line"><span class="comment">//监视窗口滚动</span></div><div class="line">$(<span class="built_in">window</span>).on(<span class="string">'scroll'</span>,<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> result = isVisiable ($target);</div><div class="line">    <span class="keyword">if</span>(result)&#123;<span class="built_in">console</span>.log(result)&#125;;</div><div class="line">&#125;)  </div><div class="line"></div><div class="line"><span class="comment">//判断元素是否出现在浏览器窗口可视范围</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">isVisiable</span> (<span class="params">$node</span>) </span>&#123;</div><div class="line">  <span class="keyword">var</span> scrollT = $(<span class="built_in">window</span>).scrollTop(),<span class="comment">//获取页面顶部到窗口顶部的滚动距离</span></div><div class="line">      windowH = $(<span class="built_in">window</span>).height(),<span class="comment">//获取浏览器窗口高度</span></div><div class="line">      offsetT = $node.offset().top;<span class="comment">//获取该元素距页面顶部的距离</span></div><div class="line"></div><div class="line">  <span class="keyword">if</span> (scrollT+windowH &gt; offsetT) &#123;</div><div class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</div><div class="line">  &#125;<span class="keyword">else</span>&#123;</div><div class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="3-当窗口滚动时，判断一个元素是不是出现在窗口可视范围。在元素第一次出现时在控制台打印-true，以后再次出现不做任何处理。用代码实现"><a href="#3-当窗口滚动时，判断一个元素是不是出现在窗口可视范围。在元素第一次出现时在控制台打印-true，以后再次出现不做任何处理。用代码实现" class="headerlink" title="3. 当窗口滚动时，判断一个元素是不是出现在窗口可视范围。在元素第一次出现时在控制台打印 true，以后再次出现不做任何处理。用代码实现"></a><strong>3. 当窗口滚动时，判断一个元素是不是出现在窗口可视范围。在元素第一次出现时在控制台打印 true，以后再次出现不做任何处理。用代码实现</strong></h4><blockquote>
<p><a href="http://js.jirengu.com/lif/1/edit?html,console,output" target="_blank" rel="external">demo</a></p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">console</span>.log(<span class="string">"当nav3出现时打印true"</span>);</div><div class="line"><span class="keyword">var</span> $target = $(<span class="string">'.nav3'</span>);</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">isVisiable</span> (<span class="params">$node</span>) </span>&#123;</div><div class="line">  <span class="keyword">var</span> scrollT = $(<span class="built_in">window</span>).scrollTop(),<span class="comment">//获取页面顶部到窗口顶部的滚动距离</span></div><div class="line">      windowH = $(<span class="built_in">window</span>).height(),<span class="comment">//获取浏览器窗口高度</span></div><div class="line">      offsetT = $node.offset().top;<span class="comment">//获取该元素距页面顶部的距离</span></div><div class="line"></div><div class="line">  <span class="comment">//判断该元素是否出现过，出现过就不再进行</span></div><div class="line">  <span class="keyword">if</span> ($target.data(<span class="string">'isAppeared'</span>)) &#123;</div><div class="line">  	<span class="keyword">return</span>;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="keyword">if</span> (scrollT+windowH &gt; offsetT) &#123;</div><div class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</div><div class="line">  &#125;<span class="keyword">else</span>&#123;</div><div class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">var</span> clock;</div><div class="line">$(<span class="built_in">window</span>).on(<span class="string">'scroll'</span>,<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">	<span class="keyword">if</span> (clock) &#123;</div><div class="line">		clearTimeout(clock);</div><div class="line">	&#125;</div><div class="line">	clock = setTimeout(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">	    <span class="keyword">var</span> result = isVisiable ($target);</div><div class="line"></div><div class="line">	    <span class="keyword">if</span>(result)&#123;</div><div class="line">	    	<span class="built_in">console</span>.log(result);</div><div class="line">	    	$target.data(<span class="string">'isAppeared'</span>,<span class="literal">true</span>);</div><div class="line">	    &#125;;    		  </div><div class="line">	&#125;,<span class="number">300</span>);</div><div class="line"></div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<h4 id="4-图片懒加载的原理是什么？"><a href="#4-图片懒加载的原理是什么？" class="headerlink" title="4.图片懒加载的原理是什么？"></a><strong>4.图片懒加载的原理是什么？</strong></h4><p>原理实际上很简单，当页面被请求时，只加载可视区域的图片，其它部分的图片则不加载，只有这些图片出现在可视区域时才会动态加载这些图片。判断图片是否出现在可视区域内前文已通过函数实现；还有一个就是当页面加载时我们需要将页面上的 <code>img</code> 标签的 <code>src</code> 指向一个小的图片（随便是啥），把我们要展示图片的真实地址放在一个自定义属性中，如 <code>data-src</code>：</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"loading.gif"</span> <span class="attr">data-src</span>=<span class="string">"http://xx.oo.com"</span>/&gt;</span></div></pre></td></tr></table></figure>
<blockquote>
<h3 id="【具体实现】"><a href="#【具体实现】" class="headerlink" title="【具体实现】"></a>【具体实现】</h3></blockquote>
<h4 id="1-实现如下回到顶部效果"><a href="#1-实现如下回到顶部效果" class="headerlink" title="1. 实现如下回到顶部效果"></a><strong>1. 实现如下回到顶部效果</strong></h4><p>当页面滚动到一定距离时，窗口右下角会出现回到顶部按钮，点击按钮页面会滚动到顶部。</p>
<ul>
<li><a href="http://febox.applinzi.com/task29/task29-1.html" target="_blank" rel="external">效果预览</a></li>
<li><a href="https://github.com/licao404/landemo/blob/master/task29/js/backtop.js" target="_blank" rel="external">实现代码</a></li>
</ul>
<h4 id="2-实现图片懒加载效果"><a href="#2-实现图片懒加载效果" class="headerlink" title="2. 实现图片懒加载效果"></a><strong>2. 实现图片懒加载效果</strong></h4><ul>
<li><a href="http://febox.applinzi.com/task29/task29-2.html" target="_blank" rel="external">效果预览</a></li>
<li><a href="https://github.com/licao404/landemo/blob/master/task29/task29-2.html" target="_blank" rel="external">实现代码</a></li>
</ul>
<h4 id="3-实现如下无限滚动效果"><a href="#3-实现如下无限滚动效果" class="headerlink" title="3. 实现如下无限滚动效果"></a><strong>3. 实现如下无限滚动效果</strong></h4><ul>
<li><a href="http://febox.applinzi.com/task29/task29-3.html#" target="_blank" rel="external">效果预览</a></li>
<li><a href="https://github.com/licao404/landemo/blob/master/task29/task29-3.html" target="_blank" rel="external">实现代码</a></li>
</ul>
<hr>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote class = &quot;blockquote-center&quot;&gt;对于图片过多的页面，我们会使用懒加载，具体表现为当页面被请求时，只加载可视区域的图片，其它部分的图片则不加载，只有这些图片出现在可视区域时才会动态加载这些图片，从而节约了网络带宽和提高了初次加载的速度，也提高了用户体验。本文将介绍其实现原理以及如何动手实现。&lt;/blockquote&gt;
    
    </summary>
    
      <category term="编程学习" scheme="http://licao404.com/categories/%E7%BC%96%E7%A8%8B%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="前端基础" scheme="http://licao404.com/categories/%E7%BC%96%E7%A8%8B%E5%AD%A6%E4%B9%A0/%E5%89%8D%E7%AB%AF%E5%9F%BA%E7%A1%80/"/>
    
    
      <category term="JavaScript" scheme="http://licao404.com/tags/JavaScript/"/>
    
      <category term="jQuery" scheme="http://licao404.com/tags/jQuery/"/>
    
      <category term="效果" scheme="http://licao404.com/tags/%E6%95%88%E6%9E%9C/"/>
    
  </entry>
  
  <entry>
    <title>jQuery实现几种轮播</title>
    <link href="http://licao404.com/2016/04/24/jQuery%E5%AE%9E%E7%8E%B0%E5%87%A0%E7%A7%8D%E8%BD%AE%E6%92%AD/"/>
    <id>http://licao404.com/2016/04/24/jQuery实现几种轮播/</id>
    <published>2016-04-24T02:34:23.000Z</published>
    <updated>2016-07-12T14:23:28.853Z</updated>
    
    <content type="html"><![CDATA[<span itemprop="image" itemscope="" itemtype="http://schema.org/ImageObject"><img itemprop="url image" src="http://7xrvo9.com1.z0.glb.clouddn.com/0424/%E8%BD%AE%E6%92%AD.gif" class="full-image" alt="alt"><meta itemprop="width" content="auto"><meta itemprop="height" content="auto"></span>
<a id="more"></a>
<hr>
<blockquote>
<p><strong>淡入淡出轮播</strong></p>
</blockquote>
<ul>
<li><p><a href="http://febox.applinzi.com/task27/task27-1.html" target="_blank" rel="external">效果预览</a></p>
</li>
<li><p><a href="https://github.com/licao404/landemo/blob/master/task27/task27-1.html" target="_blank" rel="external">实现代码</a></p>
</li>
</ul>
<hr>
<blockquote>
<p><strong>多个轮播</strong></p>
</blockquote>
<ul>
<li><p><a href="http://febox.applinzi.com/task27/task27-2.html" target="_blank" rel="external">效果预览</a></p>
</li>
<li><p><a href="https://github.com/licao404/landemo/blob/master/task27/task27-2.html" target="_blank" rel="external">实现代码</a></p>
</li>
</ul>
<hr>
<blockquote>
<p><strong>无缝轮播(克隆法)</strong></p>
</blockquote>
<ul>
<li><p><a href="http://febox.applinzi.com/task27/task27-3.html" target="_blank" rel="external">效果预览</a></p>
</li>
<li><p><a href="https://github.com/licao404/landemo/blob/master/task27/task27-3.html" target="_blank" rel="external">实现代码</a></p>
</li>
</ul>
<hr>
<blockquote>
<p><strong>无缝轮播（改变DOM）</strong></p>
</blockquote>
<ul>
<li><p><a href="http://febox.applinzi.com/task27/task27-3-2.html" target="_blank" rel="external">效果预览</a></p>
</li>
<li><p><a href="https://github.com/licao404/landemo/blob/master/task27/task27-3-2.html" target="_blank" rel="external">实现代码</a></p>
</li>
</ul>
<hr>
<blockquote>
<p><strong>全屏轮播</strong></p>
</blockquote>
<ul>
<li><p><a href="http://febox.applinzi.com/task27/task27-4.html" target="_blank" rel="external">效果预览</a></p>
</li>
<li><p><a href="https://github.com/licao404/landemo/blob/master/task27/task27-4.html" target="_blank" rel="external">实现代码</a></p>
</li>
</ul>
<hr>
]]></content>
    
    <summary type="html">
    
      &lt;span itemprop=&quot;image&quot; itemscope itemtype=&quot;http://schema.org/ImageObject&quot;&gt;&lt;img itemprop=&quot;url image&quot; src=&quot;http://7xrvo9.com1.z0.glb.clouddn.com/0424/%E8%BD%AE%E6%92%AD.gif&quot; class=&quot;full-image&quot; alt=&quot;alt&quot; /&gt;&lt;meta itemprop=&quot;width&quot; content=&quot;auto&quot;&gt;&lt;meta itemprop=&quot;height&quot; content=&quot;auto&quot;&gt;&lt;/span&gt;
    
    </summary>
    
      <category term="编程学习" scheme="http://licao404.com/categories/%E7%BC%96%E7%A8%8B%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="前端基础" scheme="http://licao404.com/categories/%E7%BC%96%E7%A8%8B%E5%AD%A6%E4%B9%A0/%E5%89%8D%E7%AB%AF%E5%9F%BA%E7%A1%80/"/>
    
    
      <category term="JavaScript" scheme="http://licao404.com/tags/JavaScript/"/>
    
      <category term="jQuery" scheme="http://licao404.com/tags/jQuery/"/>
    
      <category term="效果" scheme="http://licao404.com/tags/%E6%95%88%E6%9E%9C/"/>
    
  </entry>
  
  <entry>
    <title>jQuery常用方法 &amp; Ajax</title>
    <link href="http://licao404.com/2016/04/19/jQuery%E5%B8%B8%E7%94%A8%E6%96%B9%E6%B3%95-Ajax/"/>
    <id>http://licao404.com/2016/04/19/jQuery常用方法-Ajax/</id>
    <published>2016-04-19T14:57:05.000Z</published>
    <updated>2016-07-12T14:25:12.609Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<h3 id="【知识点】"><a href="#【知识点】" class="headerlink" title="【知识点】"></a>【知识点】</h3></blockquote>
<h4 id="1-Jquery-中，-document-ready-是什么意思？和-window-onload-的区别？-还有其他什么写法或者替代方法？"><a href="#1-Jquery-中，-document-ready-是什么意思？和-window-onload-的区别？-还有其他什么写法或者替代方法？" class="headerlink" title="1. Jquery 中， $(document).ready() 是什么意思？和  window.onload 的区别？ 还有其他什么写法或者替代方法？"></a><strong>1. Jquery 中， <code>$(document).ready()</code> 是什么意思？和  <code>window.onload</code> 的区别？ 还有其他什么写法或者替代方法？</strong></h4><p><code>$(document).ready()</code> 确保在所有 DOM 构建完成之后，再运行 jQuery 代码，不管其中的代码放在任何位置都是可以运行的，相当于放在了尾部：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$(<span class="built_in">document</span>).ready(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">  <span class="built_in">console</span>.log( <span class="string">"ready!"</span> );</div><div class="line">&#125;);</div></pre></td></tr></table></figure></p>
<a id="more"></a>
<blockquote>
<p><code>$(document).ready()</code> 和 <code>window.onload</code> 的区别：</p>
</blockquote>
<ul>
<li><p>执行时间不同。<code>window.onload</code> 是等页面所有的资源包括图片等外链资源都加载完毕后才能执行；<code>$(document).ready()</code> 只需等到 DOM 构建完成后便可执行，与前者的区别是 DOM 树虽然建立起来，但页面不一定加载完成；</p>
</li>
<li><p>可被执行的次数不同。 <code>window.onload</code> 不能同时编写多个，如果有多个 <code>window.onload</code> 方法，只会执行最后一个 <code>window.onload</code>，之前的 <code>window.onload</code> 都将被覆盖；<code>$(document).ready()</code> 可以同时编写多个，并且都可以得到执行；</p>
</li>
<li><p><code>window.onload</code> 没有简写形式</p>
</li>
</ul>
<blockquote>
<p><code>$(document).ready()</code> 几种简写形式：</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$(<span class="built_in">document</span>()&#123;</div><div class="line">  <span class="built_in">console</span>.log( <span class="string">"ready!"</span> );</div><div class="line">&#125;)</div></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="built_in">console</span>.log( <span class="string">"ready!"</span> );</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$().ready(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">  <span class="built_in">console</span>.log( <span class="string">"ready!"</span> );</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<h4 id="2-node-html-和-node-text-的区别"><a href="#2-node-html-和-node-text-的区别" class="headerlink" title="2. $node.html() 和 $node.text() 的区别?"></a><strong>2. <code>$node.html()</code> 和 <code>$node.text()</code> 的区别?</strong></h4><ul>
<li><code>$node.html()</code> 获取的是 <code>$node</code>内部的HTML内容；</li>
<li><code>$node.text()</code> 获取的是 <code>$node</code>内部的文本内容；</li>
</ul>
<h4 id="3-extend-的作用和用法"><a href="#3-extend-的作用和用法" class="headerlink" title="3. $.extend 的作用和用法?"></a><strong>3. <code>$.extend</code> 的作用和用法?</strong></h4><blockquote>
<p><code>$.extend</code> 是把将两个或更多对象的内容合并到 <strong>第一个</strong> 对象。</p>
</blockquote>
<ul>
<li><p><code>$.extend( target [, object1 ] [, objectN ] )</code><br><strong><em>target</em></strong>：一个对象，如果附加的对象被传递给这个方法将那么它将接收新的属性，如果它是唯一的参数将扩展jQuery的命名空间；<br><strong><em>object1</em></strong>：待合并到第一个对象的对象；<br><strong><em>objectN</em></strong>：待合并到第一个对象的对象；</p>
</li>
<li><p><code>$.extend( [deep], target [, object1 ] [, objectN ] )</code><br><strong><em>deep</em></strong>：如果是 <code>true</code>，合并成为递归（又叫做深拷贝）。例如下面一个例子：</p>
</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> student01 = &#123;<span class="attr">name</span>:<span class="string">"licao"</span>,<span class="attr">age</span>:<span class="number">20</span>&#125;;</div><div class="line"><span class="keyword">var</span> student02 = &#123;<span class="attr">name</span>:<span class="string">"xiaomin"</span>,<span class="attr">age</span>:<span class="number">25</span>,<span class="attr">sex</span>:<span class="string">"man"</span>&#125;;</div><div class="line">$.extend(student01,student02);</div></pre></td></tr></table></figure>
<p>运行后<code>student01</code>将变为 <code>{age:25,name:&quot;xiaomin&quot;,sex:&quot;man&quot;}</code>,而<code>student02</code>不变；</p>
<p>如果我们想保留原对象，我们可以通过传递一个空对象作为目标对象：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> student01 = &#123;<span class="attr">name</span>:<span class="string">"licao"</span>,<span class="attr">age</span>:<span class="number">20</span>&#125;;</div><div class="line"><span class="keyword">var</span> student02 = &#123;<span class="attr">name</span>:<span class="string">"xiaomin"</span>,<span class="attr">age</span>:<span class="number">25</span>,<span class="attr">sex</span>:<span class="string">"man"</span>&#125;;</div><div class="line"><span class="keyword">var</span> object = $.extend(&#123;&#125;, object1, object2);</div></pre></td></tr></table></figure>
<p>运行后<code>object</code>将变为 <code>{age:25,name:&quot;xiaomin&quot;,sex:&quot;man&quot;}</code>，而<code>student01</code> , <code>student02</code>不变；</p>
<h4 id="4-JQuery-的链式调用是什么？"><a href="#4-JQuery-的链式调用是什么？" class="headerlink" title="4. JQuery 的链式调用是什么？"></a><strong>4. JQuery 的链式调用是什么？</strong></h4><p>链式调用是一种语法招数，通过多次重复使用同一个变量来达到用少量代码表达复杂操作的目的，代码看起来更加优雅。缺点是占用了函数的返回值。当我们在实现一个<code>hover</code>效果：</p>
<p><img src="http://7xr868.com1.z0.glb.clouddn.com/%E9%93%BE%E5%BC%8F%E8%B0%83%E7%94%A8.gif" alt=""><br><code>mouseover</code>时显示半透明层，<code>mouseleave</code>时不显示，这其实就是 jQuery 链式调用的反映：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">$(<span class="string">".panel"</span>).on(<span class="string">'mouseover'</span>, <span class="string">'.item'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    $(<span class="keyword">this</span>).find(<span class="string">'.item-hover'</span>).show();</div><div class="line">&#125;).on(<span class="string">'mouseleave'</span>, <span class="string">'.item'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    $(<span class="keyword">this</span>).find(<span class="string">'.item-hover'</span>).hide();</div><div class="line">&#125;);</div></pre></td></tr></table></figure></p>
<p>我们选中的对象 <code>&#39;.item&#39;</code> 执行完一个方法后就返回本身（<code>return this</code>）,然后被返回的对象继续执行后面的方法，可以写一下 <a href="http://www.imooc.com/code/3402" target="_blank" rel="external">小例子</a> 增加理解</p>
<h4 id="5-JQuery-Ajax-中缓存怎样控制"><a href="#5-JQuery-Ajax-中缓存怎样控制" class="headerlink" title="5. JQuery Ajax 中缓存怎样控制?"></a><strong>5. JQuery Ajax 中缓存怎样控制?</strong></h4><p>首先得了解为什么我们二次访问后会访问之前一次请求成功后的缓存？这是浏览器的一种机制，当使用 Ajax 请求回来数据以后，浏览器会将请求的 URL 和数据缓存起来，然后当我们第二次请求时，浏览器先匹配本次URL是与之前留在缓存里的URL一致，是则给你本地缓存的数据，不会请求web服务器。</p>
<blockquote>
<p>如何解决 JQuery Ajax 缓存问题</p>
</blockquote>
<ul>
<li><p>调用 <code>$.ajaxSetup ({cache:false})</code> 方法</p>
</li>
<li></li>
</ul>
<h4 id="6-jQuery-中-data-函数的作用"><a href="#6-jQuery-中-data-函数的作用" class="headerlink" title="6. jQuery 中 data 函数的作用"></a><strong>6. jQuery 中 <code>data</code> 函数的作用</strong></h4><p>在匹配元素上存储任意相关数据 或 返回匹配的元素集合中的第一个元素的给定名称的数据存储的值。</p>
<p><code>.data()</code> 方法允许我们在DOM元素上绑定任意类型的数据,避免了循环引用的内存泄漏风险。</p>
<ul>
<li><code>.data( key, value )</code>：在匹配元素上存储任意相关数据</li>
<li><code>.data( key )</code>：返回匹配的元素集合中的第一个元素的给定名称的数据存储的值</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$(<span class="string">'body'</span>).data(<span class="string">"data"</span>,<span class="number">20</span>);</div></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$(<span class="string">'body'</span>).data(<span class="string">"data"</span>);<span class="comment">//20</span></div><div class="line">$(<span class="string">"body"</span>).data();<span class="comment">//[object Object] &#123; data: 20 &#125;</span></div></pre></td></tr></table></figure>
<p>我们可以在 dom 元素中存值然后取回</p>
<hr>
<blockquote>
<h3 id="【练习】"><a href="#【练习】" class="headerlink" title="【练习】"></a>【练习】</h3></blockquote>
<h4 id="1-写出以下功能对应的-jQuery-方法："><a href="#1-写出以下功能对应的-jQuery-方法：" class="headerlink" title="1. 写出以下功能对应的 jQuery 方法："></a><strong>1. 写出以下功能对应的 jQuery 方法：</strong></h4><ol>
<li><p>给元素 <code>$node</code> 添加 class <code>active</code>，给元素 $noed 删除 class <code>active</code></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$node.addClass(<span class="string">"active"</span>);<span class="comment">//添加 class</span></div><div class="line"></div><div class="line">$node.removeClass(<span class="string">"active"</span>);<span class="comment">//删除 class</span></div></pre></td></tr></table></figure>
</li>
<li><p>展示元素 <code>$node</code>, 隐藏元素<code>$node</code></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">$node.show();<span class="comment">//展示元素 `$node`</span></div><div class="line">$node.fadeIn(<span class="string">"slow"</span>);<span class="comment">//通过淡入的方式显示元素。</span></div><div class="line"></div><div class="line">$node.hide();<span class="comment">//隐藏元素`$node`</span></div><div class="line">$node.fadeOut(<span class="string">"slow"</span>);<span class="comment">//通过淡入的方式隐藏元素。</span></div></pre></td></tr></table></figure>
</li>
<li><p>获取元素 <code>$node</code> 的 属性: id、src、title， 修改以上属性</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">$node.attr(<span class="string">"id"</span>);</div><div class="line">$node.attr(<span class="string">"src"</span>);</div><div class="line">$node.attr(<span class="string">"title"</span>);</div><div class="line"></div><div class="line"><span class="comment">//单独设置一个简单属性</span></div><div class="line">$node.attr(<span class="string">"id"</span>,<span class="string">"yourid"</span>);</div><div class="line"></div><div class="line"><span class="comment">//一次设置多个属性</span></div><div class="line">$node.attr(&#123;</div><div class="line">  <span class="attr">id</span>: <span class="string">"yourid"</span>,</div><div class="line">  <span class="attr">src</span>: <span class="string">"http://www.licao404.com/..."</span>,</div><div class="line">  <span class="attr">title</span>: <span class="string">"jQuery"</span></div><div class="line">&#125;);</div></pre></td></tr></table></figure>
</li>
<li><p>给 <code>$node</code> 添加自定义属性 <code>data-src</code></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$node.attr(<span class="string">"data-src"</span>,<span class="string">"value"</span>);</div></pre></td></tr></table></figure>
</li>
<li><p>在 <code>$ct</code> 内部最开头添加元素 <code>$node</code></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ct.prepand($node);</div></pre></td></tr></table></figure>
</li>
<li><p>在 <code>$ct</code> 内部最末尾添加元素 <code>$node</code></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ct.append($node);</div></pre></td></tr></table></figure>
</li>
<li><p>删除 <code>$node</code></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$node.remove(); <span class="comment">//同时移除移除元素内部的一切,包括元素上的事件及 jQuery 数据。</span></div><div class="line">$node.detach(); <span class="comment">//删除的元素不删除数据和事件</span></div></pre></td></tr></table></figure>
</li>
<li><p>把 <code>$ct</code> 里内容清空</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ct.empty();<span class="comment">//为了避免内存泄漏，jQuery先移除子元素的数据和事件处理函数，然后移除子元素。</span></div></pre></td></tr></table></figure>
</li>
<li><p>在 <code>$ct</code> 里设置 html <code>&lt;div class=&quot;btn&quot;&gt;&lt;/div&gt;</code></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ct.html(<span class="string">'&lt;div class="btn"&gt;&lt;/div&gt;'</span>);</div></pre></td></tr></table></figure>
</li>
<li><p>获取、设置 <code>$node</code> 的宽度、高度(分别不包括内边距、包括内边距、包括边框、包括外边距)</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">$node.height()<span class="comment">//获取匹配元素集合中的第一个元素的当前计算高度值(不包括padding)。</span></div><div class="line">$node.height(<span class="number">200</span>)<span class="comment">//设置高度为200px,不输入单位默认是 px</span></div><div class="line"></div><div class="line">$node.innerHeight()<span class="comment">//获得匹配集合中第一个元素的当前计算的内部高度（包括padding，但不包括border）</span></div><div class="line">$node.innerHeight(<span class="number">200</span>)<span class="comment">//</span></div><div class="line"></div><div class="line">$node.outerHeight()<span class="comment">//获得匹配集合中第一个元素的当前计算的高度（）</span></div><div class="line">$node.outerHeight(<span class="literal">false</span>)<span class="comment">///获得匹配集合中第一个元素的当前计算的高度（包括border，但不包括margin）</span></div><div class="line"></div><div class="line">$node.outerHeight(<span class="literal">true</span>)<span class="comment">///获得匹配集合中第一个元素的当前计算的高度（包括margin）</span></div><div class="line"></div><div class="line"><span class="comment">//宽度设置也是和高度设置一样；</span></div></pre></td></tr></table></figure>
</li>
<li><p>获取窗口滚动条垂直滚动距离</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$node.scrollTop();</div></pre></td></tr></table></figure>
</li>
<li><p>获取 <code>$node</code> 到根节点水平、垂直偏移距离</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$node.offset();</div></pre></td></tr></table></figure>
</li>
<li><p>修改 <code>$node</code> 的样式，字体颜色设置红色，字体大小设置14px</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">$node.css(&#123;</div><div class="line">  <span class="string">"color"</span>:<span class="string">"red"</span>,</div><div class="line">  <span class="string">"font-size"</span>:<span class="string">"14px"</span></div><div class="line">&#125;);</div></pre></td></tr></table></figure>
</li>
<li><p>遍历节点，把每个节点里面的文本内容重复一遍</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$node.each(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">  $(<span class="keyword">this</span>).clone.insertAfter($(<span class="keyword">this</span>));</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
</li>
<li><p>从 <code>$ct</code> 里查找 class 为 <code>.item</code> 的子元素</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ct.find(<span class="string">'.item'</span>);</div></pre></td></tr></table></figure>
</li>
<li><p>获取 <code>$ct</code> 里面的所有孩子</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ct.chidren()</div></pre></td></tr></table></figure>
</li>
<li><p>对于 <code>$node</code>，向上找到 class 为’.ct’的父亲，在从该父亲找到’.panel’的孩子</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$node.parent(<span class="string">'.ct'</span>).find(<span class="string">'.panel'</span>);</div></pre></td></tr></table></figure>
</li>
<li><p>获取选择元素的数量</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$node.length;</div></pre></td></tr></table></figure>
</li>
<li><p>获取当前元素在兄弟中的排行</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$node.index();</div></pre></td></tr></table></figure>
</li>
</ol>
<h4 id="2-简单实现以下操作："><a href="#2-简单实现以下操作：" class="headerlink" title="2. 简单实现以下操作："></a><strong>2. 简单实现以下操作：</strong></h4><ol>
<li><p>当点击 <code>$btn</code> 时，让 <code>$btn</code> 的背景色变为红色再变为蓝色</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$btn.on(<span class="string">'click'</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">  $(<span class="keyword">this</span>).animate(&#123;<span class="attr">backgroundColor</span>:<span class="string">'red'</span>&#125;,<span class="number">1000</span>).animate(&#123;<span class="attr">backgroundColor</span>:<span class="string">'blue'</span>&#125;,<span class="number">1000</span>);</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
</li>
<li><p>当窗口滚动时，获取垂直滚动距离</p>
<blockquote>
<p><a href="http://js.jirengu.com/lic/2/edit" target="_blank" rel="external">demo</a></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&lt;script&gt;</div><div class="line">  $(<span class="built_in">window</span>).on(<span class="string">'scroll'</span>,<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="built_in">console</span>.log( $(<span class="built_in">document</span>).scrollTop() )</div><div class="line">  &#125;);</div><div class="line"><span class="xml"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></div></pre></td></tr></table></figure>
</blockquote>
</li>
<li><p>当鼠标放置到 <code>$div</code> 上，把<code>$div</code> 背景色改为红色，移出鼠标背景色变为白色</p>
<blockquote>
<p><a href="http://js.jirengu.com/lipe/1/edit?output" target="_blank" rel="external">demo</a></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">$button.on(<span class="string">"mouseenter"</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">      $(<span class="keyword">this</span>).css(<span class="string">"background-color"</span>, <span class="string">"red"</span>);</div><div class="line">  &#125;).on(<span class="string">"mouseleave"</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">      $(<span class="keyword">this</span>).css(<span class="string">"background-color"</span>, <span class="string">"white"</span>);</div><div class="line">  &#125;);</div></pre></td></tr></table></figure>
</blockquote>
</li>
<li><p>当鼠标激活 <code>input</code> 输入框时让输入框边框变为蓝色，当输入框内容改变时把输入框里的文字小写变为大写，当输入框失去焦点时去掉边框蓝色，控制台展示输入框里的文字</p>
<blockquote>
<p><a href="http://js.jirengu.com/kal/2/edit?html,console,output" target="_blank" rel="external">demo</a></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">$ipt.on(<span class="string">'focusin'</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">  $(<span class="keyword">this</span>).css(<span class="string">'border'</span>,<span class="string">'1px solid blue'</span>);</div><div class="line">&#125;).on(<span class="string">'keyup'</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">  $(<span class="keyword">this</span>).val($(<span class="keyword">this</span>).val().toUpperCase());</div><div class="line">&#125;).on(<span class="string">'focusout'</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">  $(<span class="keyword">this</span>).css(<span class="string">'border'</span>,<span class="string">''</span>);</div><div class="line">  <span class="built_in">console</span>.log($(<span class="keyword">this</span>).val());</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
</blockquote>
</li>
<li><p>当选择 <code>select</code> 后，获取用户选择的内容</p>
<blockquote>
<p><a href="http://js.jirengu.com/poc/1/edit?console,output" target="_blank" rel="external">demo</a></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">$select.on(<span class="string">'change'</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">  <span class="keyword">var</span> selected = $(<span class="keyword">this</span>).val();</div><div class="line">  <span class="built_in">console</span>.log(selected);</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
</blockquote>
</li>
</ol>
<h4 id="3-用-jquery-ajax-实现如下效果。当点击加载更多会加载数据展示到页面。当鼠标放置上去会变色"><a href="#3-用-jquery-ajax-实现如下效果。当点击加载更多会加载数据展示到页面。当鼠标放置上去会变色" class="headerlink" title="3. 用 jquery ajax 实现如下效果。当点击加载更多会加载数据展示到页面。当鼠标放置上去会变色"></a><strong>3. 用 jquery ajax 实现如下效果。<code>当点击加载更多会加载数据展示到页面。当鼠标放置上去会变色</code></strong></h4><blockquote>
<p><a href="http://febox.applinzi.com/task26/task26-3.html" target="_blank" rel="external">示例效果</a></p>
</blockquote>
<figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;?php</span></div><div class="line">    <span class="comment">// 后端 php 测试接口文件</span></div><div class="line">    $start = $_GET[<span class="string">'start'</span>]; <span class="comment">//2</span></div><div class="line">    $len = $_GET[<span class="string">'len'</span>];  <span class="comment">//6</span></div><div class="line">    $items = <span class="keyword">array</span>();</div><div class="line"></div><div class="line">    <span class="keyword">for</span>($i = <span class="number">0</span>; $i &lt; $len; $i++)&#123;</div><div class="line">        array_push($items, <span class="string">'内容'</span> . ($start+$i));</div><div class="line">    &#125;</div><div class="line">    $ret = <span class="keyword">array</span>(<span class="string">'status'</span>=&gt;<span class="number">1</span>, <span class="string">'data'</span>=&gt;$items);</div><div class="line"></div><div class="line">    <span class="comment">//&#123;status: 1, data: ['内容1','内容2','内容3']&#125;</span></div><div class="line">    sleep(<span class="number">0.5</span>);</div><div class="line">    <span class="keyword">echo</span> json_encode($ret);</div></pre></td></tr></table></figure>
<blockquote>
<p><a href="http://febox.applinzi.com/task26/task26-3.html" target="_blank" rel="external">效果点点我</a><br><a href="https://github.com/licao404/landemo/blob/master/task26/task26-3.html" target="_blank" rel="external">瞅瞅代码</a></p>
</blockquote>
<hr>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;h3 id=&quot;【知识点】&quot;&gt;&lt;a href=&quot;#【知识点】&quot; class=&quot;headerlink&quot; title=&quot;【知识点】&quot;&gt;&lt;/a&gt;【知识点】&lt;/h3&gt;&lt;/blockquote&gt;
&lt;h4 id=&quot;1-Jquery-中，-document-ready-是什么意思？和-window-onload-的区别？-还有其他什么写法或者替代方法？&quot;&gt;&lt;a href=&quot;#1-Jquery-中，-document-ready-是什么意思？和-window-onload-的区别？-还有其他什么写法或者替代方法？&quot; class=&quot;headerlink&quot; title=&quot;1. Jquery 中， $(document).ready() 是什么意思？和  window.onload 的区别？ 还有其他什么写法或者替代方法？&quot;&gt;&lt;/a&gt;&lt;strong&gt;1. Jquery 中， &lt;code&gt;$(document).ready()&lt;/code&gt; 是什么意思？和  &lt;code&gt;window.onload&lt;/code&gt; 的区别？ 还有其他什么写法或者替代方法？&lt;/strong&gt;&lt;/h4&gt;&lt;p&gt;&lt;code&gt;$(document).ready()&lt;/code&gt; 确保在所有 DOM 构建完成之后，再运行 jQuery 代码，不管其中的代码放在任何位置都是可以运行的，相当于放在了尾部：&lt;br&gt;&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;$(&lt;span class=&quot;built_in&quot;&gt;document&lt;/span&gt;).ready(&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;)&lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log( &lt;span class=&quot;string&quot;&gt;&quot;ready!&quot;&lt;/span&gt; );&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;);&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="编程学习" scheme="http://licao404.com/categories/%E7%BC%96%E7%A8%8B%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="前端基础" scheme="http://licao404.com/categories/%E7%BC%96%E7%A8%8B%E5%AD%A6%E4%B9%A0/%E5%89%8D%E7%AB%AF%E5%9F%BA%E7%A1%80/"/>
    
    
      <category term="JavaScript" scheme="http://licao404.com/tags/JavaScript/"/>
    
      <category term="AJAX" scheme="http://licao404.com/tags/AJAX/"/>
    
      <category term="jQuery" scheme="http://licao404.com/tags/jQuery/"/>
    
  </entry>
  
</feed>
